"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toCommandProperties = exports.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    exports.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    exports.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.issue = exports.issueCommand = void 0;
    var os = __importStar(require("os"));
    var utils_1 = require_utils();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    exports.issueCommand = issueCommand;
    function issue(name, message = "") {
      issueCommand(name, {}, message);
    }
    exports.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    function escapeProperty(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
  }
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
    var fs = __importStar(require("fs"));
    var os = __importStar(require("os"));
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var utils_1 = require_utils();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: "utf8"
      });
    }
    exports.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value) {
      const delimiter = `ghadelimiter_${uuid_1.v4()}`;
      const convertedValue = utils_1.toCommandValue(value);
      if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
    }
    exports.prepareKeyValueMessage = prepareKeyValueMessage;
  }
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/lib/proxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkBypass = exports.getProxyUrl = void 0;
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === "https:";
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        } else {
          return process.env["http_proxy"] || process.env["HTTP_PROXY"];
        }
      })();
      if (proxyVar) {
        try {
          return new URL(proxyVar);
        } catch (_a) {
          if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://"))
            return new URL(`http://${proxyVar}`);
        }
      } else {
        return void 0;
      }
    }
    exports.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const reqHost = reqUrl.hostname;
      if (isLoopbackAddress(reqHost)) {
        return true;
      }
      const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
        if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) {
          return true;
        }
      }
      return false;
    }
    exports.checkBypass = checkBypass;
    function isLoopbackAddress(host) {
      const hostLower = host.toLowerCase();
      return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
    }
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports) {
    "use strict";
    var net = require("net");
    var tls = require("tls");
    var http = require("http");
    var https = require("https");
    var events = require("events");
    var assert = require("assert");
    var util = require("util");
    exports.httpOverHttp = httpOverHttp;
    exports.httpsOverHttp = httpsOverHttp;
    exports.httpOverHttps = httpOverHttps;
    exports.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on("free", function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self2.requests.length; i < len; ++i) {
          var pending = self2.requests[i];
          if (pending.host === options2.host && pending.port === options2.port) {
            self2.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug("making CONNECT request");
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head) {
        process.nextTick(function() {
          onConnect(res, socket, head);
        });
      }
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug(
            "tunneling socket could not be established, statusCode=%d",
            res.statusCode
          );
          socket.destroy();
          var error2 = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error2.code = "ECONNRESET";
          options.request.emit("error", error2);
          self2.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug("got illegal response body from proxy");
          socket.destroy();
          var error2 = new Error("got illegal response body from proxy");
          error2.code = "ECONNRESET";
          options.request.emit("error", error2);
          self2.removeSocket(placeholder);
          return;
        }
        debug("tunneling connection has established");
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      function onError(cause) {
        connectReq.removeAllListeners();
        debug(
          "tunneling socket could not be established, cause=%s\n",
          cause.message,
          cause.stack
        );
        var error2 = new Error("tunneling socket could not be established, cause=" + cause.message);
        error2.code = "ECONNRESET";
        options.request.emit("error", error2);
        self2.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function(socket2) {
          pending.request.onSocket(socket2);
        });
      }
    };
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === "object") {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports.debug = debug;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports, module2) {
    module2.exports = require_tunnel();
  }
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  "node_modules/@actions/http-client/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
    var http = __importStar(require("http"));
    var https = __importStar(require("https"));
    var pm = __importStar(require_proxy());
    var tunnel = __importStar(require_tunnel2());
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
    var Headers;
    (function(Headers2) {
      Headers2["Accept"] = "accept";
      Headers2["ContentType"] = "content-type";
    })(Headers = exports.Headers || (exports.Headers = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    exports.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class _HttpClientError extends Error {
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, _HttpClientError.prototype);
      }
    };
    exports.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            let output = Buffer.alloc(0);
            this.message.on("data", (chunk) => {
              output = Buffer.concat([output, chunk]);
            });
            this.message.on("end", () => {
              resolve(output.toString());
            });
          }));
        });
      }
      readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const chunks = [];
            this.message.on("data", (chunk) => {
              chunks.push(chunk);
            });
            this.message.on("end", () => {
              resolve(Buffer.concat(chunks));
            });
          }));
        });
      }
    };
    exports.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    exports.isHttps = isHttps;
    var HttpClient = class {
      constructor(userAgent2, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent2;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      /**
       * Gets a typed object from an endpoint
       * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
       */
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      /**
       * Makes a raw http request.
       * All other methods such as get, post, patch, and request ultimately call this.
       * Prefer get, del, post and patch
       */
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          const parsedUrl = new URL(requestUrl);
          let info2 = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info2, data);
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info2, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header];
                  }
                }
              }
              info2 = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info2, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      /**
       * Needs to be called if keepAlive is set to true in request options.
       */
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      /**
       * Raw request.
       * @param info
       * @param data
       */
      requestRaw(info2, data) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error("Unknown error"));
              } else {
                resolve(res);
              }
            }
            this.requestRawWithCallback(info2, data, callbackForResult);
          });
        });
      }
      /**
       * Raw request with callback.
       * @param info
       * @param data
       * @param onResult
       */
      requestRawWithCallback(info2, data, onResult) {
        if (typeof data === "string") {
          if (!info2.options.headers) {
            info2.options.headers = {};
          }
          info2.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        const req = info2.httpModule.request(info2.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info2.options.path}`));
        });
        req.on("error", function(err) {
          handleResult(err);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      /**
       * Gets an http agent. This function is useful when you need an http agent that handles
       * routing through a proxy server - depending upon the url and proxy environment variables.
       * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
       */
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info2 = {};
        info2.parsedUrl = requestUrl;
        const usingSsl = info2.parsedUrl.protocol === "https:";
        info2.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info2.options = {};
        info2.options.host = info2.parsedUrl.hostname;
        info2.options.port = info2.parsedUrl.port ? parseInt(info2.parsedUrl.port) : defaultPort;
        info2.options.path = (info2.parsedUrl.pathname || "") + (info2.parsedUrl.search || "");
        info2.options.method = method;
        info2.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info2.options.headers["user-agent"] = this.userAgent;
        }
        info2.options.agent = this._getAgent(info2.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info2.options);
          }
        }
        return info2;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys2(this.requestOptions.headers), lowercaseKeys2(headers || {}));
        }
        return lowercaseKeys2(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys2(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
              proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
            }), { host: proxyUrl.hostname, port: proxyUrl.port })
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (this._keepAlive && !agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (!agent) {
          agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve) => setTimeout(() => resolve(), ms));
        });
      }
      _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode || 0;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode === HttpCodes.NotFound) {
              resolve(response);
            }
            function dateTimeDeserializer(key, value) {
              if (typeof value === "string") {
                const a = new Date(value);
                if (!isNaN(a.valueOf())) {
                  return a;
                }
              }
              return value;
            }
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                response.result = obj;
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = `Failed request: (${statusCode})`;
              }
              const err = new HttpClientError(msg, statusCode);
              err.result = response.result;
              reject(err);
            } else {
              resolve(response);
            }
          }));
        });
      }
    };
    exports.HttpClient = HttpClient;
    var lowercaseKeys2 = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
  }
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/lib/auth.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
    var BasicCredentialHandler = class {
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Bearer ${this.token}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class _OidcClient {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(_OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = _OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error2) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error2.statusCode}
 
        Error Message: ${error2.result.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            let id_token_url = _OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            core_1.debug(`ID token url is ${id_token_url}`);
            const id_token = yield _OidcClient.getCall(id_token_url);
            core_1.setSecret(id_token);
            return id_token;
          } catch (error2) {
            throw new Error(`Error message: ${error2.message}`);
          }
        });
      }
    };
    exports.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  "node_modules/@actions/core/lib/summary.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
    var os_1 = require("os");
    var fs_1 = require("fs");
    var { access, appendFile, writeFile } = fs_1.promises;
    exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    var Summary = class {
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(options) {
        return __awaiter(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(text, href) {
        const element = this.wrap("a", text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports.markdownSummary = _summary;
    exports.summary = _summary;
  }
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  "node_modules/@actions/core/lib/path-utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
    var path = __importStar(require("path"));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, "/");
    }
    exports.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, "\\");
    }
    exports.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path.sep);
    }
    exports.toPlatformPath = toPlatformPath;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils();
    var os = __importStar(require("os"));
    var path = __importStar(require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = utils_1.toCommandValue(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("ENV", file_command_1.prepareKeyValueMessage(name, val));
      }
      command_1.issueCommand("set-env", { name }, convertedVal);
    }
    exports.exportVariable = exportVariable;
    function setSecret(secret) {
      command_1.issueCommand("add-mask", {}, secret);
    }
    exports.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        file_command_1.issueFileCommand("PATH", inputPath);
      } else {
        command_1.issueCommand("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path.delimiter}${process.env["PATH"]}`;
    }
    exports.addPath = addPath;
    function getInput2(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports.getInput = getInput2;
    function getMultilineInput(name, options) {
      const inputs = getInput2(name, options).split("\n").filter((x) => x !== "");
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    exports.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput2(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports.getBooleanInput = getBooleanInput;
    function setOutput(name, value) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("OUTPUT", file_command_1.prepareKeyValueMessage(name, value));
      }
      process.stdout.write(os.EOL);
      command_1.issueCommand("set-output", { name }, utils_1.toCommandValue(value));
    }
    exports.setOutput = setOutput;
    function setCommandEcho(enabled) {
      command_1.issue("echo", enabled ? "on" : "off");
    }
    exports.setCommandEcho = setCommandEcho;
    function setFailed2(message) {
      process.exitCode = ExitCode.Failure;
      error2(message);
    }
    exports.setFailed = setFailed2;
    function isDebug() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    exports.isDebug = isDebug;
    function debug(message) {
      command_1.issueCommand("debug", {}, message);
    }
    exports.debug = debug;
    function error2(message, properties = {}) {
      command_1.issueCommand("error", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.error = error2;
    function warning(message, properties = {}) {
      command_1.issueCommand("warning", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.warning = warning;
    function notice(message, properties = {}) {
      command_1.issueCommand("notice", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.notice = notice;
    function info2(message) {
      process.stdout.write(message + os.EOL);
    }
    exports.info = info2;
    function startGroup(name) {
      command_1.issue("group", name);
    }
    exports.startGroup = startGroup;
    function endGroup() {
      command_1.issue("endgroup");
    }
    exports.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports.group = group;
    function saveState(name, value) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("STATE", file_command_1.prepareKeyValueMessage(name, value));
      }
      command_1.issueCommand("save-state", { name }, utils_1.toCommandValue(value));
    }
    exports.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    exports.getState = getState;
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports, "summary", { enumerable: true, get: function() {
      return summary_1.summary;
    } });
    var summary_2 = require_summary();
    Object.defineProperty(exports, "markdownSummary", { enumerable: true, get: function() {
      return summary_2.markdownSummary;
    } });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports, "toPosixPath", { enumerable: true, get: function() {
      return path_utils_1.toPosixPath;
    } });
    Object.defineProperty(exports, "toWin32Path", { enumerable: true, get: function() {
      return path_utils_1.toWin32Path;
    } });
    Object.defineProperty(exports, "toPlatformPath", { enumerable: true, get: function() {
      return path_utils_1.toPlatformPath;
    } });
  }
});

// node_modules/@octokit-next/endpoint/lib/util/lowercase-keys.js
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}
var init_lowercase_keys = __esm({
  "node_modules/@octokit-next/endpoint/lib/util/lowercase-keys.js"() {
  }
});

// node_modules/is-plain-obj/index.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}
var init_is_plain_obj = __esm({
  "node_modules/is-plain-obj/index.js"() {
  }
});

// node_modules/@octokit-next/endpoint/lib/util/merge-deep.js
function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach((key) => {
    if (isPlainObject(options[key])) {
      if (!(key in defaults))
        Object.assign(result, { [key]: options[key] });
      else
        result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, { [key]: options[key] });
    }
  });
  return result;
}
var init_merge_deep = __esm({
  "node_modules/@octokit-next/endpoint/lib/util/merge-deep.js"() {
    init_is_plain_obj();
  }
});

// node_modules/@octokit-next/endpoint/lib/util/remove-undefined-properties.js
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}
var init_remove_undefined_properties = __esm({
  "node_modules/@octokit-next/endpoint/lib/util/remove-undefined-properties.js"() {
  }
});

// node_modules/@octokit-next/endpoint/lib/merge.js
function merge(defaults, route, options) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? { method, url } : { url: method }, options);
  } else {
    options = Object.assign({}, route);
  }
  options.headers = lowercaseKeys(options.headers);
  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options);
  if (defaults && defaults.mediaType.previews.length) {
    mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
  }
  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map(
    (preview) => preview.replace(/-preview/, "")
  );
  return mergedOptions;
}
var init_merge = __esm({
  "node_modules/@octokit-next/endpoint/lib/merge.js"() {
    init_lowercase_keys();
    init_merge_deep();
    init_remove_undefined_properties();
  }
});

// node_modules/@octokit-next/endpoint/lib/util/add-query-parameters.js
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  const query = names.map((name) => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
  return url + separator + query;
}
var init_add_query_parameters = __esm({
  "node_modules/@octokit-next/endpoint/lib/util/add-query-parameters.js"() {
  }
});

// node_modules/@octokit-next/endpoint/lib/util/extract-url-variable-names.js
function removeNonChars(variableName) {
  return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}
var urlVariableRegex;
var init_extract_url_variable_names = __esm({
  "node_modules/@octokit-next/endpoint/lib/util/extract-url-variable-names.js"() {
    urlVariableRegex = /\{[^}]+\}/g;
  }
});

// node_modules/@octokit-next/endpoint/lib/util/omit.js
function omit(object, keysToOmit) {
  return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
    obj[key] = object[key];
    return obj;
  }, {});
}
var init_omit = __esm({
  "node_modules/@octokit-next/endpoint/lib/util/omit.js"() {
  }
});

// node_modules/@octokit-next/endpoint/lib/util/url-template.js
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context2, operator, key, modifier) {
  var value = context2[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(
        encodeValue(operator, value, isKeyOperator(operator) ? key : "")
      );
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(
              encodeValue(operator, value2, isKeyOperator(operator) ? key : "")
            );
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}
function expand(template, context2) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  return template.replace(
    /\{([^\{\}]+)\}|([^\{\}]+)/g,
    function(_, expression, literal) {
      if (expression) {
        let operator = "";
        const values = [];
        if (operators.indexOf(expression.charAt(0)) !== -1) {
          operator = expression.charAt(0);
          expression = expression.substr(1);
        }
        expression.split(/,/g).forEach(function(variable) {
          var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
          values.push(getValues(context2, operator, tmp[1], tmp[2] || tmp[3]));
        });
        if (operator && operator !== "+") {
          var separator = ",";
          if (operator === "?") {
            separator = "&";
          } else if (operator !== "#") {
            separator = operator;
          }
          return (values.length !== 0 ? operator : "") + values.join(separator);
        } else {
          return values.join(",");
        }
      } else {
        return encodeReserved(literal);
      }
    }
  );
}
var init_url_template = __esm({
  "node_modules/@octokit-next/endpoint/lib/util/url-template.js"() {
  }
});

// node_modules/@octokit-next/endpoint/lib/parse.js
function parse2(options) {
  let method = options.method.toUpperCase();
  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }
  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map(
        (preview) => preview.replace(
          /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
          `application/vnd$1$2.${options.mediaType.format}`
        )
      ).join(",");
    }
    if (options.mediaType.previews.length) {
      const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
      headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
        const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
        return `application/vnd.github.${preview}-preview${format}`;
      }).join(",");
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign(
    { method, url, headers },
    typeof body !== "undefined" ? { body } : null,
    options.request ? { request: options.request } : null
  );
}
var init_parse2 = __esm({
  "node_modules/@octokit-next/endpoint/lib/parse.js"() {
    init_add_query_parameters();
    init_extract_url_variable_names();
    init_omit();
    init_url_template();
  }
});

// node_modules/@octokit-next/endpoint/lib/endpoint-with-defaults.js
function endpointWithDefaults(defaults, route, options) {
  return parse2(merge(defaults, route, options));
}
var init_endpoint_with_defaults = __esm({
  "node_modules/@octokit-next/endpoint/lib/endpoint-with-defaults.js"() {
    init_merge();
    init_parse2();
  }
});

// node_modules/@octokit-next/endpoint/lib/with-defaults.js
function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults.bind(null, DEFAULTS2),
    merge: merge.bind(null, DEFAULTS2),
    parse: parse2
  });
}
var init_with_defaults = __esm({
  "node_modules/@octokit-next/endpoint/lib/with-defaults.js"() {
    init_endpoint_with_defaults();
    init_merge();
    init_parse2();
  }
});

// node_modules/universal-user-agent/index.js
function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }
  if (typeof process === "object" && "version" in process) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
  }
  return "<environment undetectable>";
}
var init_universal_user_agent = __esm({
  "node_modules/universal-user-agent/index.js"() {
  }
});

// node_modules/@octokit-next/endpoint/lib/version.js
var VERSION;
var init_version2 = __esm({
  "node_modules/@octokit-next/endpoint/lib/version.js"() {
    VERSION = "2.7.1";
  }
});

// node_modules/@octokit-next/endpoint/lib/defaults.js
var userAgent, DEFAULTS;
var init_defaults = __esm({
  "node_modules/@octokit-next/endpoint/lib/defaults.js"() {
    init_universal_user_agent();
    init_version2();
    userAgent = `octokit-next-endpoint.js/${VERSION} ${getUserAgent()}`;
    DEFAULTS = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent
      },
      mediaType: {
        format: "",
        previews: []
      }
    };
  }
});

// node_modules/@octokit-next/endpoint/index.js
var endpoint;
var init_endpoint = __esm({
  "node_modules/@octokit-next/endpoint/index.js"() {
    init_with_defaults();
    init_defaults();
    init_version2();
    endpoint = withDefaults(null, DEFAULTS);
  }
});

// node_modules/@octokit-next/request/version.js
var VERSION2;
var init_version3 = __esm({
  "node_modules/@octokit-next/request/version.js"() {
    VERSION2 = "0.0.0-development";
  }
});

// node_modules/is-plain-object/dist/is-plain-object.mjs
function isObject(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject2(o) {
  var ctor, prot;
  if (isObject(o) === false)
    return false;
  ctor = o.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
var init_is_plain_object = __esm({
  "node_modules/is-plain-object/dist/is-plain-object.mjs"() {
  }
});

// node_modules/@octokit-next/request-error/index.js
var RequestError;
var init_request_error = __esm({
  "node_modules/@octokit-next/request-error/index.js"() {
    RequestError = class extends Error {
      name;
      /**
       * http status code
       */
      status;
      /**
       * Request options that lead to the error.
       */
      request;
      /**
       * Response object if a response was received
       */
      response;
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        if ("response" in options) {
          this.response = options.response;
        }
        const requestCopy = { ...options.request };
        if (options.request.headers.authorization) {
          requestCopy.headers = {
            ...options.request.headers,
            authorization: options.request.headers.authorization.replace(
              / .*$/,
              " [REDACTED]"
            )
          };
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
      }
    };
  }
});

// node_modules/@octokit-next/request/get-buffer-response.js
function getBufferResponse(response) {
  return response.arrayBuffer();
}
var init_get_buffer_response = __esm({
  "node_modules/@octokit-next/request/get-buffer-response.js"() {
  }
});

// node_modules/@octokit-next/request/fetch-wrapper.js
function fetchWrapper(requestOptions) {
  var _a;
  const log = ((_a = requestOptions.request) == null ? void 0 : _a.log) || console;
  if (isPlainObject2(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }
  let responseHeaders = {};
  let status;
  let url;
  const { redirect, fetch, ...remainingRequestOptions } = requestOptions.request || {};
  const fetchOptions = {
    method: requestOptions.method,
    body: requestOptions.body,
    headers: requestOptions.headers,
    redirect,
    ...remainingRequestOptions
  };
  const requestOrGlobalFetch = fetch || globalThis.fetch;
  return requestOrGlobalFetch(requestOptions.url, fetchOptions).then(async (response) => {
    url = response.url;
    status = response.status;
    for (const keyAndValue of response.headers) {
      responseHeaders[keyAndValue[0]] = keyAndValue[1];
    }
    if ("deprecation" in responseHeaders) {
      const matches = responseHeaders.link && responseHeaders.link.match(/<([^>]+)>; rel="deprecation"/);
      const deprecationLink = matches && matches.pop();
      log.warn(
        `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${responseHeaders.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
      );
    }
    if (status === 204 || status === 205) {
      return;
    }
    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }
      throw new RequestError(response.statusText, status, {
        response: {
          url,
          status,
          headers: responseHeaders,
          data: void 0
        },
        request: requestOptions
      });
    }
    if (status === 304) {
      throw new RequestError("Not modified", status, {
        response: {
          url,
          status,
          headers: responseHeaders,
          data: await getResponseData(response)
        },
        request: requestOptions
      });
    }
    if (status >= 400) {
      const data = await getResponseData(response);
      const error2 = new RequestError(toErrorMessage(data), status, {
        response: {
          url,
          status,
          headers: responseHeaders,
          data
        },
        request: requestOptions
      });
      throw error2;
    }
    return getResponseData(response);
  }).then((data) => {
    return {
      status,
      url,
      headers: responseHeaders,
      data
    };
  }).catch((error2) => {
    if (error2 instanceof RequestError)
      throw error2;
    if (error2.name === "AbortError")
      throw error2;
    throw new RequestError(error2.message, 500, {
      request: requestOptions
    });
  });
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (/application\/json/.test(contentType)) {
    return response.json();
  }
  if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
    return response.text();
  }
  return getBufferResponse(response);
}
function toErrorMessage(data) {
  if (typeof data === "string")
    return data;
  if ("message" in data) {
    if (Array.isArray(data.errors)) {
      return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
    }
    return data.message;
  }
  return `Unknown error: ${JSON.stringify(data)}`;
}
var init_fetch_wrapper = __esm({
  "node_modules/@octokit-next/request/fetch-wrapper.js"() {
    init_is_plain_object();
    init_request_error();
    init_get_buffer_response();
  }
});

// node_modules/@octokit-next/request/with-defaults.js
function withDefaults2(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: withDefaults2.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: withDefaults2.bind(null, endpoint2)
  });
}
var init_with_defaults2 = __esm({
  "node_modules/@octokit-next/request/with-defaults.js"() {
    init_fetch_wrapper();
  }
});

// node_modules/@octokit-next/request/index.js
var request;
var init_request = __esm({
  "node_modules/@octokit-next/request/index.js"() {
    init_endpoint();
    init_universal_user_agent();
    init_version3();
    init_with_defaults2();
    request = withDefaults2(endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION2} ${getUserAgent()}`
      }
    });
  }
});

// node_modules/@octokit/graphql/version.js
var VERSION3;
var init_version4 = __esm({
  "node_modules/@octokit/graphql/version.js"() {
    VERSION3 = "0.0.0-development";
  }
});

// node_modules/@octokit/graphql/error.js
function _buildMessageForResponseErrors(data) {
  return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
}
var GraphqlResponseError;
var init_error = __esm({
  "node_modules/@octokit/graphql/error.js"() {
    GraphqlResponseError = class extends Error {
      constructor(request2, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
    };
  }
});

// node_modules/@octokit/graphql/graphql.js
function graphql(request2, query, options) {
  if (options) {
    if (typeof query === "string" && "query" in options) {
      return Promise.reject(
        new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
      );
    }
    for (const key in options) {
      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
        continue;
      return Promise.reject(
        new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`)
      );
    }
  }
  const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }
    if (!result.variables) {
      result.variables = {};
    }
    result.variables[key] = parsedOptions[key];
    return result;
  }, {});
  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }
  return request2(requestOptions).then((response) => {
    if (response.data.errors) {
      const headers = {};
      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }
      throw new GraphqlResponseError(requestOptions, headers, response.data);
    }
    return response.data.data;
  });
}
var NON_VARIABLE_OPTIONS, FORBIDDEN_VARIABLE_OPTIONS, GHES_V3_SUFFIX_REGEX;
var init_graphql = __esm({
  "node_modules/@octokit/graphql/graphql.js"() {
    init_error();
    NON_VARIABLE_OPTIONS = [
      "method",
      "baseUrl",
      "url",
      "headers",
      "request",
      "query",
      "mediaType"
    ];
    FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
    GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
  }
});

// node_modules/@octokit/graphql/with-defaults.js
function withDefaults3(oldRequest, newDefaults) {
  const newRequest = oldRequest.defaults(newDefaults);
  const newApi = (query, options) => {
    return graphql(newRequest, query, options);
  };
  return Object.assign(newApi, {
    defaults: withDefaults3.bind(null, newRequest),
    endpoint: newRequest.endpoint
  });
}
var init_with_defaults3 = __esm({
  "node_modules/@octokit/graphql/with-defaults.js"() {
    init_graphql();
  }
});

// node_modules/@octokit/graphql/index.js
var graphql_exports = {};
__export(graphql_exports, {
  GraphqlResponseError: () => GraphqlResponseError,
  graphql: () => graphql2,
  withCustomRequest: () => withCustomRequest
});
function withCustomRequest(customRequest) {
  return withDefaults3(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}
var graphql2;
var init_graphql2 = __esm({
  "node_modules/@octokit/graphql/index.js"() {
    init_request();
    init_universal_user_agent();
    init_version4();
    init_with_defaults3();
    init_error();
    graphql2 = withDefaults3(request, {
      headers: {
        "user-agent": `octokit-graphql.js/${VERSION3} ${getUserAgent()}`
      },
      method: "POST",
      url: "/graphql"
    });
  }
});

// node_modules/@octokit/plugin-request-log/dist-node/index.js
var require_dist_node = __commonJS({
  "node_modules/@octokit/plugin-request-log/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var VERSION4 = "1.0.4";
    function requestLog(octokit) {
      octokit.hook.wrap("request", (request2, options) => {
        octokit.log.debug("request", options);
        const start = Date.now();
        const requestOptions = octokit.request.endpoint.parse(options);
        const path = requestOptions.url.replace(options.baseUrl, "");
        return request2(options).then((response) => {
          octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);
          return response;
        }).catch((error2) => {
          octokit.log.info(`${requestOptions.method} ${path} - ${error2.status} in ${Date.now() - start}ms`);
          throw error2;
        });
      });
    }
    requestLog.VERSION = VERSION4;
    exports.requestLog = requestLog;
  }
});

// node_modules/deprecation/dist-node/index.js
var require_dist_node2 = __commonJS({
  "node_modules/deprecation/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Deprecation = class extends Error {
      constructor(message) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "Deprecation";
      }
    };
    exports.Deprecation = Deprecation;
  }
});

// node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
var require_dist_node3 = __commonJS({
  "node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var deprecation = require_dist_node2();
    var endpointsByScope = {
      actions: {
        cancelWorkflowRun: {
          method: "POST",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            run_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runs/:run_id/cancel"
        },
        createOrUpdateSecretForRepo: {
          method: "PUT",
          params: {
            encrypted_value: {
              type: "string"
            },
            key_id: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/secrets/:name"
        },
        createRegistrationToken: {
          method: "POST",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/runners/registration-token"
        },
        createRemoveToken: {
          method: "POST",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/runners/remove-token"
        },
        deleteArtifact: {
          method: "DELETE",
          params: {
            artifact_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/artifacts/:artifact_id"
        },
        deleteSecretFromRepo: {
          method: "DELETE",
          params: {
            name: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/secrets/:name"
        },
        downloadArtifact: {
          method: "GET",
          params: {
            archive_format: {
              required: true,
              type: "string"
            },
            artifact_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format"
        },
        getArtifact: {
          method: "GET",
          params: {
            artifact_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/artifacts/:artifact_id"
        },
        getPublicKey: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/secrets/public-key"
        },
        getSecret: {
          method: "GET",
          params: {
            name: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/secrets/:name"
        },
        getSelfHostedRunner: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            runner_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runners/:runner_id"
        },
        getWorkflow: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            workflow_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/workflows/:workflow_id"
        },
        getWorkflowJob: {
          method: "GET",
          params: {
            job_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/jobs/:job_id"
        },
        getWorkflowRun: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            run_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runs/:run_id"
        },
        listDownloadsForSelfHostedRunnerApplication: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/runners/downloads"
        },
        listJobsForWorkflowRun: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            run_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runs/:run_id/jobs"
        },
        listRepoWorkflowRuns: {
          method: "GET",
          params: {
            actor: {
              type: "string"
            },
            branch: {
              type: "string"
            },
            event: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            status: {
              enum: ["completed", "status", "conclusion"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/runs"
        },
        listRepoWorkflows: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/workflows"
        },
        listSecretsForRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/secrets"
        },
        listSelfHostedRunnersForRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/runners"
        },
        listWorkflowJobLogs: {
          method: "GET",
          params: {
            job_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/actions/jobs/:job_id/logs"
        },
        listWorkflowRunArtifacts: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            run_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runs/:run_id/artifacts"
        },
        listWorkflowRunLogs: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            run_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runs/:run_id/logs"
        },
        listWorkflowRuns: {
          method: "GET",
          params: {
            actor: {
              type: "string"
            },
            branch: {
              type: "string"
            },
            event: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            status: {
              enum: ["completed", "status", "conclusion"],
              type: "string"
            },
            workflow_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/workflows/:workflow_id/runs"
        },
        reRunWorkflow: {
          method: "POST",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            run_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runs/:run_id/rerun"
        },
        removeSelfHostedRunner: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            runner_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/actions/runners/:runner_id"
        }
      },
      activity: {
        checkStarringRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/user/starred/:owner/:repo"
        },
        deleteRepoSubscription: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/subscription"
        },
        deleteThreadSubscription: {
          method: "DELETE",
          params: {
            thread_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/notifications/threads/:thread_id/subscription"
        },
        getRepoSubscription: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/subscription"
        },
        getThread: {
          method: "GET",
          params: {
            thread_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/notifications/threads/:thread_id"
        },
        getThreadSubscription: {
          method: "GET",
          params: {
            thread_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/notifications/threads/:thread_id/subscription"
        },
        listEventsForOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/events/orgs/:org"
        },
        listEventsForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/events"
        },
        listFeeds: {
          method: "GET",
          params: {},
          url: "/feeds"
        },
        listNotifications: {
          method: "GET",
          params: {
            all: {
              type: "boolean"
            },
            before: {
              type: "string"
            },
            page: {
              type: "integer"
            },
            participating: {
              type: "boolean"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            }
          },
          url: "/notifications"
        },
        listNotificationsForRepo: {
          method: "GET",
          params: {
            all: {
              type: "boolean"
            },
            before: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            participating: {
              type: "boolean"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            since: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/notifications"
        },
        listPublicEvents: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/events"
        },
        listPublicEventsForOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/events"
        },
        listPublicEventsForRepoNetwork: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/networks/:owner/:repo/events"
        },
        listPublicEventsForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/events/public"
        },
        listReceivedEventsForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/received_events"
        },
        listReceivedPublicEventsForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/received_events/public"
        },
        listRepoEvents: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/events"
        },
        listReposStarredByAuthenticatedUser: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            }
          },
          url: "/user/starred"
        },
        listReposStarredByUser: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/starred"
        },
        listReposWatchedByUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/subscriptions"
        },
        listStargazersForRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/stargazers"
        },
        listWatchedReposForAuthenticatedUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/subscriptions"
        },
        listWatchersForRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/subscribers"
        },
        markAsRead: {
          method: "PUT",
          params: {
            last_read_at: {
              type: "string"
            }
          },
          url: "/notifications"
        },
        markNotificationsAsReadForRepo: {
          method: "PUT",
          params: {
            last_read_at: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/notifications"
        },
        markThreadAsRead: {
          method: "PATCH",
          params: {
            thread_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/notifications/threads/:thread_id"
        },
        setRepoSubscription: {
          method: "PUT",
          params: {
            ignored: {
              type: "boolean"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            subscribed: {
              type: "boolean"
            }
          },
          url: "/repos/:owner/:repo/subscription"
        },
        setThreadSubscription: {
          method: "PUT",
          params: {
            ignored: {
              type: "boolean"
            },
            thread_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/notifications/threads/:thread_id/subscription"
        },
        starRepo: {
          method: "PUT",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/user/starred/:owner/:repo"
        },
        unstarRepo: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/user/starred/:owner/:repo"
        }
      },
      apps: {
        addRepoToInstallation: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "PUT",
          params: {
            installation_id: {
              required: true,
              type: "integer"
            },
            repository_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/installations/:installation_id/repositories/:repository_id"
        },
        checkAccountIsAssociatedWithAny: {
          method: "GET",
          params: {
            account_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/marketplace_listing/accounts/:account_id"
        },
        checkAccountIsAssociatedWithAnyStubbed: {
          method: "GET",
          params: {
            account_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/marketplace_listing/stubbed/accounts/:account_id"
        },
        checkAuthorization: {
          deprecated: "octokit.apps.checkAuthorization() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization",
          method: "GET",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/tokens/:access_token"
        },
        checkToken: {
          headers: {
            accept: "application/vnd.github.doctor-strange-preview+json"
          },
          method: "POST",
          params: {
            access_token: {
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/token"
        },
        createContentAttachment: {
          headers: {
            accept: "application/vnd.github.corsair-preview+json"
          },
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            content_reference_id: {
              required: true,
              type: "integer"
            },
            title: {
              required: true,
              type: "string"
            }
          },
          url: "/content_references/:content_reference_id/attachments"
        },
        createFromManifest: {
          headers: {
            accept: "application/vnd.github.fury-preview+json"
          },
          method: "POST",
          params: {
            code: {
              required: true,
              type: "string"
            }
          },
          url: "/app-manifests/:code/conversions"
        },
        createInstallationToken: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "POST",
          params: {
            installation_id: {
              required: true,
              type: "integer"
            },
            permissions: {
              type: "object"
            },
            repository_ids: {
              type: "integer[]"
            }
          },
          url: "/app/installations/:installation_id/access_tokens"
        },
        deleteAuthorization: {
          headers: {
            accept: "application/vnd.github.doctor-strange-preview+json"
          },
          method: "DELETE",
          params: {
            access_token: {
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/grant"
        },
        deleteInstallation: {
          headers: {
            accept: "application/vnd.github.gambit-preview+json,application/vnd.github.machine-man-preview+json"
          },
          method: "DELETE",
          params: {
            installation_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/app/installations/:installation_id"
        },
        deleteToken: {
          headers: {
            accept: "application/vnd.github.doctor-strange-preview+json"
          },
          method: "DELETE",
          params: {
            access_token: {
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/token"
        },
        findOrgInstallation: {
          deprecated: "octokit.apps.findOrgInstallation() has been renamed to octokit.apps.getOrgInstallation() (2019-04-10)",
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/installation"
        },
        findRepoInstallation: {
          deprecated: "octokit.apps.findRepoInstallation() has been renamed to octokit.apps.getRepoInstallation() (2019-04-10)",
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/installation"
        },
        findUserInstallation: {
          deprecated: "octokit.apps.findUserInstallation() has been renamed to octokit.apps.getUserInstallation() (2019-04-10)",
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/installation"
        },
        getAuthenticated: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {},
          url: "/app"
        },
        getBySlug: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            app_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/apps/:app_slug"
        },
        getInstallation: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            installation_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/app/installations/:installation_id"
        },
        getOrgInstallation: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/installation"
        },
        getRepoInstallation: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/installation"
        },
        getUserInstallation: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/installation"
        },
        listAccountsUserOrOrgOnPlan: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            plan_id: {
              required: true,
              type: "integer"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            }
          },
          url: "/marketplace_listing/plans/:plan_id/accounts"
        },
        listAccountsUserOrOrgOnPlanStubbed: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            plan_id: {
              required: true,
              type: "integer"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            }
          },
          url: "/marketplace_listing/stubbed/plans/:plan_id/accounts"
        },
        listInstallationReposForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            installation_id: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/installations/:installation_id/repositories"
        },
        listInstallations: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/app/installations"
        },
        listInstallationsForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/installations"
        },
        listMarketplacePurchasesForAuthenticatedUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/marketplace_purchases"
        },
        listMarketplacePurchasesForAuthenticatedUserStubbed: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/marketplace_purchases/stubbed"
        },
        listPlans: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/marketplace_listing/plans"
        },
        listPlansStubbed: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/marketplace_listing/stubbed/plans"
        },
        listRepos: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/installation/repositories"
        },
        removeRepoFromInstallation: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "DELETE",
          params: {
            installation_id: {
              required: true,
              type: "integer"
            },
            repository_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/installations/:installation_id/repositories/:repository_id"
        },
        resetAuthorization: {
          deprecated: "octokit.apps.resetAuthorization() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization",
          method: "POST",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/tokens/:access_token"
        },
        resetToken: {
          headers: {
            accept: "application/vnd.github.doctor-strange-preview+json"
          },
          method: "PATCH",
          params: {
            access_token: {
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/token"
        },
        revokeAuthorizationForApplication: {
          deprecated: "octokit.apps.revokeAuthorizationForApplication() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application",
          method: "DELETE",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/tokens/:access_token"
        },
        revokeGrantForApplication: {
          deprecated: "octokit.apps.revokeGrantForApplication() is deprecated, see https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application",
          method: "DELETE",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/grants/:access_token"
        },
        revokeInstallationToken: {
          headers: {
            accept: "application/vnd.github.gambit-preview+json"
          },
          method: "DELETE",
          params: {},
          url: "/installation/token"
        }
      },
      checks: {
        create: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "POST",
          params: {
            actions: {
              type: "object[]"
            },
            "actions[].description": {
              required: true,
              type: "string"
            },
            "actions[].identifier": {
              required: true,
              type: "string"
            },
            "actions[].label": {
              required: true,
              type: "string"
            },
            completed_at: {
              type: "string"
            },
            conclusion: {
              enum: ["success", "failure", "neutral", "cancelled", "timed_out", "action_required"],
              type: "string"
            },
            details_url: {
              type: "string"
            },
            external_id: {
              type: "string"
            },
            head_sha: {
              required: true,
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            output: {
              type: "object"
            },
            "output.annotations": {
              type: "object[]"
            },
            "output.annotations[].annotation_level": {
              enum: ["notice", "warning", "failure"],
              required: true,
              type: "string"
            },
            "output.annotations[].end_column": {
              type: "integer"
            },
            "output.annotations[].end_line": {
              required: true,
              type: "integer"
            },
            "output.annotations[].message": {
              required: true,
              type: "string"
            },
            "output.annotations[].path": {
              required: true,
              type: "string"
            },
            "output.annotations[].raw_details": {
              type: "string"
            },
            "output.annotations[].start_column": {
              type: "integer"
            },
            "output.annotations[].start_line": {
              required: true,
              type: "integer"
            },
            "output.annotations[].title": {
              type: "string"
            },
            "output.images": {
              type: "object[]"
            },
            "output.images[].alt": {
              required: true,
              type: "string"
            },
            "output.images[].caption": {
              type: "string"
            },
            "output.images[].image_url": {
              required: true,
              type: "string"
            },
            "output.summary": {
              required: true,
              type: "string"
            },
            "output.text": {
              type: "string"
            },
            "output.title": {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            started_at: {
              type: "string"
            },
            status: {
              enum: ["queued", "in_progress", "completed"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-runs"
        },
        createSuite: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "POST",
          params: {
            head_sha: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-suites"
        },
        get: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "GET",
          params: {
            check_run_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-runs/:check_run_id"
        },
        getSuite: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "GET",
          params: {
            check_suite_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-suites/:check_suite_id"
        },
        listAnnotations: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "GET",
          params: {
            check_run_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-runs/:check_run_id/annotations"
        },
        listForRef: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "GET",
          params: {
            check_name: {
              type: "string"
            },
            filter: {
              enum: ["latest", "all"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            status: {
              enum: ["queued", "in_progress", "completed"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:ref/check-runs"
        },
        listForSuite: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "GET",
          params: {
            check_name: {
              type: "string"
            },
            check_suite_id: {
              required: true,
              type: "integer"
            },
            filter: {
              enum: ["latest", "all"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            status: {
              enum: ["queued", "in_progress", "completed"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs"
        },
        listSuitesForRef: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "GET",
          params: {
            app_id: {
              type: "integer"
            },
            check_name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:ref/check-suites"
        },
        rerequestSuite: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "POST",
          params: {
            check_suite_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-suites/:check_suite_id/rerequest"
        },
        setSuitesPreferences: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "PATCH",
          params: {
            auto_trigger_checks: {
              type: "object[]"
            },
            "auto_trigger_checks[].app_id": {
              required: true,
              type: "integer"
            },
            "auto_trigger_checks[].setting": {
              required: true,
              type: "boolean"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-suites/preferences"
        },
        update: {
          headers: {
            accept: "application/vnd.github.antiope-preview+json"
          },
          method: "PATCH",
          params: {
            actions: {
              type: "object[]"
            },
            "actions[].description": {
              required: true,
              type: "string"
            },
            "actions[].identifier": {
              required: true,
              type: "string"
            },
            "actions[].label": {
              required: true,
              type: "string"
            },
            check_run_id: {
              required: true,
              type: "integer"
            },
            completed_at: {
              type: "string"
            },
            conclusion: {
              enum: ["success", "failure", "neutral", "cancelled", "timed_out", "action_required"],
              type: "string"
            },
            details_url: {
              type: "string"
            },
            external_id: {
              type: "string"
            },
            name: {
              type: "string"
            },
            output: {
              type: "object"
            },
            "output.annotations": {
              type: "object[]"
            },
            "output.annotations[].annotation_level": {
              enum: ["notice", "warning", "failure"],
              required: true,
              type: "string"
            },
            "output.annotations[].end_column": {
              type: "integer"
            },
            "output.annotations[].end_line": {
              required: true,
              type: "integer"
            },
            "output.annotations[].message": {
              required: true,
              type: "string"
            },
            "output.annotations[].path": {
              required: true,
              type: "string"
            },
            "output.annotations[].raw_details": {
              type: "string"
            },
            "output.annotations[].start_column": {
              type: "integer"
            },
            "output.annotations[].start_line": {
              required: true,
              type: "integer"
            },
            "output.annotations[].title": {
              type: "string"
            },
            "output.images": {
              type: "object[]"
            },
            "output.images[].alt": {
              required: true,
              type: "string"
            },
            "output.images[].caption": {
              type: "string"
            },
            "output.images[].image_url": {
              required: true,
              type: "string"
            },
            "output.summary": {
              required: true,
              type: "string"
            },
            "output.text": {
              type: "string"
            },
            "output.title": {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            started_at: {
              type: "string"
            },
            status: {
              enum: ["queued", "in_progress", "completed"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/check-runs/:check_run_id"
        }
      },
      codesOfConduct: {
        getConductCode: {
          headers: {
            accept: "application/vnd.github.scarlet-witch-preview+json"
          },
          method: "GET",
          params: {
            key: {
              required: true,
              type: "string"
            }
          },
          url: "/codes_of_conduct/:key"
        },
        getForRepo: {
          headers: {
            accept: "application/vnd.github.scarlet-witch-preview+json"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/community/code_of_conduct"
        },
        listConductCodes: {
          headers: {
            accept: "application/vnd.github.scarlet-witch-preview+json"
          },
          method: "GET",
          params: {},
          url: "/codes_of_conduct"
        }
      },
      emojis: {
        get: {
          method: "GET",
          params: {},
          url: "/emojis"
        }
      },
      gists: {
        checkIsStarred: {
          method: "GET",
          params: {
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/star"
        },
        create: {
          method: "POST",
          params: {
            description: {
              type: "string"
            },
            files: {
              required: true,
              type: "object"
            },
            "files.content": {
              type: "string"
            },
            public: {
              type: "boolean"
            }
          },
          url: "/gists"
        },
        createComment: {
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/comments"
        },
        delete: {
          method: "DELETE",
          params: {
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id"
        },
        deleteComment: {
          method: "DELETE",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/comments/:comment_id"
        },
        fork: {
          method: "POST",
          params: {
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/forks"
        },
        get: {
          method: "GET",
          params: {
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id"
        },
        getComment: {
          method: "GET",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/comments/:comment_id"
        },
        getRevision: {
          method: "GET",
          params: {
            gist_id: {
              required: true,
              type: "string"
            },
            sha: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/:sha"
        },
        list: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            }
          },
          url: "/gists"
        },
        listComments: {
          method: "GET",
          params: {
            gist_id: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/gists/:gist_id/comments"
        },
        listCommits: {
          method: "GET",
          params: {
            gist_id: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/gists/:gist_id/commits"
        },
        listForks: {
          method: "GET",
          params: {
            gist_id: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/gists/:gist_id/forks"
        },
        listPublic: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            }
          },
          url: "/gists/public"
        },
        listPublicForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/gists"
        },
        listStarred: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            }
          },
          url: "/gists/starred"
        },
        star: {
          method: "PUT",
          params: {
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/star"
        },
        unstar: {
          method: "DELETE",
          params: {
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/star"
        },
        update: {
          method: "PATCH",
          params: {
            description: {
              type: "string"
            },
            files: {
              type: "object"
            },
            "files.content": {
              type: "string"
            },
            "files.filename": {
              type: "string"
            },
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id"
        },
        updateComment: {
          method: "PATCH",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_id: {
              required: true,
              type: "integer"
            },
            gist_id: {
              required: true,
              type: "string"
            }
          },
          url: "/gists/:gist_id/comments/:comment_id"
        }
      },
      git: {
        createBlob: {
          method: "POST",
          params: {
            content: {
              required: true,
              type: "string"
            },
            encoding: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/blobs"
        },
        createCommit: {
          method: "POST",
          params: {
            author: {
              type: "object"
            },
            "author.date": {
              type: "string"
            },
            "author.email": {
              type: "string"
            },
            "author.name": {
              type: "string"
            },
            committer: {
              type: "object"
            },
            "committer.date": {
              type: "string"
            },
            "committer.email": {
              type: "string"
            },
            "committer.name": {
              type: "string"
            },
            message: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            parents: {
              required: true,
              type: "string[]"
            },
            repo: {
              required: true,
              type: "string"
            },
            signature: {
              type: "string"
            },
            tree: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/commits"
        },
        createRef: {
          method: "POST",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/refs"
        },
        createTag: {
          method: "POST",
          params: {
            message: {
              required: true,
              type: "string"
            },
            object: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            tag: {
              required: true,
              type: "string"
            },
            tagger: {
              type: "object"
            },
            "tagger.date": {
              type: "string"
            },
            "tagger.email": {
              type: "string"
            },
            "tagger.name": {
              type: "string"
            },
            type: {
              enum: ["commit", "tree", "blob"],
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/tags"
        },
        createTree: {
          method: "POST",
          params: {
            base_tree: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            tree: {
              required: true,
              type: "object[]"
            },
            "tree[].content": {
              type: "string"
            },
            "tree[].mode": {
              enum: ["100644", "100755", "040000", "160000", "120000"],
              type: "string"
            },
            "tree[].path": {
              type: "string"
            },
            "tree[].sha": {
              allowNull: true,
              type: "string"
            },
            "tree[].type": {
              enum: ["blob", "tree", "commit"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/trees"
        },
        deleteRef: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/refs/:ref"
        },
        getBlob: {
          method: "GET",
          params: {
            file_sha: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/blobs/:file_sha"
        },
        getCommit: {
          method: "GET",
          params: {
            commit_sha: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/commits/:commit_sha"
        },
        getRef: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/ref/:ref"
        },
        getTag: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            tag_sha: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/tags/:tag_sha"
        },
        getTree: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            recursive: {
              enum: ["1"],
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            tree_sha: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/trees/:tree_sha"
        },
        listMatchingRefs: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/matching-refs/:ref"
        },
        listRefs: {
          method: "GET",
          params: {
            namespace: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/refs/:namespace"
        },
        updateRef: {
          method: "PATCH",
          params: {
            force: {
              type: "boolean"
            },
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/git/refs/:ref"
        }
      },
      gitignore: {
        getTemplate: {
          method: "GET",
          params: {
            name: {
              required: true,
              type: "string"
            }
          },
          url: "/gitignore/templates/:name"
        },
        listTemplates: {
          method: "GET",
          params: {},
          url: "/gitignore/templates"
        }
      },
      interactions: {
        addOrUpdateRestrictionsForOrg: {
          headers: {
            accept: "application/vnd.github.sombra-preview+json"
          },
          method: "PUT",
          params: {
            limit: {
              enum: ["existing_users", "contributors_only", "collaborators_only"],
              required: true,
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/interaction-limits"
        },
        addOrUpdateRestrictionsForRepo: {
          headers: {
            accept: "application/vnd.github.sombra-preview+json"
          },
          method: "PUT",
          params: {
            limit: {
              enum: ["existing_users", "contributors_only", "collaborators_only"],
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/interaction-limits"
        },
        getRestrictionsForOrg: {
          headers: {
            accept: "application/vnd.github.sombra-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/interaction-limits"
        },
        getRestrictionsForRepo: {
          headers: {
            accept: "application/vnd.github.sombra-preview+json"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/interaction-limits"
        },
        removeRestrictionsForOrg: {
          headers: {
            accept: "application/vnd.github.sombra-preview+json"
          },
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/interaction-limits"
        },
        removeRestrictionsForRepo: {
          headers: {
            accept: "application/vnd.github.sombra-preview+json"
          },
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/interaction-limits"
        }
      },
      issues: {
        addAssignees: {
          method: "POST",
          params: {
            assignees: {
              type: "string[]"
            },
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/assignees"
        },
        addLabels: {
          method: "POST",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            labels: {
              required: true,
              type: "string[]"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/labels"
        },
        checkAssignee: {
          method: "GET",
          params: {
            assignee: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/assignees/:assignee"
        },
        create: {
          method: "POST",
          params: {
            assignee: {
              type: "string"
            },
            assignees: {
              type: "string[]"
            },
            body: {
              type: "string"
            },
            labels: {
              type: "string[]"
            },
            milestone: {
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            title: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues"
        },
        createComment: {
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/comments"
        },
        createLabel: {
          method: "POST",
          params: {
            color: {
              required: true,
              type: "string"
            },
            description: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/labels"
        },
        createMilestone: {
          method: "POST",
          params: {
            description: {
              type: "string"
            },
            due_on: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["open", "closed"],
              type: "string"
            },
            title: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/milestones"
        },
        deleteComment: {
          method: "DELETE",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/comments/:comment_id"
        },
        deleteLabel: {
          method: "DELETE",
          params: {
            name: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/labels/:name"
        },
        deleteMilestone: {
          method: "DELETE",
          params: {
            milestone_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "milestone_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/milestones/:milestone_number"
        },
        get: {
          method: "GET",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number"
        },
        getComment: {
          method: "GET",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/comments/:comment_id"
        },
        getEvent: {
          method: "GET",
          params: {
            event_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/events/:event_id"
        },
        getLabel: {
          method: "GET",
          params: {
            name: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/labels/:name"
        },
        getMilestone: {
          method: "GET",
          params: {
            milestone_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "milestone_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/milestones/:milestone_number"
        },
        list: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            filter: {
              enum: ["assigned", "created", "mentioned", "subscribed", "all"],
              type: "string"
            },
            labels: {
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            },
            sort: {
              enum: ["created", "updated", "comments"],
              type: "string"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/issues"
        },
        listAssignees: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/assignees"
        },
        listComments: {
          method: "GET",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            since: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/comments"
        },
        listCommentsForRepo: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            since: {
              type: "string"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/comments"
        },
        listEvents: {
          method: "GET",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/events"
        },
        listEventsForRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/events"
        },
        listEventsForTimeline: {
          headers: {
            accept: "application/vnd.github.mockingbird-preview+json"
          },
          method: "GET",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/timeline"
        },
        listForAuthenticatedUser: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            filter: {
              enum: ["assigned", "created", "mentioned", "subscribed", "all"],
              type: "string"
            },
            labels: {
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            },
            sort: {
              enum: ["created", "updated", "comments"],
              type: "string"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/user/issues"
        },
        listForOrg: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            filter: {
              enum: ["assigned", "created", "mentioned", "subscribed", "all"],
              type: "string"
            },
            labels: {
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            },
            sort: {
              enum: ["created", "updated", "comments"],
              type: "string"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/orgs/:org/issues"
        },
        listForRepo: {
          method: "GET",
          params: {
            assignee: {
              type: "string"
            },
            creator: {
              type: "string"
            },
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            labels: {
              type: "string"
            },
            mentioned: {
              type: "string"
            },
            milestone: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            since: {
              type: "string"
            },
            sort: {
              enum: ["created", "updated", "comments"],
              type: "string"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues"
        },
        listLabelsForMilestone: {
          method: "GET",
          params: {
            milestone_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "milestone_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/milestones/:milestone_number/labels"
        },
        listLabelsForRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/labels"
        },
        listLabelsOnIssue: {
          method: "GET",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/labels"
        },
        listMilestonesForRepo: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["due_on", "completeness"],
              type: "string"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/milestones"
        },
        lock: {
          method: "PUT",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            lock_reason: {
              enum: ["off-topic", "too heated", "resolved", "spam"],
              type: "string"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/lock"
        },
        removeAssignees: {
          method: "DELETE",
          params: {
            assignees: {
              type: "string[]"
            },
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/assignees"
        },
        removeLabel: {
          method: "DELETE",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            name: {
              required: true,
              type: "string"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/labels/:name"
        },
        removeLabels: {
          method: "DELETE",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/labels"
        },
        replaceLabels: {
          method: "PUT",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            labels: {
              type: "string[]"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/labels"
        },
        unlock: {
          method: "DELETE",
          params: {
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/lock"
        },
        update: {
          method: "PATCH",
          params: {
            assignee: {
              type: "string"
            },
            assignees: {
              type: "string[]"
            },
            body: {
              type: "string"
            },
            issue_number: {
              required: true,
              type: "integer"
            },
            labels: {
              type: "string[]"
            },
            milestone: {
              allowNull: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["open", "closed"],
              type: "string"
            },
            title: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number"
        },
        updateComment: {
          method: "PATCH",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/comments/:comment_id"
        },
        updateLabel: {
          method: "PATCH",
          params: {
            color: {
              type: "string"
            },
            current_name: {
              required: true,
              type: "string"
            },
            description: {
              type: "string"
            },
            name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/labels/:current_name"
        },
        updateMilestone: {
          method: "PATCH",
          params: {
            description: {
              type: "string"
            },
            due_on: {
              type: "string"
            },
            milestone_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "milestone_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["open", "closed"],
              type: "string"
            },
            title: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/milestones/:milestone_number"
        }
      },
      licenses: {
        get: {
          method: "GET",
          params: {
            license: {
              required: true,
              type: "string"
            }
          },
          url: "/licenses/:license"
        },
        getForRepo: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/license"
        },
        list: {
          deprecated: "octokit.licenses.list() has been renamed to octokit.licenses.listCommonlyUsed() (2019-03-05)",
          method: "GET",
          params: {},
          url: "/licenses"
        },
        listCommonlyUsed: {
          method: "GET",
          params: {},
          url: "/licenses"
        }
      },
      markdown: {
        render: {
          method: "POST",
          params: {
            context: {
              type: "string"
            },
            mode: {
              enum: ["markdown", "gfm"],
              type: "string"
            },
            text: {
              required: true,
              type: "string"
            }
          },
          url: "/markdown"
        },
        renderRaw: {
          headers: {
            "content-type": "text/plain; charset=utf-8"
          },
          method: "POST",
          params: {
            data: {
              mapTo: "data",
              required: true,
              type: "string"
            }
          },
          url: "/markdown/raw"
        }
      },
      meta: {
        get: {
          method: "GET",
          params: {},
          url: "/meta"
        }
      },
      migrations: {
        cancelImport: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import"
        },
        deleteArchiveForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "DELETE",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/migrations/:migration_id/archive"
        },
        deleteArchiveForOrg: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "DELETE",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/migrations/:migration_id/archive"
        },
        downloadArchiveForOrg: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/migrations/:migration_id/archive"
        },
        getArchiveForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/migrations/:migration_id/archive"
        },
        getArchiveForOrg: {
          deprecated: "octokit.migrations.getArchiveForOrg() has been renamed to octokit.migrations.downloadArchiveForOrg() (2020-01-27)",
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/migrations/:migration_id/archive"
        },
        getCommitAuthors: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            since: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import/authors"
        },
        getImportProgress: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import"
        },
        getLargeFiles: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import/large_files"
        },
        getStatusForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/migrations/:migration_id"
        },
        getStatusForOrg: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/migrations/:migration_id"
        },
        listForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/migrations"
        },
        listForOrg: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/migrations"
        },
        listReposForOrg: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/migrations/:migration_id/repositories"
        },
        listReposForUser: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "GET",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/:migration_id/repositories"
        },
        mapCommitAuthor: {
          method: "PATCH",
          params: {
            author_id: {
              required: true,
              type: "integer"
            },
            email: {
              type: "string"
            },
            name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import/authors/:author_id"
        },
        setLfsPreference: {
          method: "PATCH",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            use_lfs: {
              enum: ["opt_in", "opt_out"],
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import/lfs"
        },
        startForAuthenticatedUser: {
          method: "POST",
          params: {
            exclude_attachments: {
              type: "boolean"
            },
            lock_repositories: {
              type: "boolean"
            },
            repositories: {
              required: true,
              type: "string[]"
            }
          },
          url: "/user/migrations"
        },
        startForOrg: {
          method: "POST",
          params: {
            exclude_attachments: {
              type: "boolean"
            },
            lock_repositories: {
              type: "boolean"
            },
            org: {
              required: true,
              type: "string"
            },
            repositories: {
              required: true,
              type: "string[]"
            }
          },
          url: "/orgs/:org/migrations"
        },
        startImport: {
          method: "PUT",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            tfvc_project: {
              type: "string"
            },
            vcs: {
              enum: ["subversion", "git", "mercurial", "tfvc"],
              type: "string"
            },
            vcs_password: {
              type: "string"
            },
            vcs_url: {
              required: true,
              type: "string"
            },
            vcs_username: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import"
        },
        unlockRepoForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "DELETE",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            repo_name: {
              required: true,
              type: "string"
            }
          },
          url: "/user/migrations/:migration_id/repos/:repo_name/lock"
        },
        unlockRepoForOrg: {
          headers: {
            accept: "application/vnd.github.wyandotte-preview+json"
          },
          method: "DELETE",
          params: {
            migration_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            repo_name: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock"
        },
        updateImport: {
          method: "PATCH",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            vcs_password: {
              type: "string"
            },
            vcs_username: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/import"
        }
      },
      oauthAuthorizations: {
        checkAuthorization: {
          deprecated: "octokit.oauthAuthorizations.checkAuthorization() has been renamed to octokit.apps.checkAuthorization() (2019-11-05)",
          method: "GET",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/tokens/:access_token"
        },
        createAuthorization: {
          deprecated: "octokit.oauthAuthorizations.createAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization",
          method: "POST",
          params: {
            client_id: {
              type: "string"
            },
            client_secret: {
              type: "string"
            },
            fingerprint: {
              type: "string"
            },
            note: {
              required: true,
              type: "string"
            },
            note_url: {
              type: "string"
            },
            scopes: {
              type: "string[]"
            }
          },
          url: "/authorizations"
        },
        deleteAuthorization: {
          deprecated: "octokit.oauthAuthorizations.deleteAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization",
          method: "DELETE",
          params: {
            authorization_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/authorizations/:authorization_id"
        },
        deleteGrant: {
          deprecated: "octokit.oauthAuthorizations.deleteGrant() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#delete-a-grant",
          method: "DELETE",
          params: {
            grant_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/applications/grants/:grant_id"
        },
        getAuthorization: {
          deprecated: "octokit.oauthAuthorizations.getAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization",
          method: "GET",
          params: {
            authorization_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/authorizations/:authorization_id"
        },
        getGrant: {
          deprecated: "octokit.oauthAuthorizations.getGrant() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant",
          method: "GET",
          params: {
            grant_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/applications/grants/:grant_id"
        },
        getOrCreateAuthorizationForApp: {
          deprecated: "octokit.oauthAuthorizations.getOrCreateAuthorizationForApp() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app",
          method: "PUT",
          params: {
            client_id: {
              required: true,
              type: "string"
            },
            client_secret: {
              required: true,
              type: "string"
            },
            fingerprint: {
              type: "string"
            },
            note: {
              type: "string"
            },
            note_url: {
              type: "string"
            },
            scopes: {
              type: "string[]"
            }
          },
          url: "/authorizations/clients/:client_id"
        },
        getOrCreateAuthorizationForAppAndFingerprint: {
          deprecated: "octokit.oauthAuthorizations.getOrCreateAuthorizationForAppAndFingerprint() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint",
          method: "PUT",
          params: {
            client_id: {
              required: true,
              type: "string"
            },
            client_secret: {
              required: true,
              type: "string"
            },
            fingerprint: {
              required: true,
              type: "string"
            },
            note: {
              type: "string"
            },
            note_url: {
              type: "string"
            },
            scopes: {
              type: "string[]"
            }
          },
          url: "/authorizations/clients/:client_id/:fingerprint"
        },
        getOrCreateAuthorizationForAppFingerprint: {
          deprecated: "octokit.oauthAuthorizations.getOrCreateAuthorizationForAppFingerprint() has been renamed to octokit.oauthAuthorizations.getOrCreateAuthorizationForAppAndFingerprint() (2018-12-27)",
          method: "PUT",
          params: {
            client_id: {
              required: true,
              type: "string"
            },
            client_secret: {
              required: true,
              type: "string"
            },
            fingerprint: {
              required: true,
              type: "string"
            },
            note: {
              type: "string"
            },
            note_url: {
              type: "string"
            },
            scopes: {
              type: "string[]"
            }
          },
          url: "/authorizations/clients/:client_id/:fingerprint"
        },
        listAuthorizations: {
          deprecated: "octokit.oauthAuthorizations.listAuthorizations() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/authorizations"
        },
        listGrants: {
          deprecated: "octokit.oauthAuthorizations.listGrants() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#list-your-grants",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/applications/grants"
        },
        resetAuthorization: {
          deprecated: "octokit.oauthAuthorizations.resetAuthorization() has been renamed to octokit.apps.resetAuthorization() (2019-11-05)",
          method: "POST",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/tokens/:access_token"
        },
        revokeAuthorizationForApplication: {
          deprecated: "octokit.oauthAuthorizations.revokeAuthorizationForApplication() has been renamed to octokit.apps.revokeAuthorizationForApplication() (2019-11-05)",
          method: "DELETE",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/tokens/:access_token"
        },
        revokeGrantForApplication: {
          deprecated: "octokit.oauthAuthorizations.revokeGrantForApplication() has been renamed to octokit.apps.revokeGrantForApplication() (2019-11-05)",
          method: "DELETE",
          params: {
            access_token: {
              required: true,
              type: "string"
            },
            client_id: {
              required: true,
              type: "string"
            }
          },
          url: "/applications/:client_id/grants/:access_token"
        },
        updateAuthorization: {
          deprecated: "octokit.oauthAuthorizations.updateAuthorization() is deprecated, see https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization",
          method: "PATCH",
          params: {
            add_scopes: {
              type: "string[]"
            },
            authorization_id: {
              required: true,
              type: "integer"
            },
            fingerprint: {
              type: "string"
            },
            note: {
              type: "string"
            },
            note_url: {
              type: "string"
            },
            remove_scopes: {
              type: "string[]"
            },
            scopes: {
              type: "string[]"
            }
          },
          url: "/authorizations/:authorization_id"
        }
      },
      orgs: {
        addOrUpdateMembership: {
          method: "PUT",
          params: {
            org: {
              required: true,
              type: "string"
            },
            role: {
              enum: ["admin", "member"],
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/memberships/:username"
        },
        blockUser: {
          method: "PUT",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/blocks/:username"
        },
        checkBlockedUser: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/blocks/:username"
        },
        checkMembership: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/members/:username"
        },
        checkPublicMembership: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/public_members/:username"
        },
        concealMembership: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/public_members/:username"
        },
        convertMemberToOutsideCollaborator: {
          method: "PUT",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/outside_collaborators/:username"
        },
        createHook: {
          method: "POST",
          params: {
            active: {
              type: "boolean"
            },
            config: {
              required: true,
              type: "object"
            },
            "config.content_type": {
              type: "string"
            },
            "config.insecure_ssl": {
              type: "string"
            },
            "config.secret": {
              type: "string"
            },
            "config.url": {
              required: true,
              type: "string"
            },
            events: {
              type: "string[]"
            },
            name: {
              required: true,
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/hooks"
        },
        createInvitation: {
          method: "POST",
          params: {
            email: {
              type: "string"
            },
            invitee_id: {
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            role: {
              enum: ["admin", "direct_member", "billing_manager"],
              type: "string"
            },
            team_ids: {
              type: "integer[]"
            }
          },
          url: "/orgs/:org/invitations"
        },
        deleteHook: {
          method: "DELETE",
          params: {
            hook_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/hooks/:hook_id"
        },
        get: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org"
        },
        getHook: {
          method: "GET",
          params: {
            hook_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/hooks/:hook_id"
        },
        getMembership: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/memberships/:username"
        },
        getMembershipForAuthenticatedUser: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/user/memberships/orgs/:org"
        },
        list: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "integer"
            }
          },
          url: "/organizations"
        },
        listBlockedUsers: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/blocks"
        },
        listForAuthenticatedUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/orgs"
        },
        listForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/orgs"
        },
        listHooks: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/hooks"
        },
        listInstallations: {
          headers: {
            accept: "application/vnd.github.machine-man-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/installations"
        },
        listInvitationTeams: {
          method: "GET",
          params: {
            invitation_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/invitations/:invitation_id/teams"
        },
        listMembers: {
          method: "GET",
          params: {
            filter: {
              enum: ["2fa_disabled", "all"],
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            role: {
              enum: ["all", "admin", "member"],
              type: "string"
            }
          },
          url: "/orgs/:org/members"
        },
        listMemberships: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            state: {
              enum: ["active", "pending"],
              type: "string"
            }
          },
          url: "/user/memberships/orgs"
        },
        listOutsideCollaborators: {
          method: "GET",
          params: {
            filter: {
              enum: ["2fa_disabled", "all"],
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/outside_collaborators"
        },
        listPendingInvitations: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/invitations"
        },
        listPublicMembers: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/public_members"
        },
        pingHook: {
          method: "POST",
          params: {
            hook_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/hooks/:hook_id/pings"
        },
        publicizeMembership: {
          method: "PUT",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/public_members/:username"
        },
        removeMember: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/members/:username"
        },
        removeMembership: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/memberships/:username"
        },
        removeOutsideCollaborator: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/outside_collaborators/:username"
        },
        unblockUser: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/blocks/:username"
        },
        update: {
          method: "PATCH",
          params: {
            billing_email: {
              type: "string"
            },
            company: {
              type: "string"
            },
            default_repository_permission: {
              enum: ["read", "write", "admin", "none"],
              type: "string"
            },
            description: {
              type: "string"
            },
            email: {
              type: "string"
            },
            has_organization_projects: {
              type: "boolean"
            },
            has_repository_projects: {
              type: "boolean"
            },
            location: {
              type: "string"
            },
            members_allowed_repository_creation_type: {
              enum: ["all", "private", "none"],
              type: "string"
            },
            members_can_create_internal_repositories: {
              type: "boolean"
            },
            members_can_create_private_repositories: {
              type: "boolean"
            },
            members_can_create_public_repositories: {
              type: "boolean"
            },
            members_can_create_repositories: {
              type: "boolean"
            },
            name: {
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org"
        },
        updateHook: {
          method: "PATCH",
          params: {
            active: {
              type: "boolean"
            },
            config: {
              type: "object"
            },
            "config.content_type": {
              type: "string"
            },
            "config.insecure_ssl": {
              type: "string"
            },
            "config.secret": {
              type: "string"
            },
            "config.url": {
              required: true,
              type: "string"
            },
            events: {
              type: "string[]"
            },
            hook_id: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/hooks/:hook_id"
        },
        updateMembership: {
          method: "PATCH",
          params: {
            org: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["active"],
              required: true,
              type: "string"
            }
          },
          url: "/user/memberships/orgs/:org"
        }
      },
      projects: {
        addCollaborator: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "PUT",
          params: {
            permission: {
              enum: ["read", "write", "admin"],
              type: "string"
            },
            project_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/projects/:project_id/collaborators/:username"
        },
        createCard: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "POST",
          params: {
            column_id: {
              required: true,
              type: "integer"
            },
            content_id: {
              type: "integer"
            },
            content_type: {
              type: "string"
            },
            note: {
              type: "string"
            }
          },
          url: "/projects/columns/:column_id/cards"
        },
        createColumn: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "POST",
          params: {
            name: {
              required: true,
              type: "string"
            },
            project_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/:project_id/columns"
        },
        createForAuthenticatedUser: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "POST",
          params: {
            body: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            }
          },
          url: "/user/projects"
        },
        createForOrg: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "POST",
          params: {
            body: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/projects"
        },
        createForRepo: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "POST",
          params: {
            body: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/projects"
        },
        delete: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "DELETE",
          params: {
            project_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/:project_id"
        },
        deleteCard: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "DELETE",
          params: {
            card_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/columns/cards/:card_id"
        },
        deleteColumn: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "DELETE",
          params: {
            column_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/columns/:column_id"
        },
        get: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            project_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/:project_id"
        },
        getCard: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            card_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/columns/cards/:card_id"
        },
        getColumn: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            column_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/columns/:column_id"
        },
        listCards: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            archived_state: {
              enum: ["all", "archived", "not_archived"],
              type: "string"
            },
            column_id: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/projects/columns/:column_id/cards"
        },
        listCollaborators: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            affiliation: {
              enum: ["outside", "direct", "all"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            project_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/:project_id/collaborators"
        },
        listColumns: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            project_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/projects/:project_id/columns"
        },
        listForOrg: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/orgs/:org/projects"
        },
        listForRepo: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/projects"
        },
        listForUser: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/projects"
        },
        moveCard: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "POST",
          params: {
            card_id: {
              required: true,
              type: "integer"
            },
            column_id: {
              type: "integer"
            },
            position: {
              required: true,
              type: "string",
              validation: "^(top|bottom|after:\\d+)$"
            }
          },
          url: "/projects/columns/cards/:card_id/moves"
        },
        moveColumn: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "POST",
          params: {
            column_id: {
              required: true,
              type: "integer"
            },
            position: {
              required: true,
              type: "string",
              validation: "^(first|last|after:\\d+)$"
            }
          },
          url: "/projects/columns/:column_id/moves"
        },
        removeCollaborator: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "DELETE",
          params: {
            project_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/projects/:project_id/collaborators/:username"
        },
        reviewUserPermissionLevel: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            project_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/projects/:project_id/collaborators/:username/permission"
        },
        update: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "PATCH",
          params: {
            body: {
              type: "string"
            },
            name: {
              type: "string"
            },
            organization_permission: {
              type: "string"
            },
            private: {
              type: "boolean"
            },
            project_id: {
              required: true,
              type: "integer"
            },
            state: {
              enum: ["open", "closed"],
              type: "string"
            }
          },
          url: "/projects/:project_id"
        },
        updateCard: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "PATCH",
          params: {
            archived: {
              type: "boolean"
            },
            card_id: {
              required: true,
              type: "integer"
            },
            note: {
              type: "string"
            }
          },
          url: "/projects/columns/cards/:card_id"
        },
        updateColumn: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "PATCH",
          params: {
            column_id: {
              required: true,
              type: "integer"
            },
            name: {
              required: true,
              type: "string"
            }
          },
          url: "/projects/columns/:column_id"
        }
      },
      pulls: {
        checkIfMerged: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/merge"
        },
        create: {
          method: "POST",
          params: {
            base: {
              required: true,
              type: "string"
            },
            body: {
              type: "string"
            },
            draft: {
              type: "boolean"
            },
            head: {
              required: true,
              type: "string"
            },
            maintainer_can_modify: {
              type: "boolean"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            title: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls"
        },
        createComment: {
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            commit_id: {
              required: true,
              type: "string"
            },
            in_reply_to: {
              deprecated: true,
              description: "The comment ID to reply to. **Note**: This must be the ID of a top-level comment, not a reply to that comment. Replies to replies are not supported.",
              type: "integer"
            },
            line: {
              type: "integer"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            path: {
              required: true,
              type: "string"
            },
            position: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            side: {
              enum: ["LEFT", "RIGHT"],
              type: "string"
            },
            start_line: {
              type: "integer"
            },
            start_side: {
              enum: ["LEFT", "RIGHT", "side"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/comments"
        },
        createCommentReply: {
          deprecated: "octokit.pulls.createCommentReply() has been renamed to octokit.pulls.createComment() (2019-09-09)",
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            commit_id: {
              required: true,
              type: "string"
            },
            in_reply_to: {
              deprecated: true,
              description: "The comment ID to reply to. **Note**: This must be the ID of a top-level comment, not a reply to that comment. Replies to replies are not supported.",
              type: "integer"
            },
            line: {
              type: "integer"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            path: {
              required: true,
              type: "string"
            },
            position: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            side: {
              enum: ["LEFT", "RIGHT"],
              type: "string"
            },
            start_line: {
              type: "integer"
            },
            start_side: {
              enum: ["LEFT", "RIGHT", "side"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/comments"
        },
        createFromIssue: {
          deprecated: "octokit.pulls.createFromIssue() is deprecated, see https://developer.github.com/v3/pulls/#create-a-pull-request",
          method: "POST",
          params: {
            base: {
              required: true,
              type: "string"
            },
            draft: {
              type: "boolean"
            },
            head: {
              required: true,
              type: "string"
            },
            issue: {
              required: true,
              type: "integer"
            },
            maintainer_can_modify: {
              type: "boolean"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls"
        },
        createReview: {
          method: "POST",
          params: {
            body: {
              type: "string"
            },
            comments: {
              type: "object[]"
            },
            "comments[].body": {
              required: true,
              type: "string"
            },
            "comments[].path": {
              required: true,
              type: "string"
            },
            "comments[].position": {
              required: true,
              type: "integer"
            },
            commit_id: {
              type: "string"
            },
            event: {
              enum: ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
              type: "string"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews"
        },
        createReviewCommentReply: {
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies"
        },
        createReviewRequest: {
          method: "POST",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            reviewers: {
              type: "string[]"
            },
            team_reviewers: {
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers"
        },
        deleteComment: {
          method: "DELETE",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/comments/:comment_id"
        },
        deletePendingReview: {
          method: "DELETE",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            review_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id"
        },
        deleteReviewRequest: {
          method: "DELETE",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            reviewers: {
              type: "string[]"
            },
            team_reviewers: {
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers"
        },
        dismissReview: {
          method: "PUT",
          params: {
            message: {
              required: true,
              type: "string"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            review_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals"
        },
        get: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number"
        },
        getComment: {
          method: "GET",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/comments/:comment_id"
        },
        getCommentsForReview: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            review_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments"
        },
        getReview: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            review_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id"
        },
        list: {
          method: "GET",
          params: {
            base: {
              type: "string"
            },
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            head: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["created", "updated", "popularity", "long-running"],
              type: "string"
            },
            state: {
              enum: ["open", "closed", "all"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls"
        },
        listComments: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            since: {
              type: "string"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/comments"
        },
        listCommentsForRepo: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            since: {
              type: "string"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/comments"
        },
        listCommits: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/commits"
        },
        listFiles: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/files"
        },
        listReviewRequests: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers"
        },
        listReviews: {
          method: "GET",
          params: {
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews"
        },
        merge: {
          method: "PUT",
          params: {
            commit_message: {
              type: "string"
            },
            commit_title: {
              type: "string"
            },
            merge_method: {
              enum: ["merge", "squash", "rebase"],
              type: "string"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/merge"
        },
        submitReview: {
          method: "POST",
          params: {
            body: {
              type: "string"
            },
            event: {
              enum: ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
              required: true,
              type: "string"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            review_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events"
        },
        update: {
          method: "PATCH",
          params: {
            base: {
              type: "string"
            },
            body: {
              type: "string"
            },
            maintainer_can_modify: {
              type: "boolean"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["open", "closed"],
              type: "string"
            },
            title: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number"
        },
        updateBranch: {
          headers: {
            accept: "application/vnd.github.lydian-preview+json"
          },
          method: "PUT",
          params: {
            expected_head_sha: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/update-branch"
        },
        updateComment: {
          method: "PATCH",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/comments/:comment_id"
        },
        updateReview: {
          method: "PUT",
          params: {
            body: {
              required: true,
              type: "string"
            },
            number: {
              alias: "pull_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            pull_number: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            review_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id"
        }
      },
      rateLimit: {
        get: {
          method: "GET",
          params: {},
          url: "/rate_limit"
        }
      },
      reactions: {
        createForCommitComment: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/comments/:comment_id/reactions"
        },
        createForIssue: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/reactions"
        },
        createForIssueComment: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/comments/:comment_id/reactions"
        },
        createForPullRequestReviewComment: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions"
        },
        createForTeamDiscussion: {
          deprecated: "octokit.reactions.createForTeamDiscussion() has been renamed to octokit.reactions.createForTeamDiscussionLegacy() (2020-01-16)",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/reactions"
        },
        createForTeamDiscussionComment: {
          deprecated: "octokit.reactions.createForTeamDiscussionComment() has been renamed to octokit.reactions.createForTeamDiscussionCommentLegacy() (2020-01-16)",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions"
        },
        createForTeamDiscussionCommentInOrg: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions"
        },
        createForTeamDiscussionCommentLegacy: {
          deprecated: "octokit.reactions.createForTeamDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions"
        },
        createForTeamDiscussionInOrg: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions"
        },
        createForTeamDiscussionLegacy: {
          deprecated: "octokit.reactions.createForTeamDiscussionLegacy() is deprecated, see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "POST",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/reactions"
        },
        delete: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "DELETE",
          params: {
            reaction_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/reactions/:reaction_id"
        },
        listForCommitComment: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/comments/:comment_id/reactions"
        },
        listForIssue: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            issue_number: {
              required: true,
              type: "integer"
            },
            number: {
              alias: "issue_number",
              deprecated: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/:issue_number/reactions"
        },
        listForIssueComment: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/issues/comments/:comment_id/reactions"
        },
        listForPullRequestReviewComment: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions"
        },
        listForTeamDiscussion: {
          deprecated: "octokit.reactions.listForTeamDiscussion() has been renamed to octokit.reactions.listForTeamDiscussionLegacy() (2020-01-16)",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/reactions"
        },
        listForTeamDiscussionComment: {
          deprecated: "octokit.reactions.listForTeamDiscussionComment() has been renamed to octokit.reactions.listForTeamDiscussionCommentLegacy() (2020-01-16)",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions"
        },
        listForTeamDiscussionCommentInOrg: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions"
        },
        listForTeamDiscussionCommentLegacy: {
          deprecated: "octokit.reactions.listForTeamDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions"
        },
        listForTeamDiscussionInOrg: {
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions"
        },
        listForTeamDiscussionLegacy: {
          deprecated: "octokit.reactions.listForTeamDiscussionLegacy() is deprecated, see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy",
          headers: {
            accept: "application/vnd.github.squirrel-girl-preview+json"
          },
          method: "GET",
          params: {
            content: {
              enum: ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/reactions"
        }
      },
      repos: {
        acceptInvitation: {
          method: "PATCH",
          params: {
            invitation_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/repository_invitations/:invitation_id"
        },
        addCollaborator: {
          method: "PUT",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/collaborators/:username"
        },
        addDeployKey: {
          method: "POST",
          params: {
            key: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            read_only: {
              type: "boolean"
            },
            repo: {
              required: true,
              type: "string"
            },
            title: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/keys"
        },
        addProtectedBranchAdminEnforcement: {
          method: "POST",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins"
        },
        addProtectedBranchAppRestrictions: {
          method: "POST",
          params: {
            apps: {
              mapTo: "data",
              required: true,
              type: "string[]"
            },
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps"
        },
        addProtectedBranchRequiredSignatures: {
          headers: {
            accept: "application/vnd.github.zzzax-preview+json"
          },
          method: "POST",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures"
        },
        addProtectedBranchRequiredStatusChecksContexts: {
          method: "POST",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            contexts: {
              mapTo: "data",
              required: true,
              type: "string[]"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
        },
        addProtectedBranchTeamRestrictions: {
          method: "POST",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            teams: {
              mapTo: "data",
              required: true,
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
        },
        addProtectedBranchUserRestrictions: {
          method: "POST",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            users: {
              mapTo: "data",
              required: true,
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
        },
        checkCollaborator: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/collaborators/:username"
        },
        checkVulnerabilityAlerts: {
          headers: {
            accept: "application/vnd.github.dorian-preview+json"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/vulnerability-alerts"
        },
        compareCommits: {
          method: "GET",
          params: {
            base: {
              required: true,
              type: "string"
            },
            head: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/compare/:base...:head"
        },
        createCommitComment: {
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            commit_sha: {
              required: true,
              type: "string"
            },
            line: {
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            path: {
              type: "string"
            },
            position: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              alias: "commit_sha",
              deprecated: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:commit_sha/comments"
        },
        createDeployment: {
          method: "POST",
          params: {
            auto_merge: {
              type: "boolean"
            },
            description: {
              type: "string"
            },
            environment: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            payload: {
              type: "string"
            },
            production_environment: {
              type: "boolean"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            required_contexts: {
              type: "string[]"
            },
            task: {
              type: "string"
            },
            transient_environment: {
              type: "boolean"
            }
          },
          url: "/repos/:owner/:repo/deployments"
        },
        createDeploymentStatus: {
          method: "POST",
          params: {
            auto_inactive: {
              type: "boolean"
            },
            deployment_id: {
              required: true,
              type: "integer"
            },
            description: {
              type: "string"
            },
            environment: {
              enum: ["production", "staging", "qa"],
              type: "string"
            },
            environment_url: {
              type: "string"
            },
            log_url: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["error", "failure", "inactive", "in_progress", "queued", "pending", "success"],
              required: true,
              type: "string"
            },
            target_url: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/deployments/:deployment_id/statuses"
        },
        createDispatchEvent: {
          method: "POST",
          params: {
            client_payload: {
              type: "object"
            },
            event_type: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/dispatches"
        },
        createFile: {
          deprecated: "octokit.repos.createFile() has been renamed to octokit.repos.createOrUpdateFile() (2019-06-07)",
          method: "PUT",
          params: {
            author: {
              type: "object"
            },
            "author.email": {
              required: true,
              type: "string"
            },
            "author.name": {
              required: true,
              type: "string"
            },
            branch: {
              type: "string"
            },
            committer: {
              type: "object"
            },
            "committer.email": {
              required: true,
              type: "string"
            },
            "committer.name": {
              required: true,
              type: "string"
            },
            content: {
              required: true,
              type: "string"
            },
            message: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            path: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/contents/:path"
        },
        createForAuthenticatedUser: {
          method: "POST",
          params: {
            allow_merge_commit: {
              type: "boolean"
            },
            allow_rebase_merge: {
              type: "boolean"
            },
            allow_squash_merge: {
              type: "boolean"
            },
            auto_init: {
              type: "boolean"
            },
            delete_branch_on_merge: {
              type: "boolean"
            },
            description: {
              type: "string"
            },
            gitignore_template: {
              type: "string"
            },
            has_issues: {
              type: "boolean"
            },
            has_projects: {
              type: "boolean"
            },
            has_wiki: {
              type: "boolean"
            },
            homepage: {
              type: "string"
            },
            is_template: {
              type: "boolean"
            },
            license_template: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            private: {
              type: "boolean"
            },
            team_id: {
              type: "integer"
            },
            visibility: {
              enum: ["public", "private", "visibility", "internal"],
              type: "string"
            }
          },
          url: "/user/repos"
        },
        createFork: {
          method: "POST",
          params: {
            organization: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/forks"
        },
        createHook: {
          method: "POST",
          params: {
            active: {
              type: "boolean"
            },
            config: {
              required: true,
              type: "object"
            },
            "config.content_type": {
              type: "string"
            },
            "config.insecure_ssl": {
              type: "string"
            },
            "config.secret": {
              type: "string"
            },
            "config.url": {
              required: true,
              type: "string"
            },
            events: {
              type: "string[]"
            },
            name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/hooks"
        },
        createInOrg: {
          method: "POST",
          params: {
            allow_merge_commit: {
              type: "boolean"
            },
            allow_rebase_merge: {
              type: "boolean"
            },
            allow_squash_merge: {
              type: "boolean"
            },
            auto_init: {
              type: "boolean"
            },
            delete_branch_on_merge: {
              type: "boolean"
            },
            description: {
              type: "string"
            },
            gitignore_template: {
              type: "string"
            },
            has_issues: {
              type: "boolean"
            },
            has_projects: {
              type: "boolean"
            },
            has_wiki: {
              type: "boolean"
            },
            homepage: {
              type: "string"
            },
            is_template: {
              type: "boolean"
            },
            license_template: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            private: {
              type: "boolean"
            },
            team_id: {
              type: "integer"
            },
            visibility: {
              enum: ["public", "private", "visibility", "internal"],
              type: "string"
            }
          },
          url: "/orgs/:org/repos"
        },
        createOrUpdateFile: {
          method: "PUT",
          params: {
            author: {
              type: "object"
            },
            "author.email": {
              required: true,
              type: "string"
            },
            "author.name": {
              required: true,
              type: "string"
            },
            branch: {
              type: "string"
            },
            committer: {
              type: "object"
            },
            "committer.email": {
              required: true,
              type: "string"
            },
            "committer.name": {
              required: true,
              type: "string"
            },
            content: {
              required: true,
              type: "string"
            },
            message: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            path: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/contents/:path"
        },
        createRelease: {
          method: "POST",
          params: {
            body: {
              type: "string"
            },
            draft: {
              type: "boolean"
            },
            name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            prerelease: {
              type: "boolean"
            },
            repo: {
              required: true,
              type: "string"
            },
            tag_name: {
              required: true,
              type: "string"
            },
            target_commitish: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases"
        },
        createStatus: {
          method: "POST",
          params: {
            context: {
              type: "string"
            },
            description: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              required: true,
              type: "string"
            },
            state: {
              enum: ["error", "failure", "pending", "success"],
              required: true,
              type: "string"
            },
            target_url: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/statuses/:sha"
        },
        createUsingTemplate: {
          headers: {
            accept: "application/vnd.github.baptiste-preview+json"
          },
          method: "POST",
          params: {
            description: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            owner: {
              type: "string"
            },
            private: {
              type: "boolean"
            },
            template_owner: {
              required: true,
              type: "string"
            },
            template_repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:template_owner/:template_repo/generate"
        },
        declineInvitation: {
          method: "DELETE",
          params: {
            invitation_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/repository_invitations/:invitation_id"
        },
        delete: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo"
        },
        deleteCommitComment: {
          method: "DELETE",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/comments/:comment_id"
        },
        deleteDownload: {
          method: "DELETE",
          params: {
            download_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/downloads/:download_id"
        },
        deleteFile: {
          method: "DELETE",
          params: {
            author: {
              type: "object"
            },
            "author.email": {
              type: "string"
            },
            "author.name": {
              type: "string"
            },
            branch: {
              type: "string"
            },
            committer: {
              type: "object"
            },
            "committer.email": {
              type: "string"
            },
            "committer.name": {
              type: "string"
            },
            message: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            path: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/contents/:path"
        },
        deleteHook: {
          method: "DELETE",
          params: {
            hook_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/hooks/:hook_id"
        },
        deleteInvitation: {
          method: "DELETE",
          params: {
            invitation_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/invitations/:invitation_id"
        },
        deleteRelease: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            release_id: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/:release_id"
        },
        deleteReleaseAsset: {
          method: "DELETE",
          params: {
            asset_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/assets/:asset_id"
        },
        disableAutomatedSecurityFixes: {
          headers: {
            accept: "application/vnd.github.london-preview+json"
          },
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/automated-security-fixes"
        },
        disablePagesSite: {
          headers: {
            accept: "application/vnd.github.switcheroo-preview+json"
          },
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages"
        },
        disableVulnerabilityAlerts: {
          headers: {
            accept: "application/vnd.github.dorian-preview+json"
          },
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/vulnerability-alerts"
        },
        enableAutomatedSecurityFixes: {
          headers: {
            accept: "application/vnd.github.london-preview+json"
          },
          method: "PUT",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/automated-security-fixes"
        },
        enablePagesSite: {
          headers: {
            accept: "application/vnd.github.switcheroo-preview+json"
          },
          method: "POST",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            source: {
              type: "object"
            },
            "source.branch": {
              enum: ["master", "gh-pages"],
              type: "string"
            },
            "source.path": {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages"
        },
        enableVulnerabilityAlerts: {
          headers: {
            accept: "application/vnd.github.dorian-preview+json"
          },
          method: "PUT",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/vulnerability-alerts"
        },
        get: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo"
        },
        getAppsWithAccessToProtectedBranch: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps"
        },
        getArchiveLink: {
          method: "GET",
          params: {
            archive_format: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/:archive_format/:ref"
        },
        getBranch: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch"
        },
        getBranchProtection: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection"
        },
        getClones: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            per: {
              enum: ["day", "week"],
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/traffic/clones"
        },
        getCodeFrequencyStats: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/stats/code_frequency"
        },
        getCollaboratorPermissionLevel: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/collaborators/:username/permission"
        },
        getCombinedStatusForRef: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:ref/status"
        },
        getCommit: {
          method: "GET",
          params: {
            commit_sha: {
              alias: "ref",
              deprecated: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              alias: "ref",
              deprecated: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:ref"
        },
        getCommitActivityStats: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/stats/commit_activity"
        },
        getCommitComment: {
          method: "GET",
          params: {
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/comments/:comment_id"
        },
        getCommitRefSha: {
          deprecated: "octokit.repos.getCommitRefSha() is deprecated, see https://developer.github.com/v3/repos/commits/#get-a-single-commit",
          headers: {
            accept: "application/vnd.github.v3.sha"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:ref"
        },
        getContents: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            path: {
              required: true,
              type: "string"
            },
            ref: {
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/contents/:path"
        },
        getContributorsStats: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/stats/contributors"
        },
        getDeployKey: {
          method: "GET",
          params: {
            key_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/keys/:key_id"
        },
        getDeployment: {
          method: "GET",
          params: {
            deployment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/deployments/:deployment_id"
        },
        getDeploymentStatus: {
          method: "GET",
          params: {
            deployment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            status_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id"
        },
        getDownload: {
          method: "GET",
          params: {
            download_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/downloads/:download_id"
        },
        getHook: {
          method: "GET",
          params: {
            hook_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/hooks/:hook_id"
        },
        getLatestPagesBuild: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages/builds/latest"
        },
        getLatestRelease: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/latest"
        },
        getPages: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages"
        },
        getPagesBuild: {
          method: "GET",
          params: {
            build_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages/builds/:build_id"
        },
        getParticipationStats: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/stats/participation"
        },
        getProtectedBranchAdminEnforcement: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins"
        },
        getProtectedBranchPullRequestReviewEnforcement: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews"
        },
        getProtectedBranchRequiredSignatures: {
          headers: {
            accept: "application/vnd.github.zzzax-preview+json"
          },
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures"
        },
        getProtectedBranchRequiredStatusChecks: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks"
        },
        getProtectedBranchRestrictions: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions"
        },
        getPunchCardStats: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/stats/punch_card"
        },
        getReadme: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            ref: {
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/readme"
        },
        getRelease: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            release_id: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/:release_id"
        },
        getReleaseAsset: {
          method: "GET",
          params: {
            asset_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/assets/:asset_id"
        },
        getReleaseByTag: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            tag: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/tags/:tag"
        },
        getTeamsWithAccessToProtectedBranch: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
        },
        getTopPaths: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/traffic/popular/paths"
        },
        getTopReferrers: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/traffic/popular/referrers"
        },
        getUsersWithAccessToProtectedBranch: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
        },
        getViews: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            per: {
              enum: ["day", "week"],
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/traffic/views"
        },
        list: {
          method: "GET",
          params: {
            affiliation: {
              type: "string"
            },
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            sort: {
              enum: ["created", "updated", "pushed", "full_name"],
              type: "string"
            },
            type: {
              enum: ["all", "owner", "public", "private", "member"],
              type: "string"
            },
            visibility: {
              enum: ["all", "public", "private"],
              type: "string"
            }
          },
          url: "/user/repos"
        },
        listAppsWithAccessToProtectedBranch: {
          deprecated: "octokit.repos.listAppsWithAccessToProtectedBranch() has been renamed to octokit.repos.getAppsWithAccessToProtectedBranch() (2019-09-13)",
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps"
        },
        listAssetsForRelease: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            release_id: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/:release_id/assets"
        },
        listBranches: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            protected: {
              type: "boolean"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches"
        },
        listBranchesForHeadCommit: {
          headers: {
            accept: "application/vnd.github.groot-preview+json"
          },
          method: "GET",
          params: {
            commit_sha: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:commit_sha/branches-where-head"
        },
        listCollaborators: {
          method: "GET",
          params: {
            affiliation: {
              enum: ["outside", "direct", "all"],
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/collaborators"
        },
        listCommentsForCommit: {
          method: "GET",
          params: {
            commit_sha: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            ref: {
              alias: "commit_sha",
              deprecated: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:commit_sha/comments"
        },
        listCommitComments: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/comments"
        },
        listCommits: {
          method: "GET",
          params: {
            author: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            path: {
              type: "string"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              type: "string"
            },
            since: {
              type: "string"
            },
            until: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits"
        },
        listContributors: {
          method: "GET",
          params: {
            anon: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/contributors"
        },
        listDeployKeys: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/keys"
        },
        listDeploymentStatuses: {
          method: "GET",
          params: {
            deployment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/deployments/:deployment_id/statuses"
        },
        listDeployments: {
          method: "GET",
          params: {
            environment: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            ref: {
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              type: "string"
            },
            task: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/deployments"
        },
        listDownloads: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/downloads"
        },
        listForOrg: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            sort: {
              enum: ["created", "updated", "pushed", "full_name"],
              type: "string"
            },
            type: {
              enum: ["all", "public", "private", "forks", "sources", "member", "internal"],
              type: "string"
            }
          },
          url: "/orgs/:org/repos"
        },
        listForUser: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            sort: {
              enum: ["created", "updated", "pushed", "full_name"],
              type: "string"
            },
            type: {
              enum: ["all", "owner", "member"],
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/repos"
        },
        listForks: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["newest", "oldest", "stargazers"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/forks"
        },
        listHooks: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/hooks"
        },
        listInvitations: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/invitations"
        },
        listInvitationsForAuthenticatedUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/repository_invitations"
        },
        listLanguages: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/languages"
        },
        listPagesBuilds: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages/builds"
        },
        listProtectedBranchRequiredStatusChecksContexts: {
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
        },
        listProtectedBranchTeamRestrictions: {
          deprecated: "octokit.repos.listProtectedBranchTeamRestrictions() has been renamed to octokit.repos.getTeamsWithAccessToProtectedBranch() (2019-09-09)",
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
        },
        listProtectedBranchUserRestrictions: {
          deprecated: "octokit.repos.listProtectedBranchUserRestrictions() has been renamed to octokit.repos.getUsersWithAccessToProtectedBranch() (2019-09-09)",
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
        },
        listPublic: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "integer"
            }
          },
          url: "/repositories"
        },
        listPullRequestsAssociatedWithCommit: {
          headers: {
            accept: "application/vnd.github.groot-preview+json"
          },
          method: "GET",
          params: {
            commit_sha: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:commit_sha/pulls"
        },
        listReleases: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases"
        },
        listStatusesForRef: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            ref: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/commits/:ref/statuses"
        },
        listTags: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/tags"
        },
        listTeams: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/teams"
        },
        listTeamsWithAccessToProtectedBranch: {
          deprecated: "octokit.repos.listTeamsWithAccessToProtectedBranch() has been renamed to octokit.repos.getTeamsWithAccessToProtectedBranch() (2019-09-13)",
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
        },
        listTopics: {
          headers: {
            accept: "application/vnd.github.mercy-preview+json"
          },
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/topics"
        },
        listUsersWithAccessToProtectedBranch: {
          deprecated: "octokit.repos.listUsersWithAccessToProtectedBranch() has been renamed to octokit.repos.getUsersWithAccessToProtectedBranch() (2019-09-13)",
          method: "GET",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
        },
        merge: {
          method: "POST",
          params: {
            base: {
              required: true,
              type: "string"
            },
            commit_message: {
              type: "string"
            },
            head: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/merges"
        },
        pingHook: {
          method: "POST",
          params: {
            hook_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/hooks/:hook_id/pings"
        },
        removeBranchProtection: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection"
        },
        removeCollaborator: {
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/collaborators/:username"
        },
        removeDeployKey: {
          method: "DELETE",
          params: {
            key_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/keys/:key_id"
        },
        removeProtectedBranchAdminEnforcement: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins"
        },
        removeProtectedBranchAppRestrictions: {
          method: "DELETE",
          params: {
            apps: {
              mapTo: "data",
              required: true,
              type: "string[]"
            },
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps"
        },
        removeProtectedBranchPullRequestReviewEnforcement: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews"
        },
        removeProtectedBranchRequiredSignatures: {
          headers: {
            accept: "application/vnd.github.zzzax-preview+json"
          },
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures"
        },
        removeProtectedBranchRequiredStatusChecks: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks"
        },
        removeProtectedBranchRequiredStatusChecksContexts: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            contexts: {
              mapTo: "data",
              required: true,
              type: "string[]"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
        },
        removeProtectedBranchRestrictions: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions"
        },
        removeProtectedBranchTeamRestrictions: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            teams: {
              mapTo: "data",
              required: true,
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
        },
        removeProtectedBranchUserRestrictions: {
          method: "DELETE",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            users: {
              mapTo: "data",
              required: true,
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
        },
        replaceProtectedBranchAppRestrictions: {
          method: "PUT",
          params: {
            apps: {
              mapTo: "data",
              required: true,
              type: "string[]"
            },
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps"
        },
        replaceProtectedBranchRequiredStatusChecksContexts: {
          method: "PUT",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            contexts: {
              mapTo: "data",
              required: true,
              type: "string[]"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts"
        },
        replaceProtectedBranchTeamRestrictions: {
          method: "PUT",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            teams: {
              mapTo: "data",
              required: true,
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams"
        },
        replaceProtectedBranchUserRestrictions: {
          method: "PUT",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            users: {
              mapTo: "data",
              required: true,
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users"
        },
        replaceTopics: {
          headers: {
            accept: "application/vnd.github.mercy-preview+json"
          },
          method: "PUT",
          params: {
            names: {
              required: true,
              type: "string[]"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/topics"
        },
        requestPageBuild: {
          method: "POST",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages/builds"
        },
        retrieveCommunityProfileMetrics: {
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/community/profile"
        },
        testPushHook: {
          method: "POST",
          params: {
            hook_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/hooks/:hook_id/tests"
        },
        transfer: {
          method: "POST",
          params: {
            new_owner: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_ids: {
              type: "integer[]"
            }
          },
          url: "/repos/:owner/:repo/transfer"
        },
        update: {
          method: "PATCH",
          params: {
            allow_merge_commit: {
              type: "boolean"
            },
            allow_rebase_merge: {
              type: "boolean"
            },
            allow_squash_merge: {
              type: "boolean"
            },
            archived: {
              type: "boolean"
            },
            default_branch: {
              type: "string"
            },
            delete_branch_on_merge: {
              type: "boolean"
            },
            description: {
              type: "string"
            },
            has_issues: {
              type: "boolean"
            },
            has_projects: {
              type: "boolean"
            },
            has_wiki: {
              type: "boolean"
            },
            homepage: {
              type: "string"
            },
            is_template: {
              type: "boolean"
            },
            name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            private: {
              type: "boolean"
            },
            repo: {
              required: true,
              type: "string"
            },
            visibility: {
              enum: ["public", "private", "visibility", "internal"],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo"
        },
        updateBranchProtection: {
          method: "PUT",
          params: {
            allow_deletions: {
              type: "boolean"
            },
            allow_force_pushes: {
              allowNull: true,
              type: "boolean"
            },
            branch: {
              required: true,
              type: "string"
            },
            enforce_admins: {
              allowNull: true,
              required: true,
              type: "boolean"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            required_linear_history: {
              type: "boolean"
            },
            required_pull_request_reviews: {
              allowNull: true,
              required: true,
              type: "object"
            },
            "required_pull_request_reviews.dismiss_stale_reviews": {
              type: "boolean"
            },
            "required_pull_request_reviews.dismissal_restrictions": {
              type: "object"
            },
            "required_pull_request_reviews.dismissal_restrictions.teams": {
              type: "string[]"
            },
            "required_pull_request_reviews.dismissal_restrictions.users": {
              type: "string[]"
            },
            "required_pull_request_reviews.require_code_owner_reviews": {
              type: "boolean"
            },
            "required_pull_request_reviews.required_approving_review_count": {
              type: "integer"
            },
            required_status_checks: {
              allowNull: true,
              required: true,
              type: "object"
            },
            "required_status_checks.contexts": {
              required: true,
              type: "string[]"
            },
            "required_status_checks.strict": {
              required: true,
              type: "boolean"
            },
            restrictions: {
              allowNull: true,
              required: true,
              type: "object"
            },
            "restrictions.apps": {
              type: "string[]"
            },
            "restrictions.teams": {
              required: true,
              type: "string[]"
            },
            "restrictions.users": {
              required: true,
              type: "string[]"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection"
        },
        updateCommitComment: {
          method: "PATCH",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/comments/:comment_id"
        },
        updateFile: {
          deprecated: "octokit.repos.updateFile() has been renamed to octokit.repos.createOrUpdateFile() (2019-06-07)",
          method: "PUT",
          params: {
            author: {
              type: "object"
            },
            "author.email": {
              required: true,
              type: "string"
            },
            "author.name": {
              required: true,
              type: "string"
            },
            branch: {
              type: "string"
            },
            committer: {
              type: "object"
            },
            "committer.email": {
              required: true,
              type: "string"
            },
            "committer.name": {
              required: true,
              type: "string"
            },
            content: {
              required: true,
              type: "string"
            },
            message: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            path: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            sha: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/contents/:path"
        },
        updateHook: {
          method: "PATCH",
          params: {
            active: {
              type: "boolean"
            },
            add_events: {
              type: "string[]"
            },
            config: {
              type: "object"
            },
            "config.content_type": {
              type: "string"
            },
            "config.insecure_ssl": {
              type: "string"
            },
            "config.secret": {
              type: "string"
            },
            "config.url": {
              required: true,
              type: "string"
            },
            events: {
              type: "string[]"
            },
            hook_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            remove_events: {
              type: "string[]"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/hooks/:hook_id"
        },
        updateInformationAboutPagesSite: {
          method: "PUT",
          params: {
            cname: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            source: {
              enum: ['"gh-pages"', '"master"', '"master /docs"'],
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/pages"
        },
        updateInvitation: {
          method: "PATCH",
          params: {
            invitation_id: {
              required: true,
              type: "integer"
            },
            owner: {
              required: true,
              type: "string"
            },
            permissions: {
              enum: ["read", "write", "admin"],
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/invitations/:invitation_id"
        },
        updateProtectedBranchPullRequestReviewEnforcement: {
          method: "PATCH",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            dismiss_stale_reviews: {
              type: "boolean"
            },
            dismissal_restrictions: {
              type: "object"
            },
            "dismissal_restrictions.teams": {
              type: "string[]"
            },
            "dismissal_restrictions.users": {
              type: "string[]"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            require_code_owner_reviews: {
              type: "boolean"
            },
            required_approving_review_count: {
              type: "integer"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews"
        },
        updateProtectedBranchRequiredStatusChecks: {
          method: "PATCH",
          params: {
            branch: {
              required: true,
              type: "string"
            },
            contexts: {
              type: "string[]"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            strict: {
              type: "boolean"
            }
          },
          url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks"
        },
        updateRelease: {
          method: "PATCH",
          params: {
            body: {
              type: "string"
            },
            draft: {
              type: "boolean"
            },
            name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            prerelease: {
              type: "boolean"
            },
            release_id: {
              required: true,
              type: "integer"
            },
            repo: {
              required: true,
              type: "string"
            },
            tag_name: {
              type: "string"
            },
            target_commitish: {
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/:release_id"
        },
        updateReleaseAsset: {
          method: "PATCH",
          params: {
            asset_id: {
              required: true,
              type: "integer"
            },
            label: {
              type: "string"
            },
            name: {
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            }
          },
          url: "/repos/:owner/:repo/releases/assets/:asset_id"
        },
        uploadReleaseAsset: {
          method: "POST",
          params: {
            data: {
              mapTo: "data",
              required: true,
              type: "string | object"
            },
            file: {
              alias: "data",
              deprecated: true,
              type: "string | object"
            },
            headers: {
              required: true,
              type: "object"
            },
            "headers.content-length": {
              required: true,
              type: "integer"
            },
            "headers.content-type": {
              required: true,
              type: "string"
            },
            label: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            url: {
              required: true,
              type: "string"
            }
          },
          url: ":url"
        }
      },
      search: {
        code: {
          method: "GET",
          params: {
            order: {
              enum: ["desc", "asc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            q: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["indexed"],
              type: "string"
            }
          },
          url: "/search/code"
        },
        commits: {
          headers: {
            accept: "application/vnd.github.cloak-preview+json"
          },
          method: "GET",
          params: {
            order: {
              enum: ["desc", "asc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            q: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["author-date", "committer-date"],
              type: "string"
            }
          },
          url: "/search/commits"
        },
        issues: {
          deprecated: "octokit.search.issues() has been renamed to octokit.search.issuesAndPullRequests() (2018-12-27)",
          method: "GET",
          params: {
            order: {
              enum: ["desc", "asc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            q: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["comments", "reactions", "reactions-+1", "reactions--1", "reactions-smile", "reactions-thinking_face", "reactions-heart", "reactions-tada", "interactions", "created", "updated"],
              type: "string"
            }
          },
          url: "/search/issues"
        },
        issuesAndPullRequests: {
          method: "GET",
          params: {
            order: {
              enum: ["desc", "asc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            q: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["comments", "reactions", "reactions-+1", "reactions--1", "reactions-smile", "reactions-thinking_face", "reactions-heart", "reactions-tada", "interactions", "created", "updated"],
              type: "string"
            }
          },
          url: "/search/issues"
        },
        labels: {
          method: "GET",
          params: {
            order: {
              enum: ["desc", "asc"],
              type: "string"
            },
            q: {
              required: true,
              type: "string"
            },
            repository_id: {
              required: true,
              type: "integer"
            },
            sort: {
              enum: ["created", "updated"],
              type: "string"
            }
          },
          url: "/search/labels"
        },
        repos: {
          method: "GET",
          params: {
            order: {
              enum: ["desc", "asc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            q: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["stars", "forks", "help-wanted-issues", "updated"],
              type: "string"
            }
          },
          url: "/search/repositories"
        },
        topics: {
          method: "GET",
          params: {
            q: {
              required: true,
              type: "string"
            }
          },
          url: "/search/topics"
        },
        users: {
          method: "GET",
          params: {
            order: {
              enum: ["desc", "asc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            q: {
              required: true,
              type: "string"
            },
            sort: {
              enum: ["followers", "repositories", "joined"],
              type: "string"
            }
          },
          url: "/search/users"
        }
      },
      teams: {
        addMember: {
          deprecated: "octokit.teams.addMember() has been renamed to octokit.teams.addMemberLegacy() (2020-01-16)",
          method: "PUT",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/members/:username"
        },
        addMemberLegacy: {
          deprecated: "octokit.teams.addMemberLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#add-team-member-legacy",
          method: "PUT",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/members/:username"
        },
        addOrUpdateMembership: {
          deprecated: "octokit.teams.addOrUpdateMembership() has been renamed to octokit.teams.addOrUpdateMembershipLegacy() (2020-01-16)",
          method: "PUT",
          params: {
            role: {
              enum: ["member", "maintainer"],
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/memberships/:username"
        },
        addOrUpdateMembershipInOrg: {
          method: "PUT",
          params: {
            org: {
              required: true,
              type: "string"
            },
            role: {
              enum: ["member", "maintainer"],
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/memberships/:username"
        },
        addOrUpdateMembershipLegacy: {
          deprecated: "octokit.teams.addOrUpdateMembershipLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#add-or-update-team-membership-legacy",
          method: "PUT",
          params: {
            role: {
              enum: ["member", "maintainer"],
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/memberships/:username"
        },
        addOrUpdateProject: {
          deprecated: "octokit.teams.addOrUpdateProject() has been renamed to octokit.teams.addOrUpdateProjectLegacy() (2020-01-16)",
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "PUT",
          params: {
            permission: {
              enum: ["read", "write", "admin"],
              type: "string"
            },
            project_id: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects/:project_id"
        },
        addOrUpdateProjectInOrg: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "PUT",
          params: {
            org: {
              required: true,
              type: "string"
            },
            permission: {
              enum: ["read", "write", "admin"],
              type: "string"
            },
            project_id: {
              required: true,
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/projects/:project_id"
        },
        addOrUpdateProjectLegacy: {
          deprecated: "octokit.teams.addOrUpdateProjectLegacy() is deprecated, see https://developer.github.com/v3/teams/#add-or-update-team-project-legacy",
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "PUT",
          params: {
            permission: {
              enum: ["read", "write", "admin"],
              type: "string"
            },
            project_id: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects/:project_id"
        },
        addOrUpdateRepo: {
          deprecated: "octokit.teams.addOrUpdateRepo() has been renamed to octokit.teams.addOrUpdateRepoLegacy() (2020-01-16)",
          method: "PUT",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos/:owner/:repo"
        },
        addOrUpdateRepoInOrg: {
          method: "PUT",
          params: {
            org: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/repos/:owner/:repo"
        },
        addOrUpdateRepoLegacy: {
          deprecated: "octokit.teams.addOrUpdateRepoLegacy() is deprecated, see https://developer.github.com/v3/teams/#add-or-update-team-repository-legacy",
          method: "PUT",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos/:owner/:repo"
        },
        checkManagesRepo: {
          deprecated: "octokit.teams.checkManagesRepo() has been renamed to octokit.teams.checkManagesRepoLegacy() (2020-01-16)",
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos/:owner/:repo"
        },
        checkManagesRepoInOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/repos/:owner/:repo"
        },
        checkManagesRepoLegacy: {
          deprecated: "octokit.teams.checkManagesRepoLegacy() is deprecated, see https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository-legacy",
          method: "GET",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos/:owner/:repo"
        },
        create: {
          method: "POST",
          params: {
            description: {
              type: "string"
            },
            maintainers: {
              type: "string[]"
            },
            name: {
              required: true,
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            parent_team_id: {
              type: "integer"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            privacy: {
              enum: ["secret", "closed"],
              type: "string"
            },
            repo_names: {
              type: "string[]"
            }
          },
          url: "/orgs/:org/teams"
        },
        createDiscussion: {
          deprecated: "octokit.teams.createDiscussion() has been renamed to octokit.teams.createDiscussionLegacy() (2020-01-16)",
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            private: {
              type: "boolean"
            },
            team_id: {
              required: true,
              type: "integer"
            },
            title: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/discussions"
        },
        createDiscussionComment: {
          deprecated: "octokit.teams.createDiscussionComment() has been renamed to octokit.teams.createDiscussionCommentLegacy() (2020-01-16)",
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments"
        },
        createDiscussionCommentInOrg: {
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments"
        },
        createDiscussionCommentLegacy: {
          deprecated: "octokit.teams.createDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#create-a-comment-legacy",
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments"
        },
        createDiscussionInOrg: {
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            private: {
              type: "boolean"
            },
            team_slug: {
              required: true,
              type: "string"
            },
            title: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions"
        },
        createDiscussionLegacy: {
          deprecated: "octokit.teams.createDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#create-a-discussion-legacy",
          method: "POST",
          params: {
            body: {
              required: true,
              type: "string"
            },
            private: {
              type: "boolean"
            },
            team_id: {
              required: true,
              type: "integer"
            },
            title: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/discussions"
        },
        delete: {
          deprecated: "octokit.teams.delete() has been renamed to octokit.teams.deleteLegacy() (2020-01-16)",
          method: "DELETE",
          params: {
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id"
        },
        deleteDiscussion: {
          deprecated: "octokit.teams.deleteDiscussion() has been renamed to octokit.teams.deleteDiscussionLegacy() (2020-01-16)",
          method: "DELETE",
          params: {
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number"
        },
        deleteDiscussionComment: {
          deprecated: "octokit.teams.deleteDiscussionComment() has been renamed to octokit.teams.deleteDiscussionCommentLegacy() (2020-01-16)",
          method: "DELETE",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
        },
        deleteDiscussionCommentInOrg: {
          method: "DELETE",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number"
        },
        deleteDiscussionCommentLegacy: {
          deprecated: "octokit.teams.deleteDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment-legacy",
          method: "DELETE",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
        },
        deleteDiscussionInOrg: {
          method: "DELETE",
          params: {
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number"
        },
        deleteDiscussionLegacy: {
          deprecated: "octokit.teams.deleteDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#delete-a-discussion-legacy",
          method: "DELETE",
          params: {
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number"
        },
        deleteInOrg: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug"
        },
        deleteLegacy: {
          deprecated: "octokit.teams.deleteLegacy() is deprecated, see https://developer.github.com/v3/teams/#delete-team-legacy",
          method: "DELETE",
          params: {
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id"
        },
        get: {
          deprecated: "octokit.teams.get() has been renamed to octokit.teams.getLegacy() (2020-01-16)",
          method: "GET",
          params: {
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id"
        },
        getByName: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug"
        },
        getDiscussion: {
          deprecated: "octokit.teams.getDiscussion() has been renamed to octokit.teams.getDiscussionLegacy() (2020-01-16)",
          method: "GET",
          params: {
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number"
        },
        getDiscussionComment: {
          deprecated: "octokit.teams.getDiscussionComment() has been renamed to octokit.teams.getDiscussionCommentLegacy() (2020-01-16)",
          method: "GET",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
        },
        getDiscussionCommentInOrg: {
          method: "GET",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number"
        },
        getDiscussionCommentLegacy: {
          deprecated: "octokit.teams.getDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment-legacy",
          method: "GET",
          params: {
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
        },
        getDiscussionInOrg: {
          method: "GET",
          params: {
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number"
        },
        getDiscussionLegacy: {
          deprecated: "octokit.teams.getDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#get-a-single-discussion-legacy",
          method: "GET",
          params: {
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number"
        },
        getLegacy: {
          deprecated: "octokit.teams.getLegacy() is deprecated, see https://developer.github.com/v3/teams/#get-team-legacy",
          method: "GET",
          params: {
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id"
        },
        getMember: {
          deprecated: "octokit.teams.getMember() has been renamed to octokit.teams.getMemberLegacy() (2020-01-16)",
          method: "GET",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/members/:username"
        },
        getMemberLegacy: {
          deprecated: "octokit.teams.getMemberLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#get-team-member-legacy",
          method: "GET",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/members/:username"
        },
        getMembership: {
          deprecated: "octokit.teams.getMembership() has been renamed to octokit.teams.getMembershipLegacy() (2020-01-16)",
          method: "GET",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/memberships/:username"
        },
        getMembershipInOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/memberships/:username"
        },
        getMembershipLegacy: {
          deprecated: "octokit.teams.getMembershipLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#get-team-membership-legacy",
          method: "GET",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/memberships/:username"
        },
        list: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/orgs/:org/teams"
        },
        listChild: {
          deprecated: "octokit.teams.listChild() has been renamed to octokit.teams.listChildLegacy() (2020-01-16)",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/teams"
        },
        listChildInOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/teams"
        },
        listChildLegacy: {
          deprecated: "octokit.teams.listChildLegacy() is deprecated, see https://developer.github.com/v3/teams/#list-child-teams-legacy",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/teams"
        },
        listDiscussionComments: {
          deprecated: "octokit.teams.listDiscussionComments() has been renamed to octokit.teams.listDiscussionCommentsLegacy() (2020-01-16)",
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments"
        },
        listDiscussionCommentsInOrg: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments"
        },
        listDiscussionCommentsLegacy: {
          deprecated: "octokit.teams.listDiscussionCommentsLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#list-comments-legacy",
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments"
        },
        listDiscussions: {
          deprecated: "octokit.teams.listDiscussions() has been renamed to octokit.teams.listDiscussionsLegacy() (2020-01-16)",
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions"
        },
        listDiscussionsInOrg: {
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions"
        },
        listDiscussionsLegacy: {
          deprecated: "octokit.teams.listDiscussionsLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#list-discussions-legacy",
          method: "GET",
          params: {
            direction: {
              enum: ["asc", "desc"],
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions"
        },
        listForAuthenticatedUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/teams"
        },
        listMembers: {
          deprecated: "octokit.teams.listMembers() has been renamed to octokit.teams.listMembersLegacy() (2020-01-16)",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            role: {
              enum: ["member", "maintainer", "all"],
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/members"
        },
        listMembersInOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            role: {
              enum: ["member", "maintainer", "all"],
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/members"
        },
        listMembersLegacy: {
          deprecated: "octokit.teams.listMembersLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#list-team-members-legacy",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            role: {
              enum: ["member", "maintainer", "all"],
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/members"
        },
        listPendingInvitations: {
          deprecated: "octokit.teams.listPendingInvitations() has been renamed to octokit.teams.listPendingInvitationsLegacy() (2020-01-16)",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/invitations"
        },
        listPendingInvitationsInOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/invitations"
        },
        listPendingInvitationsLegacy: {
          deprecated: "octokit.teams.listPendingInvitationsLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#list-pending-team-invitations-legacy",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/invitations"
        },
        listProjects: {
          deprecated: "octokit.teams.listProjects() has been renamed to octokit.teams.listProjectsLegacy() (2020-01-16)",
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects"
        },
        listProjectsInOrg: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/projects"
        },
        listProjectsLegacy: {
          deprecated: "octokit.teams.listProjectsLegacy() is deprecated, see https://developer.github.com/v3/teams/#list-team-projects-legacy",
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects"
        },
        listRepos: {
          deprecated: "octokit.teams.listRepos() has been renamed to octokit.teams.listReposLegacy() (2020-01-16)",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos"
        },
        listReposInOrg: {
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/repos"
        },
        listReposLegacy: {
          deprecated: "octokit.teams.listReposLegacy() is deprecated, see https://developer.github.com/v3/teams/#list-team-repos-legacy",
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos"
        },
        removeMember: {
          deprecated: "octokit.teams.removeMember() has been renamed to octokit.teams.removeMemberLegacy() (2020-01-16)",
          method: "DELETE",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/members/:username"
        },
        removeMemberLegacy: {
          deprecated: "octokit.teams.removeMemberLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#remove-team-member-legacy",
          method: "DELETE",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/members/:username"
        },
        removeMembership: {
          deprecated: "octokit.teams.removeMembership() has been renamed to octokit.teams.removeMembershipLegacy() (2020-01-16)",
          method: "DELETE",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/memberships/:username"
        },
        removeMembershipInOrg: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/memberships/:username"
        },
        removeMembershipLegacy: {
          deprecated: "octokit.teams.removeMembershipLegacy() is deprecated, see https://developer.github.com/v3/teams/members/#remove-team-membership-legacy",
          method: "DELETE",
          params: {
            team_id: {
              required: true,
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/teams/:team_id/memberships/:username"
        },
        removeProject: {
          deprecated: "octokit.teams.removeProject() has been renamed to octokit.teams.removeProjectLegacy() (2020-01-16)",
          method: "DELETE",
          params: {
            project_id: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects/:project_id"
        },
        removeProjectInOrg: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            project_id: {
              required: true,
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/projects/:project_id"
        },
        removeProjectLegacy: {
          deprecated: "octokit.teams.removeProjectLegacy() is deprecated, see https://developer.github.com/v3/teams/#remove-team-project-legacy",
          method: "DELETE",
          params: {
            project_id: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects/:project_id"
        },
        removeRepo: {
          deprecated: "octokit.teams.removeRepo() has been renamed to octokit.teams.removeRepoLegacy() (2020-01-16)",
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos/:owner/:repo"
        },
        removeRepoInOrg: {
          method: "DELETE",
          params: {
            org: {
              required: true,
              type: "string"
            },
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/repos/:owner/:repo"
        },
        removeRepoLegacy: {
          deprecated: "octokit.teams.removeRepoLegacy() is deprecated, see https://developer.github.com/v3/teams/#remove-team-repository-legacy",
          method: "DELETE",
          params: {
            owner: {
              required: true,
              type: "string"
            },
            repo: {
              required: true,
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/repos/:owner/:repo"
        },
        reviewProject: {
          deprecated: "octokit.teams.reviewProject() has been renamed to octokit.teams.reviewProjectLegacy() (2020-01-16)",
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            project_id: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects/:project_id"
        },
        reviewProjectInOrg: {
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            org: {
              required: true,
              type: "string"
            },
            project_id: {
              required: true,
              type: "integer"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/projects/:project_id"
        },
        reviewProjectLegacy: {
          deprecated: "octokit.teams.reviewProjectLegacy() is deprecated, see https://developer.github.com/v3/teams/#review-a-team-project-legacy",
          headers: {
            accept: "application/vnd.github.inertia-preview+json"
          },
          method: "GET",
          params: {
            project_id: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/projects/:project_id"
        },
        update: {
          deprecated: "octokit.teams.update() has been renamed to octokit.teams.updateLegacy() (2020-01-16)",
          method: "PATCH",
          params: {
            description: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            parent_team_id: {
              type: "integer"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            privacy: {
              enum: ["secret", "closed"],
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id"
        },
        updateDiscussion: {
          deprecated: "octokit.teams.updateDiscussion() has been renamed to octokit.teams.updateDiscussionLegacy() (2020-01-16)",
          method: "PATCH",
          params: {
            body: {
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            },
            title: {
              type: "string"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number"
        },
        updateDiscussionComment: {
          deprecated: "octokit.teams.updateDiscussionComment() has been renamed to octokit.teams.updateDiscussionCommentLegacy() (2020-01-16)",
          method: "PATCH",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
        },
        updateDiscussionCommentInOrg: {
          method: "PATCH",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number"
        },
        updateDiscussionCommentLegacy: {
          deprecated: "octokit.teams.updateDiscussionCommentLegacy() is deprecated, see https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment-legacy",
          method: "PATCH",
          params: {
            body: {
              required: true,
              type: "string"
            },
            comment_number: {
              required: true,
              type: "integer"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number"
        },
        updateDiscussionInOrg: {
          method: "PATCH",
          params: {
            body: {
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            org: {
              required: true,
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            },
            title: {
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number"
        },
        updateDiscussionLegacy: {
          deprecated: "octokit.teams.updateDiscussionLegacy() is deprecated, see https://developer.github.com/v3/teams/discussions/#edit-a-discussion-legacy",
          method: "PATCH",
          params: {
            body: {
              type: "string"
            },
            discussion_number: {
              required: true,
              type: "integer"
            },
            team_id: {
              required: true,
              type: "integer"
            },
            title: {
              type: "string"
            }
          },
          url: "/teams/:team_id/discussions/:discussion_number"
        },
        updateInOrg: {
          method: "PATCH",
          params: {
            description: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            org: {
              required: true,
              type: "string"
            },
            parent_team_id: {
              type: "integer"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            privacy: {
              enum: ["secret", "closed"],
              type: "string"
            },
            team_slug: {
              required: true,
              type: "string"
            }
          },
          url: "/orgs/:org/teams/:team_slug"
        },
        updateLegacy: {
          deprecated: "octokit.teams.updateLegacy() is deprecated, see https://developer.github.com/v3/teams/#edit-team-legacy",
          method: "PATCH",
          params: {
            description: {
              type: "string"
            },
            name: {
              required: true,
              type: "string"
            },
            parent_team_id: {
              type: "integer"
            },
            permission: {
              enum: ["pull", "push", "admin"],
              type: "string"
            },
            privacy: {
              enum: ["secret", "closed"],
              type: "string"
            },
            team_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/teams/:team_id"
        }
      },
      users: {
        addEmails: {
          method: "POST",
          params: {
            emails: {
              required: true,
              type: "string[]"
            }
          },
          url: "/user/emails"
        },
        block: {
          method: "PUT",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/user/blocks/:username"
        },
        checkBlocked: {
          method: "GET",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/user/blocks/:username"
        },
        checkFollowing: {
          method: "GET",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/user/following/:username"
        },
        checkFollowingForUser: {
          method: "GET",
          params: {
            target_user: {
              required: true,
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/following/:target_user"
        },
        createGpgKey: {
          method: "POST",
          params: {
            armored_public_key: {
              type: "string"
            }
          },
          url: "/user/gpg_keys"
        },
        createPublicKey: {
          method: "POST",
          params: {
            key: {
              type: "string"
            },
            title: {
              type: "string"
            }
          },
          url: "/user/keys"
        },
        deleteEmails: {
          method: "DELETE",
          params: {
            emails: {
              required: true,
              type: "string[]"
            }
          },
          url: "/user/emails"
        },
        deleteGpgKey: {
          method: "DELETE",
          params: {
            gpg_key_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/gpg_keys/:gpg_key_id"
        },
        deletePublicKey: {
          method: "DELETE",
          params: {
            key_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/keys/:key_id"
        },
        follow: {
          method: "PUT",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/user/following/:username"
        },
        getAuthenticated: {
          method: "GET",
          params: {},
          url: "/user"
        },
        getByUsername: {
          method: "GET",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username"
        },
        getContextForUser: {
          method: "GET",
          params: {
            subject_id: {
              type: "string"
            },
            subject_type: {
              enum: ["organization", "repository", "issue", "pull_request"],
              type: "string"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/hovercard"
        },
        getGpgKey: {
          method: "GET",
          params: {
            gpg_key_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/gpg_keys/:gpg_key_id"
        },
        getPublicKey: {
          method: "GET",
          params: {
            key_id: {
              required: true,
              type: "integer"
            }
          },
          url: "/user/keys/:key_id"
        },
        list: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            since: {
              type: "string"
            }
          },
          url: "/users"
        },
        listBlocked: {
          method: "GET",
          params: {},
          url: "/user/blocks"
        },
        listEmails: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/emails"
        },
        listFollowersForAuthenticatedUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/followers"
        },
        listFollowersForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/followers"
        },
        listFollowingForAuthenticatedUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/following"
        },
        listFollowingForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/following"
        },
        listGpgKeys: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/gpg_keys"
        },
        listGpgKeysForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/gpg_keys"
        },
        listPublicEmails: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/public_emails"
        },
        listPublicKeys: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            }
          },
          url: "/user/keys"
        },
        listPublicKeysForUser: {
          method: "GET",
          params: {
            page: {
              type: "integer"
            },
            per_page: {
              type: "integer"
            },
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/users/:username/keys"
        },
        togglePrimaryEmailVisibility: {
          method: "PATCH",
          params: {
            email: {
              required: true,
              type: "string"
            },
            visibility: {
              required: true,
              type: "string"
            }
          },
          url: "/user/email/visibility"
        },
        unblock: {
          method: "DELETE",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/user/blocks/:username"
        },
        unfollow: {
          method: "DELETE",
          params: {
            username: {
              required: true,
              type: "string"
            }
          },
          url: "/user/following/:username"
        },
        updateAuthenticated: {
          method: "PATCH",
          params: {
            bio: {
              type: "string"
            },
            blog: {
              type: "string"
            },
            company: {
              type: "string"
            },
            email: {
              type: "string"
            },
            hireable: {
              type: "boolean"
            },
            location: {
              type: "string"
            },
            name: {
              type: "string"
            }
          },
          url: "/user"
        }
      }
    };
    var VERSION4 = "2.4.0";
    function registerEndpoints(octokit, routes) {
      Object.keys(routes).forEach((namespaceName) => {
        if (!octokit[namespaceName]) {
          octokit[namespaceName] = {};
        }
        Object.keys(routes[namespaceName]).forEach((apiName) => {
          const apiOptions = routes[namespaceName][apiName];
          const endpointDefaults = ["method", "url", "headers"].reduce((map, key) => {
            if (typeof apiOptions[key] !== "undefined") {
              map[key] = apiOptions[key];
            }
            return map;
          }, {});
          endpointDefaults.request = {
            validate: apiOptions.params
          };
          let request2 = octokit.request.defaults(endpointDefaults);
          const hasDeprecatedParam = Object.keys(apiOptions.params || {}).find((key) => apiOptions.params[key].deprecated);
          if (hasDeprecatedParam) {
            const patch = patchForDeprecation.bind(null, octokit, apiOptions);
            request2 = patch(octokit.request.defaults(endpointDefaults), `.${namespaceName}.${apiName}()`);
            request2.endpoint = patch(request2.endpoint, `.${namespaceName}.${apiName}.endpoint()`);
            request2.endpoint.merge = patch(request2.endpoint.merge, `.${namespaceName}.${apiName}.endpoint.merge()`);
          }
          if (apiOptions.deprecated) {
            octokit[namespaceName][apiName] = Object.assign(function deprecatedEndpointMethod() {
              octokit.log.warn(new deprecation.Deprecation(`[@octokit/rest] ${apiOptions.deprecated}`));
              octokit[namespaceName][apiName] = request2;
              return request2.apply(null, arguments);
            }, request2);
            return;
          }
          octokit[namespaceName][apiName] = request2;
        });
      });
    }
    function patchForDeprecation(octokit, apiOptions, method, methodName) {
      const patchedMethod = (options) => {
        options = Object.assign({}, options);
        Object.keys(options).forEach((key) => {
          if (apiOptions.params[key] && apiOptions.params[key].deprecated) {
            const aliasKey = apiOptions.params[key].alias;
            octokit.log.warn(new deprecation.Deprecation(`[@octokit/rest] "${key}" parameter is deprecated for "${methodName}". Use "${aliasKey}" instead`));
            if (!(aliasKey in options)) {
              options[aliasKey] = options[key];
            }
            delete options[key];
          }
        });
        return method(options);
      };
      Object.keys(method).forEach((key) => {
        patchedMethod[key] = method[key];
      });
      return patchedMethod;
    }
    function restEndpointMethods(octokit) {
      octokit.registerEndpoints = registerEndpoints.bind(null, octokit);
      registerEndpoints(octokit, endpointsByScope);
      [["gitdata", "git"], ["authorization", "oauthAuthorizations"], ["pullRequests", "pulls"]].forEach(([deprecatedScope, scope]) => {
        Object.defineProperty(octokit, deprecatedScope, {
          get() {
            octokit.log.warn(
              // @ts-ignore
              new deprecation.Deprecation(`[@octokit/plugin-rest-endpoint-methods] "octokit.${deprecatedScope}.*" methods are deprecated, use "octokit.${scope}.*" instead`)
            );
            return octokit[scope];
          }
        });
      });
      return {};
    }
    restEndpointMethods.VERSION = VERSION4;
    exports.restEndpointMethods = restEndpointMethods;
  }
});

// node_modules/is-plain-object/dist/is-plain-object.js
var require_is_plain_object = __commonJS({
  "node_modules/is-plain-object/dist/is-plain-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function isObject2(o) {
      return Object.prototype.toString.call(o) === "[object Object]";
    }
    function isPlainObject3(o) {
      var ctor, prot;
      if (isObject2(o) === false)
        return false;
      ctor = o.constructor;
      if (ctor === void 0)
        return true;
      prot = ctor.prototype;
      if (isObject2(prot) === false)
        return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    }
    exports.isPlainObject = isPlainObject3;
  }
});

// node_modules/@octokit/endpoint/node_modules/universal-user-agent/dist-node/index.js
var require_dist_node4 = __commonJS({
  "node_modules/@octokit/endpoint/node_modules/universal-user-agent/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getUserAgent2() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === "object" && "version" in process) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return "<environment undetectable>";
    }
    exports.getUserAgent = getUserAgent2;
  }
});

// node_modules/@octokit/endpoint/dist-node/index.js
var require_dist_node5 = __commonJS({
  "node_modules/@octokit/endpoint/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var isPlainObject3 = require_is_plain_object();
    var universalUserAgent = require_dist_node4();
    function lowercaseKeys2(object) {
      if (!object) {
        return {};
      }
      return Object.keys(object).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object[key];
        return newObj;
      }, {});
    }
    function mergeDeep2(defaults, options) {
      const result = Object.assign({}, defaults);
      Object.keys(options).forEach((key) => {
        if (isPlainObject3.isPlainObject(options[key])) {
          if (!(key in defaults))
            Object.assign(result, {
              [key]: options[key]
            });
          else
            result[key] = mergeDeep2(defaults[key], options[key]);
        } else {
          Object.assign(result, {
            [key]: options[key]
          });
        }
      });
      return result;
    }
    function removeUndefinedProperties2(obj) {
      for (const key in obj) {
        if (obj[key] === void 0) {
          delete obj[key];
        }
      }
      return obj;
    }
    function merge2(defaults, route, options) {
      if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? {
          method,
          url
        } : {
          url: method
        }, options);
      } else {
        options = Object.assign({}, route);
      }
      options.headers = lowercaseKeys2(options.headers);
      removeUndefinedProperties2(options);
      removeUndefinedProperties2(options.headers);
      const mergedOptions = mergeDeep2(defaults || {}, options);
      if (defaults && defaults.mediaType.previews.length) {
        mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
      }
      mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
      return mergedOptions;
    }
    function addQueryParameters2(url, parameters) {
      const separator = /\?/.test(url) ? "&" : "?";
      const names = Object.keys(parameters);
      if (names.length === 0) {
        return url;
      }
      return url + separator + names.map((name) => {
        if (name === "q") {
          return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
        }
        return `${name}=${encodeURIComponent(parameters[name])}`;
      }).join("&");
    }
    var urlVariableRegex2 = /\{[^}]+\}/g;
    function removeNonChars2(variableName) {
      return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
    }
    function extractUrlVariableNames2(url) {
      const matches = url.match(urlVariableRegex2);
      if (!matches) {
        return [];
      }
      return matches.map(removeNonChars2).reduce((a, b) => a.concat(b), []);
    }
    function omit2(object, keysToOmit) {
      return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
        obj[key] = object[key];
        return obj;
      }, {});
    }
    function encodeReserved2(str) {
      return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
          part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
      }).join("");
    }
    function encodeUnreserved2(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeValue2(operator, value, key) {
      value = operator === "+" || operator === "#" ? encodeReserved2(value) : encodeUnreserved2(value);
      if (key) {
        return encodeUnreserved2(key) + "=" + value;
      } else {
        return value;
      }
    }
    function isDefined2(value) {
      return value !== void 0 && value !== null;
    }
    function isKeyOperator2(operator) {
      return operator === ";" || operator === "&" || operator === "?";
    }
    function getValues2(context2, operator, key, modifier) {
      var value = context2[key], result = [];
      if (isDefined2(value) && value !== "") {
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
          value = value.toString();
          if (modifier && modifier !== "*") {
            value = value.substring(0, parseInt(modifier, 10));
          }
          result.push(encodeValue2(operator, value, isKeyOperator2(operator) ? key : ""));
        } else {
          if (modifier === "*") {
            if (Array.isArray(value)) {
              value.filter(isDefined2).forEach(function(value2) {
                result.push(encodeValue2(operator, value2, isKeyOperator2(operator) ? key : ""));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined2(value[k])) {
                  result.push(encodeValue2(operator, value[k], k));
                }
              });
            }
          } else {
            const tmp = [];
            if (Array.isArray(value)) {
              value.filter(isDefined2).forEach(function(value2) {
                tmp.push(encodeValue2(operator, value2));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined2(value[k])) {
                  tmp.push(encodeUnreserved2(k));
                  tmp.push(encodeValue2(operator, value[k].toString()));
                }
              });
            }
            if (isKeyOperator2(operator)) {
              result.push(encodeUnreserved2(key) + "=" + tmp.join(","));
            } else if (tmp.length !== 0) {
              result.push(tmp.join(","));
            }
          }
        }
      } else {
        if (operator === ";") {
          if (isDefined2(value)) {
            result.push(encodeUnreserved2(key));
          }
        } else if (value === "" && (operator === "&" || operator === "?")) {
          result.push(encodeUnreserved2(key) + "=");
        } else if (value === "") {
          result.push("");
        }
      }
      return result;
    }
    function parseUrl2(template) {
      return {
        expand: expand2.bind(null, template)
      };
    }
    function expand2(template, context2) {
      var operators = ["+", "#", ".", "/", ";", "?", "&"];
      return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
        if (expression) {
          let operator = "";
          const values = [];
          if (operators.indexOf(expression.charAt(0)) !== -1) {
            operator = expression.charAt(0);
            expression = expression.substr(1);
          }
          expression.split(/,/g).forEach(function(variable) {
            var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
            values.push(getValues2(context2, operator, tmp[1], tmp[2] || tmp[3]));
          });
          if (operator && operator !== "+") {
            var separator = ",";
            if (operator === "?") {
              separator = "&";
            } else if (operator !== "#") {
              separator = operator;
            }
            return (values.length !== 0 ? operator : "") + values.join(separator);
          } else {
            return values.join(",");
          }
        } else {
          return encodeReserved2(literal);
        }
      });
    }
    function parse3(options) {
      let method = options.method.toUpperCase();
      let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
      let headers = Object.assign({}, options.headers);
      let body;
      let parameters = omit2(options, ["method", "baseUrl", "url", "headers", "request", "mediaType"]);
      const urlVariableNames = extractUrlVariableNames2(url);
      url = parseUrl2(url).expand(parameters);
      if (!/^http/.test(url)) {
        url = options.baseUrl + url;
      }
      const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
      const remainingParameters = omit2(parameters, omittedParameters);
      const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
      if (!isBinaryRequest) {
        if (options.mediaType.format) {
          headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
        }
        if (options.mediaType.previews.length) {
          const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
          headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
            const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
            return `application/vnd.github.${preview}-preview${format}`;
          }).join(",");
        }
      }
      if (["GET", "HEAD"].includes(method)) {
        url = addQueryParameters2(url, remainingParameters);
      } else {
        if ("data" in remainingParameters) {
          body = remainingParameters.data;
        } else {
          if (Object.keys(remainingParameters).length) {
            body = remainingParameters;
          } else {
            headers["content-length"] = 0;
          }
        }
      }
      if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
      }
      if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
        body = "";
      }
      return Object.assign({
        method,
        url,
        headers
      }, typeof body !== "undefined" ? {
        body
      } : null, options.request ? {
        request: options.request
      } : null);
    }
    function endpointWithDefaults2(defaults, route, options) {
      return parse3(merge2(defaults, route, options));
    }
    function withDefaults4(oldDefaults, newDefaults) {
      const DEFAULTS3 = merge2(oldDefaults, newDefaults);
      const endpoint3 = endpointWithDefaults2.bind(null, DEFAULTS3);
      return Object.assign(endpoint3, {
        DEFAULTS: DEFAULTS3,
        defaults: withDefaults4.bind(null, DEFAULTS3),
        merge: merge2.bind(null, DEFAULTS3),
        parse: parse3
      });
    }
    var VERSION4 = "6.0.12";
    var userAgent2 = `octokit-endpoint.js/${VERSION4} ${universalUserAgent.getUserAgent()}`;
    var DEFAULTS2 = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent2
      },
      mediaType: {
        format: "",
        previews: []
      }
    };
    var endpoint2 = withDefaults4(null, DEFAULTS2);
    exports.endpoint = endpoint2;
  }
});

// node_modules/@octokit/request/node_modules/universal-user-agent/dist-node/index.js
var require_dist_node6 = __commonJS({
  "node_modules/@octokit/request/node_modules/universal-user-agent/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getUserAgent2() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === "object" && "version" in process) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return "<environment undetectable>";
    }
    exports.getUserAgent = getUserAgent2;
  }
});

// node_modules/webidl-conversions/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/webidl-conversions/lib/index.js"(exports, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// node_modules/whatwg-url/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/whatwg-url/lib/utils.js"(exports, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "node_modules/tr46/lib/mappingTable.json"(exports, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "node_modules/tr46/index.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error2 = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error2 = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error2 = true;
          break;
        }
      }
      return {
        label,
        error: error2
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "node_modules/whatwg-url/lib/url-state-machine.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
          !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "node_modules/whatwg-url/lib/URL-impl.js"(exports) {
    "use strict";
    var usm = require_url_state_machine();
    exports.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "node_modules/whatwg-url/lib/URL.js"(exports, module2) {
    "use strict";
    var conversions = require_lib2();
    var utils = require_utils2();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL3(url) {
      if (!this || this[impl] || !(this instanceof URL3)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL3.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL3.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL3.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL3.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL3.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL3,
      expose: {
        Window: { URL: URL3 },
        Worker: { URL: URL3 }
      }
    };
  }
});

// node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "node_modules/whatwg-url/lib/public-api.js"(exports) {
    "use strict";
    exports.URL = require_URL().interface;
    exports.serializeURL = require_url_state_machine().serializeURL;
    exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports.basicURLParse = require_url_state_machine().basicURLParse;
    exports.setTheUsername = require_url_state_machine().setTheUsername;
    exports.setThePassword = require_url_state_machine().setThePassword;
    exports.serializeHost = require_url_state_machine().serializeHost;
    exports.serializeInteger = require_url_state_machine().serializeInteger;
    exports.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/@octokit/request/node_modules/node-fetch/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@octokit/request/node_modules/node-fetch/lib/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob2 = class _Blob {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof _Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new _Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob2.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob2.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error2;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(
            // Prevent copying
            new Blob2([], {
              type: ct.toLowerCase()
            }),
            {
              [BUFFER]: buf
            }
          );
        });
      },
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody.call(this);
      },
      /**
       * Decode response as text, while automatically detecting the encoding and
       * trying to decode to UTF-8 (non-spec api)
       *
       * @return  Promise
       */
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
        body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class _Headers {
      /**
       * Headers class
       *
       * @param   Object  headers  Response headers
       * @return  Void
       */
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof _Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      /**
       * Return combined header value given name
       *
       * @param   String  name  Header name
       * @return  Mixed
       */
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */
      raw() {
        return this[MAP];
      }
      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */
      keys() {
        return createHeadersIterator(this, "key");
      }
      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */
      values() {
        return createHeadersIterator(this, "value");
      }
      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response = class _Response {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new _Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL3 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL3(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class _Request {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new _Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request2) {
      const parsedURL = request2[INTERNALS$2].parsedURL;
      const headers = new Headers(request2[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request2.signal && request2.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request2.body == null && /^(POST|PUT)$/i.test(request2.method)) {
        contentLengthValue = "0";
      }
      if (request2.body != null) {
        const totalBytes = getTotalBytes(request2);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request2.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request2.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      return Object.assign({}, parsedURL, {
        method: request2.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    var isSameProtocol = function isSameProtocol2(destination, original) {
      const orig = new URL$1(original).protocol;
      const dest = new URL$1(destination).protocol;
      return orig === dest;
    };
    function fetch(url, opts) {
      if (!fetch.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch.Promise;
      return new fetch.Promise(function(resolve, reject) {
        const request2 = new Request(url, opts);
        const options = getNodeRequestOptions(request2);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request2.signal;
        let response = null;
        const abort = function abort2() {
          let error2 = new AbortError("The user aborted a request.");
          reject(error2);
          if (request2.body && request2.body instanceof Stream.Readable) {
            destroyStream(request2.body, error2);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error2);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request2.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request2.url}`, "request-timeout"));
              finalize();
            }, request2.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request2.url} failed, reason: ${err.message}`, "system", err));
          if (response && response.body) {
            destroyStream(response.body, err);
          }
          finalize();
        });
        fixResponseChunkedTransferBadEnding(req, function(err) {
          if (signal && signal.aborted) {
            return;
          }
          if (response && response.body) {
            destroyStream(response.body, err);
          }
        });
        if (parseInt(process.version.substring(1)) < 14) {
          req.on("socket", function(s) {
            s.addListener("close", function(hadError) {
              const hasDataListener = s.listenerCount("data") > 0;
              if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
                const err = new Error("Premature close");
                err.code = "ERR_STREAM_PREMATURE_CLOSE";
                response.body.emit("error", err);
              }
            });
          });
        }
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request2.url).toString();
            } catch (err) {
              if (request2.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request2.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request2.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request2.counter >= request2.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request2.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request2.headers),
                  follow: request2.follow,
                  counter: request2.counter + 1,
                  agent: request2.agent,
                  compress: request2.compress,
                  method: request2.method,
                  body: request2.body,
                  signal: request2.signal,
                  timeout: request2.timeout,
                  size: request2.size
                };
                if (!isDomainOrSubdomain(request2.url, locationURL) || !isSameProtocol(request2.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request2.body && getTotalBytes(request2) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request2.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request2.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request2.size,
            timeout: request2.timeout,
            counter: request2.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request2.compress || request2.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw = res.pipe(new PassThrough$1());
            raw.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            raw.on("end", function() {
              if (!response) {
                response = new Response(body, response_options);
                resolve(response);
              }
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        writeToStream(req, request2);
      });
    }
    function fixResponseChunkedTransferBadEnding(request2, errorCallback) {
      let socket;
      request2.on("socket", function(s) {
        socket = s;
      });
      request2.on("response", function(response) {
        const headers = response.headers;
        if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
          response.once("close", function(hadError) {
            const hasDataListener = socket && socket.listenerCount("data") > 0;
            if (hasDataListener && !hadError) {
              const err = new Error("Premature close");
              err.code = "ERR_STREAM_PREMATURE_CLOSE";
              errorCallback(err);
            }
          });
        }
      });
    }
    function destroyStream(stream, err) {
      if (stream.destroy) {
        stream.destroy(err);
      } else {
        stream.emit("error", err);
        stream.end();
      }
    }
    fetch.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch.Promise = global.Promise;
    module2.exports = exports = fetch;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = exports;
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.FetchError = FetchError;
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/@octokit/request/node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node7 = __commonJS({
  "node_modules/@octokit/request/node_modules/@octokit/request-error/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var deprecation = require_dist_node2();
    var once = _interopDefault(require_once());
    var logOnceCode = once((deprecation2) => console.warn(deprecation2));
    var logOnceHeaders = once((deprecation2) => console.warn(deprecation2));
    var RequestError2 = class extends Error {
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
          headers = options.headers;
        }
        if ("response" in options) {
          this.response = options.response;
          headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
          get() {
            logOnceCode(new deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
            return statusCode;
          }
        });
        Object.defineProperty(this, "headers", {
          get() {
            logOnceHeaders(new deprecation.Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
            return headers || {};
          }
        });
      }
    };
    exports.RequestError = RequestError2;
  }
});

// node_modules/@octokit/request/dist-node/index.js
var require_dist_node8 = __commonJS({
  "node_modules/@octokit/request/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var endpoint2 = require_dist_node5();
    var universalUserAgent = require_dist_node6();
    var isPlainObject3 = require_is_plain_object();
    var nodeFetch = _interopDefault(require_lib3());
    var requestError = require_dist_node7();
    var VERSION4 = "5.6.3";
    function getBufferResponse2(response) {
      return response.arrayBuffer();
    }
    function fetchWrapper2(requestOptions) {
      const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
      if (isPlainObject3.isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
      }
      let headers = {};
      let status;
      let url;
      const fetch = requestOptions.request && requestOptions.request.fetch || nodeFetch;
      return fetch(requestOptions.url, Object.assign(
        {
          method: requestOptions.method,
          body: requestOptions.body,
          headers: requestOptions.headers,
          redirect: requestOptions.redirect
        },
        // `requestOptions.request.agent` type is incompatible
        // see https://github.com/octokit/types.ts/pull/264
        requestOptions.request
      )).then(async (response) => {
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
          headers[keyAndValue[0]] = keyAndValue[1];
        }
        if ("deprecation" in headers) {
          const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
          const deprecationLink = matches && matches.pop();
          log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
        }
        if (status === 204 || status === 205) {
          return;
        }
        if (requestOptions.method === "HEAD") {
          if (status < 400) {
            return;
          }
          throw new requestError.RequestError(response.statusText, status, {
            response: {
              url,
              status,
              headers,
              data: void 0
            },
            request: requestOptions
          });
        }
        if (status === 304) {
          throw new requestError.RequestError("Not modified", status, {
            response: {
              url,
              status,
              headers,
              data: await getResponseData2(response)
            },
            request: requestOptions
          });
        }
        if (status >= 400) {
          const data = await getResponseData2(response);
          const error2 = new requestError.RequestError(toErrorMessage2(data), status, {
            response: {
              url,
              status,
              headers,
              data
            },
            request: requestOptions
          });
          throw error2;
        }
        return getResponseData2(response);
      }).then((data) => {
        return {
          status,
          url,
          headers,
          data
        };
      }).catch((error2) => {
        if (error2 instanceof requestError.RequestError)
          throw error2;
        throw new requestError.RequestError(error2.message, 500, {
          request: requestOptions
        });
      });
    }
    async function getResponseData2(response) {
      const contentType = response.headers.get("content-type");
      if (/application\/json/.test(contentType)) {
        return response.json();
      }
      if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
        return response.text();
      }
      return getBufferResponse2(response);
    }
    function toErrorMessage2(data) {
      if (typeof data === "string")
        return data;
      if ("message" in data) {
        if (Array.isArray(data.errors)) {
          return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
        }
        return data.message;
      }
      return `Unknown error: ${JSON.stringify(data)}`;
    }
    function withDefaults4(oldEndpoint, newDefaults) {
      const endpoint3 = oldEndpoint.defaults(newDefaults);
      const newApi = function(route, parameters) {
        const endpointOptions = endpoint3.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
          return fetchWrapper2(endpoint3.parse(endpointOptions));
        }
        const request3 = (route2, parameters2) => {
          return fetchWrapper2(endpoint3.parse(endpoint3.merge(route2, parameters2)));
        };
        Object.assign(request3, {
          endpoint: endpoint3,
          defaults: withDefaults4.bind(null, endpoint3)
        });
        return endpointOptions.request.hook(request3, endpointOptions);
      };
      return Object.assign(newApi, {
        endpoint: endpoint3,
        defaults: withDefaults4.bind(null, endpoint3)
      });
    }
    var request2 = withDefaults4(endpoint2.endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION4} ${universalUserAgent.getUserAgent()}`
      }
    });
    exports.request = request2;
  }
});

// node_modules/@octokit/rest/node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({
  "node_modules/@octokit/rest/node_modules/before-after-hook/lib/register.js"(exports, module2) {
    module2.exports = register;
    function register(state, name, method, options) {
      if (typeof method !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register.bind(null, state, name2, callback, options);
        }, method)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method(options);
        }
        return state.registry[name].reduce(function(method2, registered) {
          return registered.hook.bind(null, method2, options);
        }, method)();
      });
    }
  }
});

// node_modules/@octokit/rest/node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({
  "node_modules/@octokit/rest/node_modules/before-after-hook/lib/add.js"(exports, module2) {
    module2.exports = addHook;
    function addHook(state, kind, name, hook) {
      var orig = hook;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook = function(method, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
        };
      }
      if (kind === "after") {
        hook = function(method, options) {
          var result;
          return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook = function(method, options) {
          return Promise.resolve().then(method.bind(null, options)).catch(function(error2) {
            return orig(error2, options);
          });
        };
      }
      state.registry[name].push({
        hook,
        orig
      });
    }
  }
});

// node_modules/@octokit/rest/node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({
  "node_modules/@octokit/rest/node_modules/before-after-hook/lib/remove.js"(exports, module2) {
    module2.exports = removeHook;
    function removeHook(state, name, method) {
      if (!state.registry[name]) {
        return;
      }
      var index = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method);
      if (index === -1) {
        return;
      }
      state.registry[name].splice(index, 1);
    }
  }
});

// node_modules/@octokit/rest/node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({
  "node_modules/@octokit/rest/node_modules/before-after-hook/index.js"(exports, module2) {
    var register = require_register();
    var addHook = require_add();
    var removeHook = require_remove();
    var bind = Function.bind;
    var bindable = bind.bind(bind);
    function bindApi(hook, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(
        null,
        name ? [state, name] : [state]
      );
      hook.api = { remove: removeHookRef };
      hook.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook = register.bind(null, state);
      bindApi(hook, state);
      return hook;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn(
          '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
        );
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    module2.exports = Hook;
    module2.exports.Hook = Hook;
    module2.exports.Singular = Hook.Singular;
    module2.exports.Collection = Hook.Collection;
  }
});

// node_modules/macos-release/index.js
var require_macos_release = __commonJS({
  "node_modules/macos-release/index.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var nameMap = /* @__PURE__ */ new Map([
      [21, ["Monterey", "12"]],
      [20, ["Big Sur", "11"]],
      [19, ["Catalina", "10.15"]],
      [18, ["Mojave", "10.14"]],
      [17, ["High Sierra", "10.13"]],
      [16, ["Sierra", "10.12"]],
      [15, ["El Capitan", "10.11"]],
      [14, ["Yosemite", "10.10"]],
      [13, ["Mavericks", "10.9"]],
      [12, ["Mountain Lion", "10.8"]],
      [11, ["Lion", "10.7"]],
      [10, ["Snow Leopard", "10.6"]],
      [9, ["Leopard", "10.5"]],
      [8, ["Tiger", "10.4"]],
      [7, ["Panther", "10.3"]],
      [6, ["Jaguar", "10.2"]],
      [5, ["Puma", "10.1"]]
    ]);
    var macosRelease = (release) => {
      release = Number((release || os.release()).split(".")[0]);
      const [name, version2] = nameMap.get(release) || ["Unknown", ""];
      return {
        name,
        version: version2
      };
    };
    module2.exports = macosRelease;
    module2.exports.default = macosRelease;
  }
});

// node_modules/nice-try/src/index.js
var require_src = __commonJS({
  "node_modules/nice-try/src/index.js"(exports, module2) {
    "use strict";
    module2.exports = function(fn) {
      try {
        return fn();
      } catch (e) {
      }
    };
  }
});

// node_modules/isexe/windows.js
var require_windows = __commonJS({
  "node_modules/isexe/windows.js"(exports, module2) {
    module2.exports = isexe;
    isexe.sync = sync;
    var fs = require("fs");
    function checkPathExt(path, options) {
      var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
      if (!pathext) {
        return true;
      }
      pathext = pathext.split(";");
      if (pathext.indexOf("") !== -1) {
        return true;
      }
      for (var i = 0; i < pathext.length; i++) {
        var p = pathext[i].toLowerCase();
        if (p && path.substr(-p.length).toLowerCase() === p) {
          return true;
        }
      }
      return false;
    }
    function checkStat(stat, path, options) {
      if (!stat.isSymbolicLink() && !stat.isFile()) {
        return false;
      }
      return checkPathExt(path, options);
    }
    function isexe(path, options, cb) {
      fs.stat(path, function(er, stat) {
        cb(er, er ? false : checkStat(stat, path, options));
      });
    }
    function sync(path, options) {
      return checkStat(fs.statSync(path), path, options);
    }
  }
});

// node_modules/isexe/mode.js
var require_mode = __commonJS({
  "node_modules/isexe/mode.js"(exports, module2) {
    module2.exports = isexe;
    isexe.sync = sync;
    var fs = require("fs");
    function isexe(path, options, cb) {
      fs.stat(path, function(er, stat) {
        cb(er, er ? false : checkStat(stat, options));
      });
    }
    function sync(path, options) {
      return checkStat(fs.statSync(path), options);
    }
    function checkStat(stat, options) {
      return stat.isFile() && checkMode(stat, options);
    }
    function checkMode(stat, options) {
      var mod = stat.mode;
      var uid = stat.uid;
      var gid = stat.gid;
      var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
      var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
      var u = parseInt("100", 8);
      var g = parseInt("010", 8);
      var o = parseInt("001", 8);
      var ug = u | g;
      var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
      return ret;
    }
  }
});

// node_modules/isexe/index.js
var require_isexe = __commonJS({
  "node_modules/isexe/index.js"(exports, module2) {
    var fs = require("fs");
    var core3;
    if (process.platform === "win32" || global.TESTING_WINDOWS) {
      core3 = require_windows();
    } else {
      core3 = require_mode();
    }
    module2.exports = isexe;
    isexe.sync = sync;
    function isexe(path, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      if (!cb) {
        if (typeof Promise !== "function") {
          throw new TypeError("callback not provided");
        }
        return new Promise(function(resolve, reject) {
          isexe(path, options || {}, function(er, is) {
            if (er) {
              reject(er);
            } else {
              resolve(is);
            }
          });
        });
      }
      core3(path, options || {}, function(er, is) {
        if (er) {
          if (er.code === "EACCES" || options && options.ignoreErrors) {
            er = null;
            is = false;
          }
        }
        cb(er, is);
      });
    }
    function sync(path, options) {
      try {
        return core3.sync(path, options || {});
      } catch (er) {
        if (options && options.ignoreErrors || er.code === "EACCES") {
          return false;
        } else {
          throw er;
        }
      }
    }
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/which/which.js
var require_which = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/which/which.js"(exports, module2) {
    module2.exports = which;
    which.sync = whichSync;
    var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
    var path = require("path");
    var COLON = isWindows ? ";" : ":";
    var isexe = require_isexe();
    function getNotFoundError(cmd) {
      var er = new Error("not found: " + cmd);
      er.code = "ENOENT";
      return er;
    }
    function getPathInfo(cmd, opt) {
      var colon = opt.colon || COLON;
      var pathEnv = opt.path || process.env.PATH || "";
      var pathExt = [""];
      pathEnv = pathEnv.split(colon);
      var pathExtExe = "";
      if (isWindows) {
        pathEnv.unshift(process.cwd());
        pathExtExe = opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM";
        pathExt = pathExtExe.split(colon);
        if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
          pathExt.unshift("");
      }
      if (cmd.match(/\//) || isWindows && cmd.match(/\\/))
        pathEnv = [""];
      return {
        env: pathEnv,
        ext: pathExt,
        extExe: pathExtExe
      };
    }
    function which(cmd, opt, cb) {
      if (typeof opt === "function") {
        cb = opt;
        opt = {};
      }
      var info2 = getPathInfo(cmd, opt);
      var pathEnv = info2.env;
      var pathExt = info2.ext;
      var pathExtExe = info2.extExe;
      var found = [];
      (function F(i, l) {
        if (i === l) {
          if (opt.all && found.length)
            return cb(null, found);
          else
            return cb(getNotFoundError(cmd));
        }
        var pathPart = pathEnv[i];
        if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
          pathPart = pathPart.slice(1, -1);
        var p = path.join(pathPart, cmd);
        if (!pathPart && /^\.[\\\/]/.test(cmd)) {
          p = cmd.slice(0, 2) + p;
        }
        ;
        (function E(ii, ll) {
          if (ii === ll)
            return F(i + 1, l);
          var ext = pathExt[ii];
          isexe(p + ext, { pathExt: pathExtExe }, function(er, is) {
            if (!er && is) {
              if (opt.all)
                found.push(p + ext);
              else
                return cb(null, p + ext);
            }
            return E(ii + 1, ll);
          });
        })(0, pathExt.length);
      })(0, pathEnv.length);
    }
    function whichSync(cmd, opt) {
      opt = opt || {};
      var info2 = getPathInfo(cmd, opt);
      var pathEnv = info2.env;
      var pathExt = info2.ext;
      var pathExtExe = info2.extExe;
      var found = [];
      for (var i = 0, l = pathEnv.length; i < l; i++) {
        var pathPart = pathEnv[i];
        if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
          pathPart = pathPart.slice(1, -1);
        var p = path.join(pathPart, cmd);
        if (!pathPart && /^\.[\\\/]/.test(cmd)) {
          p = cmd.slice(0, 2) + p;
        }
        for (var j = 0, ll = pathExt.length; j < ll; j++) {
          var cur = p + pathExt[j];
          var is;
          try {
            is = isexe.sync(cur, { pathExt: pathExtExe });
            if (is) {
              if (opt.all)
                found.push(cur);
              else
                return cur;
            }
          } catch (ex) {
          }
        }
      }
      if (opt.all && found.length)
        return found;
      if (opt.nothrow)
        return null;
      throw getNotFoundError(cmd);
    }
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/path-key/index.js
var require_path_key = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/path-key/index.js"(exports, module2) {
    "use strict";
    module2.exports = (opts) => {
      opts = opts || {};
      const env = opts.env || process.env;
      const platform = opts.platform || process.platform;
      if (platform !== "win32") {
        return "PATH";
      }
      return Object.keys(env).find((x) => x.toUpperCase() === "PATH") || "Path";
    };
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/util/resolveCommand.js
var require_resolveCommand = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var which = require_which();
    var pathKey = require_path_key()();
    function resolveCommandAttempt(parsed, withoutPathExt) {
      const cwd = process.cwd();
      const hasCustomCwd = parsed.options.cwd != null;
      if (hasCustomCwd) {
        try {
          process.chdir(parsed.options.cwd);
        } catch (err) {
        }
      }
      let resolved;
      try {
        resolved = which.sync(parsed.command, {
          path: (parsed.options.env || process.env)[pathKey],
          pathExt: withoutPathExt ? path.delimiter : void 0
        });
      } catch (e) {
      } finally {
        process.chdir(cwd);
      }
      if (resolved) {
        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
      }
      return resolved;
    }
    function resolveCommand(parsed) {
      return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
    }
    module2.exports = resolveCommand;
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/util/escape.js
var require_escape = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/util/escape.js"(exports, module2) {
    "use strict";
    var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
    function escapeCommand(arg) {
      arg = arg.replace(metaCharsRegExp, "^$1");
      return arg;
    }
    function escapeArgument(arg, doubleEscapeMetaChars) {
      arg = `${arg}`;
      arg = arg.replace(/(\\*)"/g, '$1$1\\"');
      arg = arg.replace(/(\\*)$/, "$1$1");
      arg = `"${arg}"`;
      arg = arg.replace(metaCharsRegExp, "^$1");
      if (doubleEscapeMetaChars) {
        arg = arg.replace(metaCharsRegExp, "^$1");
      }
      return arg;
    }
    module2.exports.command = escapeCommand;
    module2.exports.argument = escapeArgument;
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/shebang-command/node_modules/shebang-regex/index.js
var require_shebang_regex = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/shebang-command/node_modules/shebang-regex/index.js"(exports, module2) {
    "use strict";
    module2.exports = /^#!.*/;
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/shebang-command/index.js
var require_shebang_command = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/shebang-command/index.js"(exports, module2) {
    "use strict";
    var shebangRegex = require_shebang_regex();
    module2.exports = function(str) {
      var match = str.match(shebangRegex);
      if (!match) {
        return null;
      }
      var arr = match[0].replace(/#! ?/, "").split(" ");
      var bin = arr[0].split("/").pop();
      var arg = arr[1];
      return bin === "env" ? arg : bin + (arg ? " " + arg : "");
    };
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/util/readShebang.js
var require_readShebang = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/util/readShebang.js"(exports, module2) {
    "use strict";
    var fs = require("fs");
    var shebangCommand = require_shebang_command();
    function readShebang(command) {
      const size = 150;
      let buffer;
      if (Buffer.alloc) {
        buffer = Buffer.alloc(size);
      } else {
        buffer = new Buffer(size);
        buffer.fill(0);
      }
      let fd;
      try {
        fd = fs.openSync(command, "r");
        fs.readSync(fd, buffer, 0, size, 0);
        fs.closeSync(fd);
      } catch (e) {
      }
      return shebangCommand(buffer.toString());
    }
    module2.exports = readShebang;
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/semver/semver.js
var require_semver = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/node_modules/semver/semver.js"(exports, module2) {
    exports = module2.exports = SemVer;
    var debug;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    function makeSafeRe(value) {
      for (var i2 = 0; i2 < safeRegexReplacements.length; i2++) {
        var token = safeRegexReplacements[i2][0];
        var max = safeRegexReplacements[i2][1];
        value = value.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
      }
      return value;
    }
    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = "\\d+";
    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-]" + LETTERDASHNUMBER + "*";
    var MAINVERSION = R++;
    src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASE = R++;
    src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = LETTERDASHNUMBER + "+";
    var BUILD = R++;
    src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
    var FULL = R++;
    var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
    src[FULL] = "^" + FULLPLAIN + "$";
    var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
    var LOOSE = R++;
    src[LOOSE] = "^" + LOOSEPLAIN + "$";
    var GTLT = R++;
    src[GTLT] = "((?:<|>)?=?)";
    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGE = R++;
    src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
    var COERCE = R++;
    src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    var LONETILDE = R++;
    src[LONETILDE] = "(?:~>?)";
    var TILDETRIM = R++;
    src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
    re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
    safeRe[TILDETRIM] = new RegExp(makeSafeRe(src[TILDETRIM]), "g");
    var tildeTrimReplace = "$1~";
    var TILDE = R++;
    src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
    var TILDELOOSE = R++;
    src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
    var LONECARET = R++;
    src[LONECARET] = "(?:\\^)";
    var CARETTRIM = R++;
    src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
    re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
    safeRe[CARETTRIM] = new RegExp(makeSafeRe(src[CARETTRIM]), "g");
    var caretTrimReplace = "$1^";
    var CARET = R++;
    src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
    var CARETLOOSE = R++;
    src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
    var COMPARATOR = R++;
    src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
    safeRe[COMPARATORTRIM] = new RegExp(makeSafeRe(src[COMPARATORTRIM]), "g");
    var comparatorTrimReplace = "$1$2$3";
    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
    var STAR = R++;
    src[STAR] = "(<|>)?=?\\s*\\*";
    for (i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
        safeRe[i] = new RegExp(makeSafeRe(src[i]));
      }
    }
    var i;
    exports.parse = parse3;
    function parse3(version2, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 !== "string") {
        return null;
      }
      if (version2.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? safeRe[LOOSE] : safeRe[FULL];
      if (!r.test(version2)) {
        return null;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        return null;
      }
    }
    exports.valid = valid;
    function valid(version2, options) {
      var v = parse3(version2, options);
      return v ? v.version : null;
    }
    exports.clean = clean;
    function clean(version2, options) {
      var s = parse3(version2.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    }
    exports.SemVer = SemVer;
    function SemVer(version2, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version2 instanceof SemVer) {
        if (version2.loose === options.loose) {
          return version2;
        } else {
          version2 = version2.version;
        }
      } else if (typeof version2 !== "string") {
        throw new TypeError("Invalid Version: " + version2);
      }
      if (version2.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version2, options);
      }
      debug("SemVer", version2, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version2.trim().match(options.loose ? safeRe[LOOSE] : safeRe[FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version2);
      }
      this.raw = version2;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports.inc = inc;
    function inc(version2, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version2, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v12 = parse3(version1);
        var v2 = parse3(version2);
        var prefix = "";
        if (v12.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v12) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v12[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports.compare(a, b, loose);
      });
    }
    exports.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports.rcompare(a, b, loose);
      });
    }
    exports.gt = gt;
    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports.lt = lt;
    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      comp = comp.trim().split(/\s+/).join(" ");
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1];
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version2) {
      debug("Comparator.test", version2, this.options.loose);
      if (this.semver === ANY) {
        return true;
      }
      if (typeof version2 === "string") {
        version2 = new SemVer(version2, this.options);
      }
      return cmp(version2, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range.trim().split(/\s+/).join(" ");
      this.set = this.raw.split("||").map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + this.raw);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      var hr = loose ? safeRe[HYPHENRANGELOOSE] : safeRe[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug("hyphen replace", range);
      range = range.replace(safeRe[COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range, safeRe[COMPARATORTRIM]);
      range = range.replace(safeRe[TILDETRIM], tildeTrimReplace);
      range = range.replace(safeRe[CARETTRIM], caretTrimReplace);
      var compRe = loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return thisComparators.every(function(thisComparator) {
          return range.set.some(function(rangeComparators) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    exports.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? safeRe[TILDELOOSE] : safeRe[TILDE];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("tilde", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
        }
        debug("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug("caret", comp, options);
      var r = options.loose ? safeRe[CARETLOOSE] : safeRe[CARET];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("caret", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? safeRe[XRANGELOOSE] : safeRe[XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + "." + m + "." + p;
        } else if (xm) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (xp) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        }
        debug("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug("replaceStars", comp, options);
      return comp.trim().replace(safeRe[STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version2) {
      if (!version2) {
        return false;
      }
      if (typeof version2 === "string") {
        version2 = new SemVer(version2, this.options);
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version2, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version2, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports.satisfies = satisfies;
    function satisfies(version2, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    }
    exports.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports.ltr = ltr;
    function ltr(version2, range, options) {
      return outside(version2, range, "<", options);
    }
    exports.gtr = gtr;
    function gtr(version2, range, options) {
      return outside(version2, range, ">", options);
    }
    exports.outside = outside;
    function outside(version2, range, hilo, options) {
      version2 = new SemVer(version2, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports.prerelease = prerelease;
    function prerelease(version2, options) {
      var parsed = parse3(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports.coerce = coerce;
    function coerce(version2) {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 !== "string") {
        return null;
      }
      var match = version2.match(safeRe[COERCE]);
      if (match == null) {
        return null;
      }
      return parse3(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
    }
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/parse.js
var require_parse = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/parse.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var niceTry = require_src();
    var resolveCommand = require_resolveCommand();
    var escape2 = require_escape();
    var readShebang = require_readShebang();
    var semver = require_semver();
    var isWin = process.platform === "win32";
    var isExecutableRegExp = /\.(?:com|exe)$/i;
    var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
    var supportsShellOption = niceTry(() => semver.satisfies(process.version, "^4.8.0 || ^5.7.0 || >= 6.0.0", true)) || false;
    function detectShebang(parsed) {
      parsed.file = resolveCommand(parsed);
      const shebang = parsed.file && readShebang(parsed.file);
      if (shebang) {
        parsed.args.unshift(parsed.file);
        parsed.command = shebang;
        return resolveCommand(parsed);
      }
      return parsed.file;
    }
    function parseNonShell(parsed) {
      if (!isWin) {
        return parsed;
      }
      const commandFile = detectShebang(parsed);
      const needsShell = !isExecutableRegExp.test(commandFile);
      if (parsed.options.forceShell || needsShell) {
        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
        parsed.command = path.normalize(parsed.command);
        parsed.command = escape2.command(parsed.command);
        parsed.args = parsed.args.map((arg) => escape2.argument(arg, needsDoubleEscapeMetaChars));
        const shellCommand = [parsed.command].concat(parsed.args).join(" ");
        parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
        parsed.command = process.env.comspec || "cmd.exe";
        parsed.options.windowsVerbatimArguments = true;
      }
      return parsed;
    }
    function parseShell(parsed) {
      if (supportsShellOption) {
        return parsed;
      }
      const shellCommand = [parsed.command].concat(parsed.args).join(" ");
      if (isWin) {
        parsed.command = typeof parsed.options.shell === "string" ? parsed.options.shell : process.env.comspec || "cmd.exe";
        parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
        parsed.options.windowsVerbatimArguments = true;
      } else {
        if (typeof parsed.options.shell === "string") {
          parsed.command = parsed.options.shell;
        } else if (process.platform === "android") {
          parsed.command = "/system/bin/sh";
        } else {
          parsed.command = "/bin/sh";
        }
        parsed.args = ["-c", shellCommand];
      }
      return parsed;
    }
    function parse3(command, args, options) {
      if (args && !Array.isArray(args)) {
        options = args;
        args = null;
      }
      args = args ? args.slice(0) : [];
      options = Object.assign({}, options);
      const parsed = {
        command,
        args,
        options,
        file: void 0,
        original: {
          command,
          args
        }
      };
      return options.shell ? parseShell(parsed) : parseNonShell(parsed);
    }
    module2.exports = parse3;
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/enoent.js
var require_enoent = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/lib/enoent.js"(exports, module2) {
    "use strict";
    var isWin = process.platform === "win32";
    function notFoundError(original, syscall) {
      return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
        code: "ENOENT",
        errno: "ENOENT",
        syscall: `${syscall} ${original.command}`,
        path: original.command,
        spawnargs: original.args
      });
    }
    function hookChildProcess(cp, parsed) {
      if (!isWin) {
        return;
      }
      const originalEmit = cp.emit;
      cp.emit = function(name, arg1) {
        if (name === "exit") {
          const err = verifyENOENT(arg1, parsed, "spawn");
          if (err) {
            return originalEmit.call(cp, "error", err);
          }
        }
        return originalEmit.apply(cp, arguments);
      };
    }
    function verifyENOENT(status, parsed) {
      if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, "spawn");
      }
      return null;
    }
    function verifyENOENTSync(status, parsed) {
      if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, "spawnSync");
      }
      return null;
    }
    module2.exports = {
      hookChildProcess,
      verifyENOENT,
      verifyENOENTSync,
      notFoundError
    };
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/index.js
var require_cross_spawn = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/cross-spawn/index.js"(exports, module2) {
    "use strict";
    var cp = require("child_process");
    var parse3 = require_parse();
    var enoent = require_enoent();
    function spawn(command, args, options) {
      const parsed = parse3(command, args, options);
      const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
      enoent.hookChildProcess(spawned, parsed);
      return spawned;
    }
    function spawnSync(command, args, options) {
      const parsed = parse3(command, args, options);
      const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
      result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
      return result;
    }
    module2.exports = spawn;
    module2.exports.spawn = spawn;
    module2.exports.sync = spawnSync;
    module2.exports._parse = parse3;
    module2.exports._enoent = enoent;
  }
});

// node_modules/strip-eof/index.js
var require_strip_eof = __commonJS({
  "node_modules/strip-eof/index.js"(exports, module2) {
    "use strict";
    module2.exports = function(x) {
      var lf = typeof x === "string" ? "\n" : "\n".charCodeAt();
      var cr = typeof x === "string" ? "\r" : "\r".charCodeAt();
      if (x[x.length - 1] === lf) {
        x = x.slice(0, x.length - 1);
      }
      if (x[x.length - 1] === cr) {
        x = x.slice(0, x.length - 1);
      }
      return x;
    };
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/npm-run-path/node_modules/path-key/index.js
var require_path_key2 = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/npm-run-path/node_modules/path-key/index.js"(exports, module2) {
    "use strict";
    module2.exports = (opts) => {
      opts = opts || {};
      const env = opts.env || process.env;
      const platform = opts.platform || process.platform;
      if (platform !== "win32") {
        return "PATH";
      }
      return Object.keys(env).find((x) => x.toUpperCase() === "PATH") || "Path";
    };
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/npm-run-path/index.js
var require_npm_run_path = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/npm-run-path/index.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var pathKey = require_path_key2();
    module2.exports = (opts) => {
      opts = Object.assign({
        cwd: process.cwd(),
        path: process.env[pathKey()]
      }, opts);
      let prev;
      let pth = path.resolve(opts.cwd);
      const ret = [];
      while (prev !== pth) {
        ret.push(path.join(pth, "node_modules/.bin"));
        prev = pth;
        pth = path.resolve(pth, "..");
      }
      ret.push(path.dirname(process.execPath));
      return ret.concat(opts.path).join(path.delimiter);
    };
    module2.exports.env = (opts) => {
      opts = Object.assign({
        env: process.env
      }, opts);
      const env = Object.assign({}, opts.env);
      const path2 = pathKey({ env });
      opts.path = env[path2];
      env[path2] = module2.exports(opts);
      return env;
    };
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/is-stream/index.js"(exports, module2) {
    "use strict";
    var isStream = module2.exports = function(stream) {
      return stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    };
    isStream.writable = function(stream) {
      return isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    };
    isStream.readable = function(stream) {
      return isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    };
    isStream.duplex = function(stream) {
      return isStream.writable(stream) && isStream.readable(stream);
    };
    isStream.transform = function(stream) {
      return isStream.duplex(stream) && typeof stream._transform === "function" && typeof stream._transformState === "object";
    };
  }
});

// node_modules/end-of-stream/index.js
var require_end_of_stream = __commonJS({
  "node_modules/end-of-stream/index.js"(exports, module2) {
    var once = require_once();
    var noop = function() {
    };
    var isRequest = function(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    };
    var isChildProcess = function(stream) {
      return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
    };
    var eos = function(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var ws = stream._writableState;
      var rs = stream._readableState;
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var cancelled = false;
      var onlegacyfinish = function() {
        if (!stream.writable)
          onfinish();
      };
      var onfinish = function() {
        writable = false;
        if (!readable)
          callback.call(stream);
      };
      var onend = function() {
        readable = false;
        if (!writable)
          callback.call(stream);
      };
      var onexit = function(exitCode) {
        callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
      };
      var onerror = function(err) {
        callback.call(stream, err);
      };
      var onclose = function() {
        process.nextTick(onclosenexttick);
      };
      var onclosenexttick = function() {
        if (cancelled)
          return;
        if (readable && !(rs && (rs.ended && !rs.destroyed)))
          return callback.call(stream, new Error("premature close"));
        if (writable && !(ws && (ws.ended && !ws.destroyed)))
          return callback.call(stream, new Error("premature close"));
      };
      var onrequest = function() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !ws) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      if (isChildProcess(stream))
        stream.on("exit", onexit);
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        cancelled = true;
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("exit", onexit);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    };
    module2.exports = eos;
  }
});

// node_modules/pump/index.js
var require_pump = __commonJS({
  "node_modules/pump/index.js"(exports, module2) {
    var once = require_once();
    var eos = require_end_of_stream();
    var fs = require("fs");
    var noop = function() {
    };
    var ancient = /^v?\.0/.test(process.version);
    var isFn = function(fn) {
      return typeof fn === "function";
    };
    var isFS = function(stream) {
      if (!ancient)
        return false;
      if (!fs)
        return false;
      return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);
    };
    var isRequest = function(stream) {
      return stream.setHeader && isFn(stream.abort);
    };
    var destroyer = function(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      eos(stream, { readable: reading, writable: writing }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isFS(stream))
          return stream.close(noop);
        if (isRequest(stream))
          return stream.abort();
        if (isFn(stream.destroy))
          return stream.destroy();
        callback(err || new Error("stream was destroyed"));
      };
    };
    var call = function(fn) {
      fn();
    };
    var pipe = function(from, to) {
      return from.pipe(to);
    };
    var pump = function() {
      var streams = Array.prototype.slice.call(arguments);
      var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2)
        throw new Error("pump requires two streams per minimum");
      var error2;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error2)
            error2 = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error2);
        });
      });
      return streams.reduce(pipe);
    };
    module2.exports = pump;
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/get-stream/buffer-stream.js
var require_buffer_stream = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/get-stream/buffer-stream.js"(exports, module2) {
    "use strict";
    var { PassThrough } = require("stream");
    module2.exports = (options) => {
      options = Object.assign({}, options);
      const { array } = options;
      let { encoding } = options;
      const buffer = encoding === "buffer";
      let objectMode = false;
      if (array) {
        objectMode = !(encoding || buffer);
      } else {
        encoding = encoding || "utf8";
      }
      if (buffer) {
        encoding = null;
      }
      let len = 0;
      const ret = [];
      const stream = new PassThrough({ objectMode });
      if (encoding) {
        stream.setEncoding(encoding);
      }
      stream.on("data", (chunk) => {
        ret.push(chunk);
        if (objectMode) {
          len = ret.length;
        } else {
          len += chunk.length;
        }
      });
      stream.getBufferedValue = () => {
        if (array) {
          return ret;
        }
        return buffer ? Buffer.concat(ret, len) : ret.join("");
      };
      stream.getBufferedLength = () => len;
      return stream;
    };
  }
});

// node_modules/windows-release/node_modules/execa/node_modules/get-stream/index.js
var require_get_stream = __commonJS({
  "node_modules/windows-release/node_modules/execa/node_modules/get-stream/index.js"(exports, module2) {
    "use strict";
    var pump = require_pump();
    var bufferStream = require_buffer_stream();
    var MaxBufferError = class extends Error {
      constructor() {
        super("maxBuffer exceeded");
        this.name = "MaxBufferError";
      }
    };
    function getStream(inputStream, options) {
      if (!inputStream) {
        return Promise.reject(new Error("Expected a stream"));
      }
      options = Object.assign({ maxBuffer: Infinity }, options);
      const { maxBuffer } = options;
      let stream;
      return new Promise((resolve, reject) => {
        const rejectPromise = (error2) => {
          if (error2) {
            error2.bufferedData = stream.getBufferedValue();
          }
          reject(error2);
        };
        stream = pump(inputStream, bufferStream(options), (error2) => {
          if (error2) {
            rejectPromise(error2);
            return;
          }
          resolve();
        });
        stream.on("data", () => {
          if (stream.getBufferedLength() > maxBuffer) {
            rejectPromise(new MaxBufferError());
          }
        });
      }).then(() => stream.getBufferedValue());
    }
    module2.exports = getStream;
    module2.exports.buffer = (stream, options) => getStream(stream, Object.assign({}, options, { encoding: "buffer" }));
    module2.exports.array = (stream, options) => getStream(stream, Object.assign({}, options, { array: true }));
    module2.exports.MaxBufferError = MaxBufferError;
  }
});

// node_modules/p-finally/index.js
var require_p_finally = __commonJS({
  "node_modules/p-finally/index.js"(exports, module2) {
    "use strict";
    module2.exports = (promise, onFinally) => {
      onFinally = onFinally || (() => {
      });
      return promise.then(
        (val) => new Promise((resolve) => {
          resolve(onFinally());
        }).then(() => val),
        (err) => new Promise((resolve) => {
          resolve(onFinally());
        }).then(() => {
          throw err;
        })
      );
    };
  }
});

// node_modules/signal-exit/signals.js
var require_signals = __commonJS({
  "node_modules/signal-exit/signals.js"(exports, module2) {
    module2.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module2.exports.push(
        "SIGVTALRM",
        "SIGXCPU",
        "SIGXFSZ",
        "SIGUSR2",
        "SIGTRAP",
        "SIGSYS",
        "SIGQUIT",
        "SIGIOT"
        // should detect profiler and enable/disable accordingly.
        // see #21
        // 'SIGPROF'
      );
    }
    if (process.platform === "linux") {
      module2.exports.push(
        "SIGIO",
        "SIGPOLL",
        "SIGPWR",
        "SIGSTKFLT",
        "SIGUNUSED"
      );
    }
  }
});

// node_modules/signal-exit/index.js
var require_signal_exit = __commonJS({
  "node_modules/signal-exit/index.js"(exports, module2) {
    var process2 = global.process;
    var processOk = function(process3) {
      return process3 && typeof process3 === "object" && typeof process3.removeListener === "function" && typeof process3.emit === "function" && typeof process3.reallyExit === "function" && typeof process3.listeners === "function" && typeof process3.kill === "function" && typeof process3.pid === "number" && typeof process3.on === "function";
    };
    if (!processOk(process2)) {
      module2.exports = function() {
        return function() {
        };
      };
    } else {
      assert = require("assert");
      signals = require_signals();
      isWin = /^win/i.test(process2.platform);
      EE = require("events");
      if (typeof EE !== "function") {
        EE = EE.EventEmitter;
      }
      if (process2.__signal_exit_emitter__) {
        emitter = process2.__signal_exit_emitter__;
      } else {
        emitter = process2.__signal_exit_emitter__ = new EE();
        emitter.count = 0;
        emitter.emitted = {};
      }
      if (!emitter.infinite) {
        emitter.setMaxListeners(Infinity);
        emitter.infinite = true;
      }
      module2.exports = function(cb, opts) {
        if (!processOk(global.process)) {
          return function() {
          };
        }
        assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
        if (loaded === false) {
          load();
        }
        var ev = "exit";
        if (opts && opts.alwaysLast) {
          ev = "afterexit";
        }
        var remove = function() {
          emitter.removeListener(ev, cb);
          if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
            unload();
          }
        };
        emitter.on(ev, cb);
        return remove;
      };
      unload = function unload2() {
        if (!loaded || !processOk(global.process)) {
          return;
        }
        loaded = false;
        signals.forEach(function(sig) {
          try {
            process2.removeListener(sig, sigListeners[sig]);
          } catch (er) {
          }
        });
        process2.emit = originalProcessEmit;
        process2.reallyExit = originalProcessReallyExit;
        emitter.count -= 1;
      };
      module2.exports.unload = unload;
      emit = function emit2(event, code, signal) {
        if (emitter.emitted[event]) {
          return;
        }
        emitter.emitted[event] = true;
        emitter.emit(event, code, signal);
      };
      sigListeners = {};
      signals.forEach(function(sig) {
        sigListeners[sig] = function listener() {
          if (!processOk(global.process)) {
            return;
          }
          var listeners = process2.listeners(sig);
          if (listeners.length === emitter.count) {
            unload();
            emit("exit", null, sig);
            emit("afterexit", null, sig);
            if (isWin && sig === "SIGHUP") {
              sig = "SIGINT";
            }
            process2.kill(process2.pid, sig);
          }
        };
      });
      module2.exports.signals = function() {
        return signals;
      };
      loaded = false;
      load = function load2() {
        if (loaded || !processOk(global.process)) {
          return;
        }
        loaded = true;
        emitter.count += 1;
        signals = signals.filter(function(sig) {
          try {
            process2.on(sig, sigListeners[sig]);
            return true;
          } catch (er) {
            return false;
          }
        });
        process2.emit = processEmit;
        process2.reallyExit = processReallyExit;
      };
      module2.exports.load = load;
      originalProcessReallyExit = process2.reallyExit;
      processReallyExit = function processReallyExit2(code) {
        if (!processOk(global.process)) {
          return;
        }
        process2.exitCode = code || /* istanbul ignore next */
        0;
        emit("exit", process2.exitCode, null);
        emit("afterexit", process2.exitCode, null);
        originalProcessReallyExit.call(process2, process2.exitCode);
      };
      originalProcessEmit = process2.emit;
      processEmit = function processEmit2(ev, arg) {
        if (ev === "exit" && processOk(global.process)) {
          if (arg !== void 0) {
            process2.exitCode = arg;
          }
          var ret = originalProcessEmit.apply(this, arguments);
          emit("exit", process2.exitCode, null);
          emit("afterexit", process2.exitCode, null);
          return ret;
        } else {
          return originalProcessEmit.apply(this, arguments);
        }
      };
    }
    var assert;
    var signals;
    var isWin;
    var EE;
    var emitter;
    var unload;
    var emit;
    var sigListeners;
    var loaded;
    var load;
    var originalProcessReallyExit;
    var processReallyExit;
    var originalProcessEmit;
    var processEmit;
  }
});

// node_modules/windows-release/node_modules/execa/lib/errname.js
var require_errname = __commonJS({
  "node_modules/windows-release/node_modules/execa/lib/errname.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var uv;
    if (typeof util.getSystemErrorName === "function") {
      module2.exports = util.getSystemErrorName;
    } else {
      try {
        uv = process.binding("uv");
        if (typeof uv.errname !== "function") {
          throw new TypeError("uv.errname is not a function");
        }
      } catch (err) {
        console.error("execa/lib/errname: unable to establish process.binding('uv')", err);
        uv = null;
      }
      module2.exports = (code) => errname(uv, code);
    }
    module2.exports.__test__ = errname;
    function errname(uv2, code) {
      if (uv2) {
        return uv2.errname(code);
      }
      if (!(code < 0)) {
        throw new Error("err >= 0");
      }
      return `Unknown system error ${code}`;
    }
  }
});

// node_modules/windows-release/node_modules/execa/lib/stdio.js
var require_stdio = __commonJS({
  "node_modules/windows-release/node_modules/execa/lib/stdio.js"(exports, module2) {
    "use strict";
    var alias = ["stdin", "stdout", "stderr"];
    var hasAlias = (opts) => alias.some((x) => Boolean(opts[x]));
    module2.exports = (opts) => {
      if (!opts) {
        return null;
      }
      if (opts.stdio && hasAlias(opts)) {
        throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${alias.map((x) => `\`${x}\``).join(", ")}`);
      }
      if (typeof opts.stdio === "string") {
        return opts.stdio;
      }
      const stdio = opts.stdio || [];
      if (!Array.isArray(stdio)) {
        throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
      }
      const result = [];
      const len = Math.max(stdio.length, alias.length);
      for (let i = 0; i < len; i++) {
        let value = null;
        if (stdio[i] !== void 0) {
          value = stdio[i];
        } else if (opts[alias[i]] !== void 0) {
          value = opts[alias[i]];
        }
        result[i] = value;
      }
      return result;
    };
  }
});

// node_modules/windows-release/node_modules/execa/index.js
var require_execa = __commonJS({
  "node_modules/windows-release/node_modules/execa/index.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var childProcess = require("child_process");
    var crossSpawn = require_cross_spawn();
    var stripEof = require_strip_eof();
    var npmRunPath = require_npm_run_path();
    var isStream = require_is_stream();
    var _getStream = require_get_stream();
    var pFinally = require_p_finally();
    var onExit = require_signal_exit();
    var errname = require_errname();
    var stdio = require_stdio();
    var TEN_MEGABYTES = 1e3 * 1e3 * 10;
    function handleArgs(cmd, args, opts) {
      let parsed;
      opts = Object.assign({
        extendEnv: true,
        env: {}
      }, opts);
      if (opts.extendEnv) {
        opts.env = Object.assign({}, process.env, opts.env);
      }
      if (opts.__winShell === true) {
        delete opts.__winShell;
        parsed = {
          command: cmd,
          args,
          options: opts,
          file: cmd,
          original: {
            cmd,
            args
          }
        };
      } else {
        parsed = crossSpawn._parse(cmd, args, opts);
      }
      opts = Object.assign({
        maxBuffer: TEN_MEGABYTES,
        buffer: true,
        stripEof: true,
        preferLocal: true,
        localDir: parsed.options.cwd || process.cwd(),
        encoding: "utf8",
        reject: true,
        cleanup: true
      }, parsed.options);
      opts.stdio = stdio(opts);
      if (opts.preferLocal) {
        opts.env = npmRunPath.env(Object.assign({}, opts, { cwd: opts.localDir }));
      }
      if (opts.detached) {
        opts.cleanup = false;
      }
      if (process.platform === "win32" && path.basename(parsed.command) === "cmd.exe") {
        parsed.args.unshift("/q");
      }
      return {
        cmd: parsed.command,
        args: parsed.args,
        opts,
        parsed
      };
    }
    function handleInput(spawned, input) {
      if (input === null || input === void 0) {
        return;
      }
      if (isStream(input)) {
        input.pipe(spawned.stdin);
      } else {
        spawned.stdin.end(input);
      }
    }
    function handleOutput(opts, val) {
      if (val && opts.stripEof) {
        val = stripEof(val);
      }
      return val;
    }
    function handleShell(fn, cmd, opts) {
      let file = "/bin/sh";
      let args = ["-c", cmd];
      opts = Object.assign({}, opts);
      if (process.platform === "win32") {
        opts.__winShell = true;
        file = process.env.comspec || "cmd.exe";
        args = ["/s", "/c", `"${cmd}"`];
        opts.windowsVerbatimArguments = true;
      }
      if (opts.shell) {
        file = opts.shell;
        delete opts.shell;
      }
      return fn(file, args, opts);
    }
    function getStream(process2, stream, { encoding, buffer, maxBuffer }) {
      if (!process2[stream]) {
        return null;
      }
      let ret;
      if (!buffer) {
        ret = new Promise((resolve, reject) => {
          process2[stream].once("end", resolve).once("error", reject);
        });
      } else if (encoding) {
        ret = _getStream(process2[stream], {
          encoding,
          maxBuffer
        });
      } else {
        ret = _getStream.buffer(process2[stream], { maxBuffer });
      }
      return ret.catch((err) => {
        err.stream = stream;
        err.message = `${stream} ${err.message}`;
        throw err;
      });
    }
    function makeError(result, options) {
      const { stdout, stderr } = result;
      let err = result.error;
      const { code, signal } = result;
      const { parsed, joinedCmd } = options;
      const timedOut = options.timedOut || false;
      if (!err) {
        let output = "";
        if (Array.isArray(parsed.opts.stdio)) {
          if (parsed.opts.stdio[2] !== "inherit") {
            output += output.length > 0 ? stderr : `
${stderr}`;
          }
          if (parsed.opts.stdio[1] !== "inherit") {
            output += `
${stdout}`;
          }
        } else if (parsed.opts.stdio !== "inherit") {
          output = `
${stderr}${stdout}`;
        }
        err = new Error(`Command failed: ${joinedCmd}${output}`);
        err.code = code < 0 ? errname(code) : code;
      }
      err.stdout = stdout;
      err.stderr = stderr;
      err.failed = true;
      err.signal = signal || null;
      err.cmd = joinedCmd;
      err.timedOut = timedOut;
      return err;
    }
    function joinCmd(cmd, args) {
      let joinedCmd = cmd;
      if (Array.isArray(args) && args.length > 0) {
        joinedCmd += " " + args.join(" ");
      }
      return joinedCmd;
    }
    module2.exports = (cmd, args, opts) => {
      const parsed = handleArgs(cmd, args, opts);
      const { encoding, buffer, maxBuffer } = parsed.opts;
      const joinedCmd = joinCmd(cmd, args);
      let spawned;
      try {
        spawned = childProcess.spawn(parsed.cmd, parsed.args, parsed.opts);
      } catch (err) {
        return Promise.reject(err);
      }
      let removeExitHandler;
      if (parsed.opts.cleanup) {
        removeExitHandler = onExit(() => {
          spawned.kill();
        });
      }
      let timeoutId = null;
      let timedOut = false;
      const cleanup = () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
          timeoutId = null;
        }
        if (removeExitHandler) {
          removeExitHandler();
        }
      };
      if (parsed.opts.timeout > 0) {
        timeoutId = setTimeout(() => {
          timeoutId = null;
          timedOut = true;
          spawned.kill(parsed.opts.killSignal);
        }, parsed.opts.timeout);
      }
      const processDone = new Promise((resolve) => {
        spawned.on("exit", (code, signal) => {
          cleanup();
          resolve({ code, signal });
        });
        spawned.on("error", (err) => {
          cleanup();
          resolve({ error: err });
        });
        if (spawned.stdin) {
          spawned.stdin.on("error", (err) => {
            cleanup();
            resolve({ error: err });
          });
        }
      });
      function destroy() {
        if (spawned.stdout) {
          spawned.stdout.destroy();
        }
        if (spawned.stderr) {
          spawned.stderr.destroy();
        }
      }
      const handlePromise = () => pFinally(Promise.all([
        processDone,
        getStream(spawned, "stdout", { encoding, buffer, maxBuffer }),
        getStream(spawned, "stderr", { encoding, buffer, maxBuffer })
      ]).then((arr) => {
        const result = arr[0];
        result.stdout = arr[1];
        result.stderr = arr[2];
        if (result.error || result.code !== 0 || result.signal !== null) {
          const err = makeError(result, {
            joinedCmd,
            parsed,
            timedOut
          });
          err.killed = err.killed || spawned.killed;
          if (!parsed.opts.reject) {
            return err;
          }
          throw err;
        }
        return {
          stdout: handleOutput(parsed.opts, result.stdout),
          stderr: handleOutput(parsed.opts, result.stderr),
          code: 0,
          failed: false,
          killed: false,
          signal: null,
          cmd: joinedCmd,
          timedOut: false
        };
      }), destroy);
      crossSpawn._enoent.hookChildProcess(spawned, parsed.parsed);
      handleInput(spawned, parsed.opts.input);
      spawned.then = (onfulfilled, onrejected) => handlePromise().then(onfulfilled, onrejected);
      spawned.catch = (onrejected) => handlePromise().catch(onrejected);
      return spawned;
    };
    module2.exports.stdout = (...args) => module2.exports(...args).then((x) => x.stdout);
    module2.exports.stderr = (...args) => module2.exports(...args).then((x) => x.stderr);
    module2.exports.shell = (cmd, opts) => handleShell(module2.exports, cmd, opts);
    module2.exports.sync = (cmd, args, opts) => {
      const parsed = handleArgs(cmd, args, opts);
      const joinedCmd = joinCmd(cmd, args);
      if (isStream(parsed.opts.input)) {
        throw new TypeError("The `input` option cannot be a stream in sync mode");
      }
      const result = childProcess.spawnSync(parsed.cmd, parsed.args, parsed.opts);
      result.code = result.status;
      if (result.error || result.status !== 0 || result.signal !== null) {
        const err = makeError(result, {
          joinedCmd,
          parsed
        });
        if (!parsed.opts.reject) {
          return err;
        }
        throw err;
      }
      return {
        stdout: handleOutput(parsed.opts, result.stdout),
        stderr: handleOutput(parsed.opts, result.stderr),
        code: 0,
        failed: false,
        signal: null,
        cmd: joinedCmd,
        timedOut: false
      };
    };
    module2.exports.shellSync = (cmd, opts) => handleShell(module2.exports.sync, cmd, opts);
  }
});

// node_modules/windows-release/index.js
var require_windows_release = __commonJS({
  "node_modules/windows-release/index.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var execa = require_execa();
    var names = /* @__PURE__ */ new Map([
      ["10.0", "10"],
      ["6.3", "8.1"],
      ["6.2", "8"],
      ["6.1", "7"],
      ["6.0", "Vista"],
      ["5.2", "Server 2003"],
      ["5.1", "XP"],
      ["5.0", "2000"],
      ["4.9", "ME"],
      ["4.1", "98"],
      ["4.0", "95"]
    ]);
    var windowsRelease = (release) => {
      const version2 = /\d+\.\d/.exec(release || os.release());
      if (release && !version2) {
        throw new Error("`release` argument doesn't match `n.n`");
      }
      const ver = (version2 || [])[0];
      if ((!release || release === os.release()) && ["6.1", "6.2", "6.3", "10.0"].includes(ver)) {
        let stdout;
        try {
          stdout = execa.sync("wmic", ["os", "get", "Caption"]).stdout || "";
        } catch (_) {
          stdout = execa.sync("powershell", ["(Get-CimInstance -ClassName Win32_OperatingSystem).caption"]).stdout || "";
        }
        const year = (stdout.match(/2008|2012|2016|2019/) || [])[0];
        if (year) {
          return `Server ${year}`;
        }
      }
      return names.get(ver);
    };
    module2.exports = windowsRelease;
  }
});

// node_modules/os-name/index.js
var require_os_name = __commonJS({
  "node_modules/os-name/index.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var macosRelease = require_macos_release();
    var winRelease = require_windows_release();
    var osName = (platform, release) => {
      if (!platform && release) {
        throw new Error("You can't specify a `release` without specifying `platform`");
      }
      platform = platform || os.platform();
      let id;
      if (platform === "darwin") {
        if (!release && os.platform() === "darwin") {
          release = os.release();
        }
        const prefix = release ? Number(release.split(".")[0]) > 15 ? "macOS" : "OS X" : "macOS";
        id = release ? macosRelease(release).name : "";
        return prefix + (id ? " " + id : "");
      }
      if (platform === "linux") {
        if (!release && os.platform() === "linux") {
          release = os.release();
        }
        id = release ? release.replace(/^(\d+\.\d+).*/, "$1") : "";
        return "Linux" + (id ? " " + id : "");
      }
      if (platform === "win32") {
        if (!release && os.platform() === "win32") {
          release = os.release();
        }
        id = release ? winRelease(release) : "";
        return "Windows" + (id ? " " + id : "");
      }
      return platform;
    };
    module2.exports = osName;
  }
});

// node_modules/@octokit/rest/node_modules/universal-user-agent/dist-node/index.js
var require_dist_node9 = __commonJS({
  "node_modules/@octokit/rest/node_modules/universal-user-agent/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var osName = _interopDefault(require_os_name());
    function getUserAgent2() {
      try {
        return `Node.js/${process.version.substr(1)} (${osName()}; ${process.arch})`;
      } catch (error2) {
        if (/wmic os get Caption/.test(error2.message)) {
          return "Windows <version undetectable>";
        }
        throw error2;
      }
    }
    exports.getUserAgent = getUserAgent2;
  }
});

// node_modules/@octokit/rest/package.json
var require_package = __commonJS({
  "node_modules/@octokit/rest/package.json"(exports, module2) {
    module2.exports = {
      name: "@octokit/rest",
      version: "16.43.2",
      publishConfig: {
        access: "public"
      },
      description: "GitHub REST API client for Node.js",
      keywords: [
        "octokit",
        "github",
        "rest",
        "api-client"
      ],
      author: "Gregor Martynus (https://github.com/gr2m)",
      contributors: [
        {
          name: "Mike de Boer",
          email: "info@mikedeboer.nl"
        },
        {
          name: "Fabian Jakobs",
          email: "fabian@c9.io"
        },
        {
          name: "Joe Gallo",
          email: "joe@brassafrax.com"
        },
        {
          name: "Gregor Martynus",
          url: "https://github.com/gr2m"
        }
      ],
      repository: "https://github.com/octokit/rest.js",
      dependencies: {
        "@octokit/auth-token": "^2.4.0",
        "@octokit/plugin-paginate-rest": "^1.1.1",
        "@octokit/plugin-request-log": "^1.0.0",
        "@octokit/plugin-rest-endpoint-methods": "2.4.0",
        "@octokit/request": "^5.2.0",
        "@octokit/request-error": "^1.0.2",
        "atob-lite": "^2.0.0",
        "before-after-hook": "^2.0.0",
        "btoa-lite": "^1.0.0",
        deprecation: "^2.0.0",
        "lodash.get": "^4.4.2",
        "lodash.set": "^4.3.2",
        "lodash.uniq": "^4.5.0",
        "octokit-pagination-methods": "^1.1.0",
        once: "^1.4.0",
        "universal-user-agent": "^4.0.0"
      },
      devDependencies: {
        "@gimenete/type-writer": "^0.1.3",
        "@octokit/auth": "^1.1.1",
        "@octokit/fixtures-server": "^5.0.6",
        "@octokit/graphql": "^4.2.0",
        "@types/node": "^13.1.0",
        bundlesize: "^0.18.0",
        chai: "^4.1.2",
        "compression-webpack-plugin": "^3.1.0",
        cypress: "^4.0.0",
        glob: "^7.1.2",
        "http-proxy-agent": "^4.0.0",
        "lodash.camelcase": "^4.3.0",
        "lodash.merge": "^4.6.1",
        "lodash.upperfirst": "^4.3.1",
        lolex: "^6.0.0",
        mkdirp: "^1.0.0",
        mocha: "^7.0.1",
        mustache: "^4.0.0",
        nock: "^11.3.3",
        "npm-run-all": "^4.1.2",
        nyc: "^15.0.0",
        prettier: "^1.14.2",
        proxy: "^1.0.0",
        "semantic-release": "^17.0.0",
        sinon: "^8.0.0",
        "sinon-chai": "^3.0.0",
        "sort-keys": "^4.0.0",
        "string-to-arraybuffer": "^1.0.0",
        "string-to-jsdoc-comment": "^1.0.0",
        typescript: "^3.3.1",
        webpack: "^4.0.0",
        "webpack-bundle-analyzer": "^3.0.0",
        "webpack-cli": "^3.0.0"
      },
      types: "index.d.ts",
      scripts: {
        coverage: "nyc report --reporter=html && open coverage/index.html",
        lint: "prettier --check '{lib,plugins,scripts,test}/**/*.{js,json,ts}' 'docs/*.{js,json}' 'docs/src/**/*' index.js README.md package.json",
        "lint:fix": "prettier --write '{lib,plugins,scripts,test}/**/*.{js,json,ts}' 'docs/*.{js,json}' 'docs/src/**/*' index.js README.md package.json",
        pretest: "npm run -s lint",
        test: 'nyc mocha test/mocha-node-setup.js "test/*/**/*-test.js"',
        "test:browser": "cypress run --browser chrome",
        build: "npm-run-all build:*",
        "build:ts": "npm run -s update-endpoints:typescript",
        "prebuild:browser": "mkdirp dist/",
        "build:browser": "npm-run-all build:browser:*",
        "build:browser:development": "webpack --mode development --entry . --output-library=Octokit --output=./dist/octokit-rest.js --profile --json > dist/bundle-stats.json",
        "build:browser:production": "webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=Octokit --output-path=./dist --output-filename=octokit-rest.min.js --devtool source-map",
        "generate-bundle-report": "webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html",
        "update-endpoints": "npm-run-all update-endpoints:*",
        "update-endpoints:fetch-json": "node scripts/update-endpoints/fetch-json",
        "update-endpoints:typescript": "node scripts/update-endpoints/typescript",
        "prevalidate:ts": "npm run -s build:ts",
        "validate:ts": "tsc --target es6 --noImplicitAny index.d.ts",
        "postvalidate:ts": "tsc --noEmit --target es6 test/typescript-validate.ts",
        "start-fixtures-server": "octokit-fixtures-server"
      },
      license: "MIT",
      files: [
        "index.js",
        "index.d.ts",
        "lib",
        "plugins"
      ],
      nyc: {
        ignore: [
          "test"
        ]
      },
      release: {
        publish: [
          "@semantic-release/npm",
          {
            path: "@semantic-release/github",
            assets: [
              "dist/*",
              "!dist/*.map.gz"
            ]
          }
        ]
      },
      bundlesize: [
        {
          path: "./dist/octokit-rest.min.js.gz",
          maxSize: "33 kB"
        }
      ]
    };
  }
});

// node_modules/@octokit/rest/lib/parse-client-options.js
var require_parse_client_options = __commonJS({
  "node_modules/@octokit/rest/lib/parse-client-options.js"(exports, module2) {
    module2.exports = parseOptions;
    var { Deprecation } = require_dist_node2();
    var { getUserAgent: getUserAgent2 } = require_dist_node9();
    var once = require_once();
    var pkg = require_package();
    var deprecateOptionsTimeout = once(
      (log, deprecation) => log.warn(deprecation)
    );
    var deprecateOptionsAgent = once((log, deprecation) => log.warn(deprecation));
    var deprecateOptionsHeaders = once(
      (log, deprecation) => log.warn(deprecation)
    );
    function parseOptions(options, log, hook) {
      if (options.headers) {
        options.headers = Object.keys(options.headers).reduce((newObj, key) => {
          newObj[key.toLowerCase()] = options.headers[key];
          return newObj;
        }, {});
      }
      const clientDefaults = {
        headers: options.headers || {},
        request: options.request || {},
        mediaType: {
          previews: [],
          format: ""
        }
      };
      if (options.baseUrl) {
        clientDefaults.baseUrl = options.baseUrl;
      }
      if (options.userAgent) {
        clientDefaults.headers["user-agent"] = options.userAgent;
      }
      if (options.previews) {
        clientDefaults.mediaType.previews = options.previews;
      }
      if (options.timeZone) {
        clientDefaults.headers["time-zone"] = options.timeZone;
      }
      if (options.timeout) {
        deprecateOptionsTimeout(
          log,
          new Deprecation(
            "[@octokit/rest] new Octokit({timeout}) is deprecated. Use {request: {timeout}} instead. See https://github.com/octokit/request.js#request"
          )
        );
        clientDefaults.request.timeout = options.timeout;
      }
      if (options.agent) {
        deprecateOptionsAgent(
          log,
          new Deprecation(
            "[@octokit/rest] new Octokit({agent}) is deprecated. Use {request: {agent}} instead. See https://github.com/octokit/request.js#request"
          )
        );
        clientDefaults.request.agent = options.agent;
      }
      if (options.headers) {
        deprecateOptionsHeaders(
          log,
          new Deprecation(
            "[@octokit/rest] new Octokit({headers}) is deprecated. Use {userAgent, previews} instead. See https://github.com/octokit/request.js#request"
          )
        );
      }
      const userAgentOption = clientDefaults.headers["user-agent"];
      const defaultUserAgent = `octokit.js/${pkg.version} ${getUserAgent2()}`;
      clientDefaults.headers["user-agent"] = [userAgentOption, defaultUserAgent].filter(Boolean).join(" ");
      clientDefaults.request.hook = hook.bind(null, "request");
      return clientDefaults;
    }
  }
});

// node_modules/@octokit/rest/lib/constructor.js
var require_constructor = __commonJS({
  "node_modules/@octokit/rest/lib/constructor.js"(exports, module2) {
    module2.exports = Octokit;
    var { request: request2 } = require_dist_node8();
    var Hook = require_before_after_hook();
    var parseClientOptions = require_parse_client_options();
    function Octokit(plugins, options) {
      options = options || {};
      const hook = new Hook.Collection();
      const log = Object.assign(
        {
          debug: () => {
          },
          info: () => {
          },
          warn: console.warn,
          error: console.error
        },
        options && options.log
      );
      const api = {
        hook,
        log,
        request: request2.defaults(parseClientOptions(options, log, hook))
      };
      plugins.forEach((pluginFunction) => pluginFunction(api, options));
      return api;
    }
  }
});

// node_modules/@octokit/rest/lib/register-plugin.js
var require_register_plugin = __commonJS({
  "node_modules/@octokit/rest/lib/register-plugin.js"(exports, module2) {
    module2.exports = registerPlugin;
    var factory = require_factory();
    function registerPlugin(plugins, pluginFunction) {
      return factory(
        plugins.includes(pluginFunction) ? plugins : plugins.concat(pluginFunction)
      );
    }
  }
});

// node_modules/@octokit/rest/lib/factory.js
var require_factory = __commonJS({
  "node_modules/@octokit/rest/lib/factory.js"(exports, module2) {
    module2.exports = factory;
    var Octokit = require_constructor();
    var registerPlugin = require_register_plugin();
    function factory(plugins) {
      const Api = Octokit.bind(null, plugins || []);
      Api.plugin = registerPlugin.bind(null, plugins || []);
      return Api;
    }
  }
});

// node_modules/@octokit/rest/lib/core.js
var require_core2 = __commonJS({
  "node_modules/@octokit/rest/lib/core.js"(exports, module2) {
    var factory = require_factory();
    module2.exports = factory();
  }
});

// node_modules/@octokit/auth-token/dist-node/index.js
var require_dist_node10 = __commonJS({
  "node_modules/@octokit/auth-token/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
    var REGEX_IS_INSTALLATION = /^ghs_/;
    var REGEX_IS_USER_TO_SERVER = /^ghu_/;
    async function auth(token) {
      const isApp = token.split(/\./).length === 3;
      const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
      const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
      const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
      return {
        type: "token",
        token,
        tokenType
      };
    }
    function withAuthorizationPrefix(token) {
      if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
      }
      return `token ${token}`;
    }
    async function hook(token, request2, route, parameters) {
      const endpoint2 = request2.endpoint.merge(route, parameters);
      endpoint2.headers.authorization = withAuthorizationPrefix(token);
      return request2(endpoint2);
    }
    var createTokenAuth = function createTokenAuth2(token) {
      if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
      }
      if (typeof token !== "string") {
        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
      }
      token = token.replace(/^(token|bearer) +/i, "");
      return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token)
      });
    };
    exports.createTokenAuth = createTokenAuth;
  }
});

// node_modules/btoa-lite/btoa-node.js
var require_btoa_node = __commonJS({
  "node_modules/btoa-lite/btoa-node.js"(exports, module2) {
    module2.exports = function btoa(str) {
      return new Buffer(str).toString("base64");
    };
  }
});

// node_modules/atob-lite/atob-node.js
var require_atob_node = __commonJS({
  "node_modules/atob-lite/atob-node.js"(exports, module2) {
    module2.exports = function atob(str) {
      return Buffer.from(str, "base64").toString("binary");
    };
  }
});

// node_modules/@octokit/rest/plugins/authentication/with-authorization-prefix.js
var require_with_authorization_prefix = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication/with-authorization-prefix.js"(exports, module2) {
    module2.exports = withAuthorizationPrefix;
    var atob = require_atob_node();
    var REGEX_IS_BASIC_AUTH = /^[\w-]+:/;
    function withAuthorizationPrefix(authorization) {
      if (/^(basic|bearer|token) /i.test(authorization)) {
        return authorization;
      }
      try {
        if (REGEX_IS_BASIC_AUTH.test(atob(authorization))) {
          return `basic ${authorization}`;
        }
      } catch (error2) {
      }
      if (authorization.split(/\./).length === 3) {
        return `bearer ${authorization}`;
      }
      return `token ${authorization}`;
    }
  }
});

// node_modules/@octokit/rest/plugins/authentication/before-request.js
var require_before_request = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication/before-request.js"(exports, module2) {
    module2.exports = authenticationBeforeRequest;
    var btoa = require_btoa_node();
    var withAuthorizationPrefix = require_with_authorization_prefix();
    function authenticationBeforeRequest(state, options) {
      if (typeof state.auth === "string") {
        options.headers.authorization = withAuthorizationPrefix(state.auth);
        return;
      }
      if (state.auth.username) {
        const hash = btoa(`${state.auth.username}:${state.auth.password}`);
        options.headers.authorization = `Basic ${hash}`;
        if (state.otp) {
          options.headers["x-github-otp"] = state.otp;
        }
        return;
      }
      if (state.auth.clientId) {
        if (/\/applications\/:?[\w_]+\/tokens\/:?[\w_]+($|\?)/.test(options.url)) {
          const hash = btoa(`${state.auth.clientId}:${state.auth.clientSecret}`);
          options.headers.authorization = `Basic ${hash}`;
          return;
        }
        options.url += options.url.indexOf("?") === -1 ? "?" : "&";
        options.url += `client_id=${state.auth.clientId}&client_secret=${state.auth.clientSecret}`;
        return;
      }
      return Promise.resolve().then(() => {
        return state.auth();
      }).then((authorization) => {
        options.headers.authorization = withAuthorizationPrefix(authorization);
      });
    }
  }
});

// node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node11 = __commonJS({
  "node_modules/@octokit/request-error/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var deprecation = require_dist_node2();
    var once = _interopDefault(require_once());
    var logOnce = once((deprecation2) => console.warn(deprecation2));
    var RequestError2 = class extends Error {
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        Object.defineProperty(this, "code", {
          get() {
            logOnce(new deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
            return statusCode;
          }
        });
        this.headers = options.headers || {};
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
      }
    };
    exports.RequestError = RequestError2;
  }
});

// node_modules/@octokit/rest/plugins/authentication/request-error.js
var require_request_error = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication/request-error.js"(exports, module2) {
    module2.exports = authenticationRequestError;
    var { RequestError: RequestError2 } = require_dist_node11();
    function authenticationRequestError(state, error2, options) {
      if (!error2.headers)
        throw error2;
      const otpRequired = /required/.test(error2.headers["x-github-otp"] || "");
      if (error2.status !== 401 || !otpRequired) {
        throw error2;
      }
      if (error2.status === 401 && otpRequired && error2.request && error2.request.headers["x-github-otp"]) {
        if (state.otp) {
          delete state.otp;
        } else {
          throw new RequestError2(
            "Invalid one-time password for two-factor authentication",
            401,
            {
              headers: error2.headers,
              request: options
            }
          );
        }
      }
      if (typeof state.auth.on2fa !== "function") {
        throw new RequestError2(
          "2FA required, but options.on2fa is not a function. See https://github.com/octokit/rest.js#authentication",
          401,
          {
            headers: error2.headers,
            request: options
          }
        );
      }
      return Promise.resolve().then(() => {
        return state.auth.on2fa();
      }).then((oneTimePassword) => {
        const newOptions = Object.assign(options, {
          headers: Object.assign(options.headers, {
            "x-github-otp": oneTimePassword
          })
        });
        return state.octokit.request(newOptions).then((response) => {
          state.otp = oneTimePassword;
          return response;
        });
      });
    }
  }
});

// node_modules/@octokit/rest/plugins/authentication/validate.js
var require_validate = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication/validate.js"(exports, module2) {
    module2.exports = validateAuth;
    function validateAuth(auth) {
      if (typeof auth === "string") {
        return;
      }
      if (typeof auth === "function") {
        return;
      }
      if (auth.username && auth.password) {
        return;
      }
      if (auth.clientId && auth.clientSecret) {
        return;
      }
      throw new Error(`Invalid "auth" option: ${JSON.stringify(auth)}`);
    }
  }
});

// node_modules/@octokit/rest/plugins/authentication/index.js
var require_authentication = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication/index.js"(exports, module2) {
    module2.exports = authenticationPlugin;
    var { createTokenAuth } = require_dist_node10();
    var { Deprecation } = require_dist_node2();
    var once = require_once();
    var beforeRequest = require_before_request();
    var requestError = require_request_error();
    var validate2 = require_validate();
    var withAuthorizationPrefix = require_with_authorization_prefix();
    var deprecateAuthBasic = once((log, deprecation) => log.warn(deprecation));
    var deprecateAuthObject = once((log, deprecation) => log.warn(deprecation));
    function authenticationPlugin(octokit, options) {
      if (options.authStrategy) {
        const auth = options.authStrategy(options.auth);
        octokit.hook.wrap("request", auth.hook);
        octokit.auth = auth;
        return;
      }
      if (!options.auth) {
        octokit.auth = () => Promise.resolve({
          type: "unauthenticated"
        });
        return;
      }
      const isBasicAuthString = typeof options.auth === "string" && /^basic/.test(withAuthorizationPrefix(options.auth));
      if (typeof options.auth === "string" && !isBasicAuthString) {
        const auth = createTokenAuth(options.auth);
        octokit.hook.wrap("request", auth.hook);
        octokit.auth = auth;
        return;
      }
      const [deprecationMethod, deprecationMessapge] = isBasicAuthString ? [
        deprecateAuthBasic,
        'Setting the "new Octokit({ auth })" option to a Basic Auth string is deprecated. Use https://github.com/octokit/auth-basic.js instead. See (https://octokit.github.io/rest.js/#authentication)'
      ] : [
        deprecateAuthObject,
        'Setting the "new Octokit({ auth })" option to an object without also setting the "authStrategy" option is deprecated and will be removed in v17. See (https://octokit.github.io/rest.js/#authentication)'
      ];
      deprecationMethod(
        octokit.log,
        new Deprecation("[@octokit/rest] " + deprecationMessapge)
      );
      octokit.auth = () => Promise.resolve({
        type: "deprecated",
        message: deprecationMessapge
      });
      validate2(options.auth);
      const state = {
        octokit,
        auth: options.auth
      };
      octokit.hook.before("request", beforeRequest.bind(null, state));
      octokit.hook.error("request", requestError.bind(null, state));
    }
  }
});

// node_modules/@octokit/rest/plugins/authentication-deprecated/authenticate.js
var require_authenticate = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication-deprecated/authenticate.js"(exports, module2) {
    module2.exports = authenticate;
    var { Deprecation } = require_dist_node2();
    var once = require_once();
    var deprecateAuthenticate = once((log, deprecation) => log.warn(deprecation));
    function authenticate(state, options) {
      deprecateAuthenticate(
        state.octokit.log,
        new Deprecation(
          '[@octokit/rest] octokit.authenticate() is deprecated. Use "auth" constructor option instead.'
        )
      );
      if (!options) {
        state.auth = false;
        return;
      }
      switch (options.type) {
        case "basic":
          if (!options.username || !options.password) {
            throw new Error(
              "Basic authentication requires both a username and password to be set"
            );
          }
          break;
        case "oauth":
          if (!options.token && !(options.key && options.secret)) {
            throw new Error(
              "OAuth2 authentication requires a token or key & secret to be set"
            );
          }
          break;
        case "token":
        case "app":
          if (!options.token) {
            throw new Error("Token authentication requires a token to be set");
          }
          break;
        default:
          throw new Error(
            "Invalid authentication type, must be 'basic', 'oauth', 'token' or 'app'"
          );
      }
      state.auth = options;
    }
  }
});

// node_modules/lodash.uniq/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.uniq/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var Set2 = getNative(root, "Set");
    var nativeCreate = getNative(Object, "create");
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseUniq(array, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values) {
      return new Set2(values);
    };
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function uniq(array) {
      return array && array.length ? baseUniq(array) : [];
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function noop() {
    }
    module2.exports = uniq;
  }
});

// node_modules/@octokit/rest/plugins/authentication-deprecated/before-request.js
var require_before_request2 = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication-deprecated/before-request.js"(exports, module2) {
    module2.exports = authenticationBeforeRequest;
    var btoa = require_btoa_node();
    var uniq = require_lodash();
    function authenticationBeforeRequest(state, options) {
      if (!state.auth.type) {
        return;
      }
      if (state.auth.type === "basic") {
        const hash = btoa(`${state.auth.username}:${state.auth.password}`);
        options.headers.authorization = `Basic ${hash}`;
        return;
      }
      if (state.auth.type === "token") {
        options.headers.authorization = `token ${state.auth.token}`;
        return;
      }
      if (state.auth.type === "app") {
        options.headers.authorization = `Bearer ${state.auth.token}`;
        const acceptHeaders = options.headers.accept.split(",").concat("application/vnd.github.machine-man-preview+json");
        options.headers.accept = uniq(acceptHeaders).filter(Boolean).join(",");
        return;
      }
      options.url += options.url.indexOf("?") === -1 ? "?" : "&";
      if (state.auth.token) {
        options.url += `access_token=${encodeURIComponent(state.auth.token)}`;
        return;
      }
      const key = encodeURIComponent(state.auth.key);
      const secret = encodeURIComponent(state.auth.secret);
      options.url += `client_id=${key}&client_secret=${secret}`;
    }
  }
});

// node_modules/@octokit/rest/plugins/authentication-deprecated/request-error.js
var require_request_error2 = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication-deprecated/request-error.js"(exports, module2) {
    module2.exports = authenticationRequestError;
    var { RequestError: RequestError2 } = require_dist_node11();
    function authenticationRequestError(state, error2, options) {
      if (!error2.headers)
        throw error2;
      const otpRequired = /required/.test(error2.headers["x-github-otp"] || "");
      if (error2.status !== 401 || !otpRequired) {
        throw error2;
      }
      if (error2.status === 401 && otpRequired && error2.request && error2.request.headers["x-github-otp"]) {
        throw new RequestError2(
          "Invalid one-time password for two-factor authentication",
          401,
          {
            headers: error2.headers,
            request: options
          }
        );
      }
      if (typeof state.auth.on2fa !== "function") {
        throw new RequestError2(
          "2FA required, but options.on2fa is not a function. See https://github.com/octokit/rest.js#authentication",
          401,
          {
            headers: error2.headers,
            request: options
          }
        );
      }
      return Promise.resolve().then(() => {
        return state.auth.on2fa();
      }).then((oneTimePassword) => {
        const newOptions = Object.assign(options, {
          headers: Object.assign(
            { "x-github-otp": oneTimePassword },
            options.headers
          )
        });
        return state.octokit.request(newOptions);
      });
    }
  }
});

// node_modules/@octokit/rest/plugins/authentication-deprecated/index.js
var require_authentication_deprecated = __commonJS({
  "node_modules/@octokit/rest/plugins/authentication-deprecated/index.js"(exports, module2) {
    module2.exports = authenticationPlugin;
    var { Deprecation } = require_dist_node2();
    var once = require_once();
    var deprecateAuthenticate = once((log, deprecation) => log.warn(deprecation));
    var authenticate = require_authenticate();
    var beforeRequest = require_before_request2();
    var requestError = require_request_error2();
    function authenticationPlugin(octokit, options) {
      if (options.auth) {
        octokit.authenticate = () => {
          deprecateAuthenticate(
            octokit.log,
            new Deprecation(
              '[@octokit/rest] octokit.authenticate() is deprecated and has no effect when "auth" option is set on Octokit constructor'
            )
          );
        };
        return;
      }
      const state = {
        octokit,
        auth: false
      };
      octokit.authenticate = authenticate.bind(null, state);
      octokit.hook.before("request", beforeRequest.bind(null, state));
      octokit.hook.error("request", requestError.bind(null, state));
    }
  }
});

// node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node12 = __commonJS({
  "node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var VERSION4 = "1.1.2";
    var REGEX = [/^\/search\//, /^\/repos\/[^/]+\/[^/]+\/commits\/[^/]+\/(check-runs|check-suites)([^/]|$)/, /^\/installation\/repositories([^/]|$)/, /^\/user\/installations([^/]|$)/, /^\/repos\/[^/]+\/[^/]+\/actions\/secrets([^/]|$)/, /^\/repos\/[^/]+\/[^/]+\/actions\/workflows(\/[^/]+\/runs)?([^/]|$)/, /^\/repos\/[^/]+\/[^/]+\/actions\/runs(\/[^/]+\/(artifacts|jobs))?([^/]|$)/];
    function normalizePaginatedListResponse(octokit, url, response) {
      const path = url.replace(octokit.request.endpoint.DEFAULTS.baseUrl, "");
      const responseNeedsNormalization = REGEX.find((regex) => regex.test(path));
      if (!responseNeedsNormalization)
        return;
      const incompleteResults = response.data.incomplete_results;
      const repositorySelection = response.data.repository_selection;
      const totalCount = response.data.total_count;
      delete response.data.incomplete_results;
      delete response.data.repository_selection;
      delete response.data.total_count;
      const namespaceKey = Object.keys(response.data)[0];
      const data = response.data[namespaceKey];
      response.data = data;
      if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
      }
      if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
      }
      response.data.total_count = totalCount;
      Object.defineProperty(response.data, namespaceKey, {
        get() {
          octokit.log.warn(`[@octokit/paginate-rest] "response.data.${namespaceKey}" is deprecated for "GET ${path}". Get the results directly from "response.data"`);
          return Array.from(data);
        }
      });
    }
    function iterator(octokit, route, parameters) {
      const options = octokit.request.endpoint(route, parameters);
      const method = options.method;
      const headers = options.headers;
      let url = options.url;
      return {
        [Symbol.asyncIterator]: () => ({
          next() {
            if (!url) {
              return Promise.resolve({
                done: true
              });
            }
            return octokit.request({
              method,
              url,
              headers
            }).then((response) => {
              normalizePaginatedListResponse(octokit, url, response);
              url = ((response.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
              return {
                value: response
              };
            });
          }
        })
      };
    }
    function paginate(octokit, route, parameters, mapFn) {
      if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = void 0;
      }
      return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
    }
    function gather(octokit, results, iterator2, mapFn) {
      return iterator2.next().then((result) => {
        if (result.done) {
          return results;
        }
        let earlyExit = false;
        function done() {
          earlyExit = true;
        }
        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
        if (earlyExit) {
          return results;
        }
        return gather(octokit, results, iterator2, mapFn);
      });
    }
    function paginateRest(octokit) {
      return {
        paginate: Object.assign(paginate.bind(null, octokit), {
          iterator: iterator.bind(null, octokit)
        })
      };
    }
    paginateRest.VERSION = VERSION4;
    exports.paginateRest = paginateRest;
  }
});

// node_modules/@octokit/rest/plugins/pagination/index.js
var require_pagination = __commonJS({
  "node_modules/@octokit/rest/plugins/pagination/index.js"(exports, module2) {
    module2.exports = paginatePlugin;
    var { paginateRest } = require_dist_node12();
    function paginatePlugin(octokit) {
      Object.assign(octokit, paginateRest(octokit));
    }
  }
});

// node_modules/lodash.get/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.get/index.js"(exports, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module2.exports = get;
  }
});

// node_modules/lodash.set/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.set/index.js"(exports, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        object[key] = value;
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseSet(object, path, value, customizer) {
      if (!isObject2(object)) {
        return object;
      }
      path = isKey(path, object) ? [path] : castPath(path);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path[index]), newValue = value;
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }
    module2.exports = set;
  }
});

// node_modules/@octokit/rest/plugins/validate/validate.js
var require_validate2 = __commonJS({
  "node_modules/@octokit/rest/plugins/validate/validate.js"(exports, module2) {
    "use strict";
    module2.exports = validate2;
    var { RequestError: RequestError2 } = require_dist_node11();
    var get = require_lodash2();
    var set = require_lodash3();
    function validate2(octokit, options) {
      if (!options.request.validate) {
        return;
      }
      const { validate: params } = options.request;
      Object.keys(params).forEach((parameterName) => {
        const parameter = get(params, parameterName);
        const expectedType = parameter.type;
        let parentParameterName;
        let parentValue;
        let parentParamIsPresent = true;
        let parentParameterIsArray = false;
        if (/\./.test(parameterName)) {
          parentParameterName = parameterName.replace(/\.[^.]+$/, "");
          parentParameterIsArray = parentParameterName.slice(-2) === "[]";
          if (parentParameterIsArray) {
            parentParameterName = parentParameterName.slice(0, -2);
          }
          parentValue = get(options, parentParameterName);
          parentParamIsPresent = parentParameterName === "headers" || typeof parentValue === "object" && parentValue !== null;
        }
        const values = parentParameterIsArray ? (get(options, parentParameterName) || []).map(
          (value) => value[parameterName.split(/\./).pop()]
        ) : [get(options, parameterName)];
        values.forEach((value, i) => {
          const valueIsPresent = typeof value !== "undefined";
          const valueIsNull = value === null;
          const currentParameterName = parentParameterIsArray ? parameterName.replace(/\[\]/, `[${i}]`) : parameterName;
          if (!parameter.required && !valueIsPresent) {
            return;
          }
          if (!parentParamIsPresent) {
            return;
          }
          if (parameter.allowNull && valueIsNull) {
            return;
          }
          if (!parameter.allowNull && valueIsNull) {
            throw new RequestError2(
              `'${currentParameterName}' cannot be null`,
              400,
              {
                request: options
              }
            );
          }
          if (parameter.required && !valueIsPresent) {
            throw new RequestError2(
              `Empty value for parameter '${currentParameterName}': ${JSON.stringify(
                value
              )}`,
              400,
              {
                request: options
              }
            );
          }
          if (expectedType === "integer") {
            const unparsedValue = value;
            value = parseInt(value, 10);
            if (isNaN(value)) {
              throw new RequestError2(
                `Invalid value for parameter '${currentParameterName}': ${JSON.stringify(
                  unparsedValue
                )} is NaN`,
                400,
                {
                  request: options
                }
              );
            }
          }
          if (parameter.enum && parameter.enum.indexOf(String(value)) === -1) {
            throw new RequestError2(
              `Invalid value for parameter '${currentParameterName}': ${JSON.stringify(
                value
              )}`,
              400,
              {
                request: options
              }
            );
          }
          if (parameter.validation) {
            const regex = new RegExp(parameter.validation);
            if (!regex.test(value)) {
              throw new RequestError2(
                `Invalid value for parameter '${currentParameterName}': ${JSON.stringify(
                  value
                )}`,
                400,
                {
                  request: options
                }
              );
            }
          }
          if (expectedType === "object" && typeof value === "string") {
            try {
              value = JSON.parse(value);
            } catch (exception) {
              throw new RequestError2(
                `JSON parse error of value for parameter '${currentParameterName}': ${JSON.stringify(
                  value
                )}`,
                400,
                {
                  request: options
                }
              );
            }
          }
          set(options, parameter.mapTo || currentParameterName, value);
        });
      });
      return options;
    }
  }
});

// node_modules/@octokit/rest/plugins/validate/index.js
var require_validate3 = __commonJS({
  "node_modules/@octokit/rest/plugins/validate/index.js"(exports, module2) {
    module2.exports = octokitValidate;
    var validate2 = require_validate2();
    function octokitValidate(octokit) {
      octokit.hook.before("request", validate2.bind(null, octokit));
    }
  }
});

// node_modules/octokit-pagination-methods/lib/deprecate.js
var require_deprecate = __commonJS({
  "node_modules/octokit-pagination-methods/lib/deprecate.js"(exports, module2) {
    module2.exports = deprecate;
    var loggedMessages = {};
    function deprecate(message) {
      if (loggedMessages[message]) {
        return;
      }
      console.warn(`DEPRECATED (@octokit/rest): ${message}`);
      loggedMessages[message] = 1;
    }
  }
});

// node_modules/octokit-pagination-methods/lib/get-page-links.js
var require_get_page_links = __commonJS({
  "node_modules/octokit-pagination-methods/lib/get-page-links.js"(exports, module2) {
    module2.exports = getPageLinks;
    function getPageLinks(link) {
      link = link.link || link.headers.link || "";
      const links = {};
      link.replace(/<([^>]*)>;\s*rel="([\w]*)"/g, (m, uri, type) => {
        links[type] = uri;
      });
      return links;
    }
  }
});

// node_modules/octokit-pagination-methods/lib/http-error.js
var require_http_error = __commonJS({
  "node_modules/octokit-pagination-methods/lib/http-error.js"(exports, module2) {
    module2.exports = class HttpError extends Error {
      constructor(message, code, headers) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.code = code;
        this.headers = headers;
      }
    };
  }
});

// node_modules/octokit-pagination-methods/lib/get-page.js
var require_get_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/get-page.js"(exports, module2) {
    module2.exports = getPage;
    var deprecate = require_deprecate();
    var getPageLinks = require_get_page_links();
    var HttpError = require_http_error();
    function getPage(octokit, link, which, headers) {
      deprecate(`octokit.get${which.charAt(0).toUpperCase() + which.slice(1)}Page() \u2013 You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`);
      const url = getPageLinks(link)[which];
      if (!url) {
        const urlError = new HttpError(`No ${which} page found`, 404);
        return Promise.reject(urlError);
      }
      const requestOptions = {
        url,
        headers: applyAcceptHeader(link, headers)
      };
      const promise = octokit.request(requestOptions);
      return promise;
    }
    function applyAcceptHeader(res, headers) {
      const previous = res.headers && res.headers["x-github-media-type"];
      if (!previous || headers && headers.accept) {
        return headers;
      }
      headers = headers || {};
      headers.accept = "application/vnd." + previous.replace("; param=", ".").replace("; format=", "+");
      return headers;
    }
  }
});

// node_modules/octokit-pagination-methods/lib/get-first-page.js
var require_get_first_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/get-first-page.js"(exports, module2) {
    module2.exports = getFirstPage;
    var getPage = require_get_page();
    function getFirstPage(octokit, link, headers) {
      return getPage(octokit, link, "first", headers);
    }
  }
});

// node_modules/octokit-pagination-methods/lib/get-last-page.js
var require_get_last_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/get-last-page.js"(exports, module2) {
    module2.exports = getLastPage;
    var getPage = require_get_page();
    function getLastPage(octokit, link, headers) {
      return getPage(octokit, link, "last", headers);
    }
  }
});

// node_modules/octokit-pagination-methods/lib/get-next-page.js
var require_get_next_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/get-next-page.js"(exports, module2) {
    module2.exports = getNextPage;
    var getPage = require_get_page();
    function getNextPage(octokit, link, headers) {
      return getPage(octokit, link, "next", headers);
    }
  }
});

// node_modules/octokit-pagination-methods/lib/get-previous-page.js
var require_get_previous_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/get-previous-page.js"(exports, module2) {
    module2.exports = getPreviousPage;
    var getPage = require_get_page();
    function getPreviousPage(octokit, link, headers) {
      return getPage(octokit, link, "prev", headers);
    }
  }
});

// node_modules/octokit-pagination-methods/lib/has-first-page.js
var require_has_first_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/has-first-page.js"(exports, module2) {
    module2.exports = hasFirstPage;
    var deprecate = require_deprecate();
    var getPageLinks = require_get_page_links();
    function hasFirstPage(link) {
      deprecate(`octokit.hasFirstPage() \u2013 You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`);
      return getPageLinks(link).first;
    }
  }
});

// node_modules/octokit-pagination-methods/lib/has-last-page.js
var require_has_last_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/has-last-page.js"(exports, module2) {
    module2.exports = hasLastPage;
    var deprecate = require_deprecate();
    var getPageLinks = require_get_page_links();
    function hasLastPage(link) {
      deprecate(`octokit.hasLastPage() \u2013 You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`);
      return getPageLinks(link).last;
    }
  }
});

// node_modules/octokit-pagination-methods/lib/has-next-page.js
var require_has_next_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/has-next-page.js"(exports, module2) {
    module2.exports = hasNextPage;
    var deprecate = require_deprecate();
    var getPageLinks = require_get_page_links();
    function hasNextPage(link) {
      deprecate(`octokit.hasNextPage() \u2013 You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`);
      return getPageLinks(link).next;
    }
  }
});

// node_modules/octokit-pagination-methods/lib/has-previous-page.js
var require_has_previous_page = __commonJS({
  "node_modules/octokit-pagination-methods/lib/has-previous-page.js"(exports, module2) {
    module2.exports = hasPreviousPage;
    var deprecate = require_deprecate();
    var getPageLinks = require_get_page_links();
    function hasPreviousPage(link) {
      deprecate(`octokit.hasPreviousPage() \u2013 You can use octokit.paginate or async iterators instead: https://github.com/octokit/rest.js#pagination.`);
      return getPageLinks(link).prev;
    }
  }
});

// node_modules/octokit-pagination-methods/index.js
var require_octokit_pagination_methods = __commonJS({
  "node_modules/octokit-pagination-methods/index.js"(exports, module2) {
    module2.exports = paginationMethodsPlugin;
    function paginationMethodsPlugin(octokit) {
      octokit.getFirstPage = require_get_first_page().bind(null, octokit);
      octokit.getLastPage = require_get_last_page().bind(null, octokit);
      octokit.getNextPage = require_get_next_page().bind(null, octokit);
      octokit.getPreviousPage = require_get_previous_page().bind(null, octokit);
      octokit.hasFirstPage = require_has_first_page();
      octokit.hasLastPage = require_has_last_page();
      octokit.hasNextPage = require_has_next_page();
      octokit.hasPreviousPage = require_has_previous_page();
    }
  }
});

// node_modules/@octokit/rest/index.js
var require_rest = __commonJS({
  "node_modules/@octokit/rest/index.js"(exports, module2) {
    var { requestLog } = require_dist_node();
    var {
      restEndpointMethods
    } = require_dist_node3();
    var Core = require_core2();
    var CORE_PLUGINS = [
      require_authentication(),
      require_authentication_deprecated(),
      // deprecated: remove in v17
      requestLog,
      require_pagination(),
      restEndpointMethods,
      require_validate3(),
      require_octokit_pagination_methods()
      // deprecated: remove in v17
    ];
    var OctokitRest = Core.plugin(CORE_PLUGINS);
    function DeprecatedOctokit(options) {
      const warn = options && options.log && options.log.warn ? options.log.warn : console.warn;
      warn(
        '[@octokit/rest] `const Octokit = require("@octokit/rest")` is deprecated. Use `const { Octokit } = require("@octokit/rest")` instead'
      );
      return new OctokitRest(options);
    }
    var Octokit = Object.assign(DeprecatedOctokit, {
      Octokit: OctokitRest
    });
    Object.keys(OctokitRest).forEach((key) => {
      if (OctokitRest.hasOwnProperty(key)) {
        Octokit[key] = OctokitRest[key];
      }
    });
    module2.exports = Octokit;
  }
});

// node_modules/@actions/github/lib/context.js
var require_context = __commonJS({
  "node_modules/@actions/github/lib/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fs_1 = require("fs");
    var os_1 = require("os");
    var Context = class {
      /**
       * Hydrate the context from the environment
       */
      constructor() {
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
          if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {
            this.payload = JSON.parse(fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
          } else {
            process.stdout.write(`GITHUB_EVENT_PATH ${process.env.GITHUB_EVENT_PATH} does not exist${os_1.EOL}`);
          }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
      }
      get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pullRequest || payload).number });
      }
      get repo() {
        if (process.env.GITHUB_REPOSITORY) {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
          return { owner, repo };
        }
        if (this.payload.repository) {
          return {
            owner: this.payload.repository.owner.login,
            repo: this.payload.repository.name
          };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
      }
    };
    exports.Context = Context;
  }
});

// node_modules/@actions/github/lib/github.js
var require_github = __commonJS({
  "node_modules/@actions/github/lib/github.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var graphql_1 = (init_graphql2(), __toCommonJS(graphql_exports));
    var rest_1 = __importDefault(require_rest());
    var Context = __importStar(require_context());
    rest_1.default.prototype = new rest_1.default();
    exports.context = new Context.Context();
    var GitHub2 = class extends rest_1.default {
      constructor(token, opts = {}) {
        super(Object.assign(Object.assign({}, opts), { auth: `token ${token}` }));
        this.graphql = graphql_1.defaults({
          headers: { authorization: `token ${token}` }
        });
      }
    };
    exports.GitHub = GitHub2;
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports, module2) {
    "use strict";
    var test = {
      foo: {}
    };
    var $Object = Object;
    module2.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            args.concat(slice.call(arguments))
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(
            that,
            args.concat(slice.call(arguments))
          );
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has/src/index.js
var require_src2 = __commonJS({
  "node_modules/has/src/index.js"(exports, module2) {
    "use strict";
    var bind = require_function_bind();
    module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module2) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
      return x.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src2();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module2.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS({
  "node_modules/object-inspect/util.inspect.js"(exports, module2) {
    module2.exports = require("util").inspect;
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module2) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util_inspect();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module2.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject3 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject3 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject3 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          // eslint-disable-line no-param-reassign
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module2.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module2) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module2.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module2) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge2 = function merge3(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge3(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge3(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module2.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge: merge2
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module2) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils3();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify2 = function stringify3(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify3(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify2(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module2) {
    "use strict";
    var utils = require_utils3();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module2) {
    "use strict";
    var stringify2 = require_stringify();
    var parse3 = require_parse2();
    var formats = require_formats();
    module2.exports = {
      formats,
      parse: parse3,
      stringify: stringify2
    };
  }
});

// node_modules/mime/Mime.js
var require_Mime = __commonJS({
  "node_modules/mime/Mime.js"(exports, module2) {
    "use strict";
    function Mime() {
      this._types = /* @__PURE__ */ Object.create(null);
      this._extensions = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < arguments.length; i++) {
        this.define(arguments[i]);
      }
      this.define = this.define.bind(this);
      this.getType = this.getType.bind(this);
      this.getExtension = this.getExtension.bind(this);
    }
    Mime.prototype.define = function(typeMap, force) {
      for (let type in typeMap) {
        let extensions = typeMap[type].map(function(t) {
          return t.toLowerCase();
        });
        type = type.toLowerCase();
        for (let i = 0; i < extensions.length; i++) {
          const ext = extensions[i];
          if (ext[0] === "*") {
            continue;
          }
          if (!force && ext in this._types) {
            throw new Error(
              'Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".'
            );
          }
          this._types[ext] = type;
        }
        if (force || !this._extensions[type]) {
          const ext = extensions[0];
          this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
        }
      }
    };
    Mime.prototype.getType = function(path) {
      path = String(path);
      let last = path.replace(/^.*[/\\]/, "").toLowerCase();
      let ext = last.replace(/^.*\./, "").toLowerCase();
      let hasPath = last.length < path.length;
      let hasDot = ext.length < last.length - 1;
      return (hasDot || !hasPath) && this._types[ext] || null;
    };
    Mime.prototype.getExtension = function(type) {
      type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
      return type && this._extensions[type.toLowerCase()] || null;
    };
    module2.exports = Mime;
  }
});

// node_modules/mime/types/standard.js
var require_standard = __commonJS({
  "node_modules/mime/types/standard.js"(exports, module2) {
    module2.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  }
});

// node_modules/mime/types/other.js
var require_other = __commonJS({
  "node_modules/mime/types/other.js"(exports, module2) {
    module2.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  }
});

// node_modules/mime/index.js
var require_mime = __commonJS({
  "node_modules/mime/index.js"(exports, module2) {
    "use strict";
    var Mime = require_Mime();
    module2.exports = new Mime(require_standard(), require_other());
  }
});

// node_modules/methods/index.js
var require_methods = __commonJS({
  "node_modules/methods/index.js"(exports, module2) {
    "use strict";
    var http = require("http");
    module2.exports = getCurrentNodeMethods() || getBasicNodeMethods();
    function getCurrentNodeMethods() {
      return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
        return method.toLowerCase();
      });
    }
    function getBasicNodeMethods() {
      return [
        "get",
        "post",
        "put",
        "head",
        "delete",
        "options",
        "trace",
        "copy",
        "lock",
        "mkcol",
        "move",
        "purge",
        "propfind",
        "proppatch",
        "unlock",
        "report",
        "mkactivity",
        "checkout",
        "merge",
        "m-search",
        "notify",
        "subscribe",
        "unsubscribe",
        "patch",
        "search",
        "connect"
      ];
    }
  }
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "node_modules/delayed-stream/lib/delayed_stream.js"(exports, module2) {
    var Stream = require("stream").Stream;
    var util = require("util");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "node_modules/combined-stream/lib/combined_stream.js"(exports, module2) {
    var util = require("util");
    var Stream = require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream) {
      return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
    };
    CombinedStream.prototype.append = function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream.on("data", this._checkDataSize.bind(this));
          stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
          stream.pause();
        }
      }
      this._streams.push(stream);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream = this._streams.shift();
      if (typeof stream == "undefined") {
        this.end();
        return;
      }
      if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
      }
      var getStream = stream;
      getStream(function(stream2) {
        var isStreamLike = CombinedStream.isStreamLike(stream2);
        if (isStreamLike) {
          stream2.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream2);
        }
        this._pipeNext(stream2);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream) {
      this._currentStream = stream;
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, { end: false });
        return;
      }
      var value = stream;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream) {
      var self2 = this;
      stream.on("error", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
        this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
        this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
          return;
        }
        self2.dataSize += stream.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  "node_modules/mime-db/db.json"(exports, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "node_modules/mime-db/index.js"(exports, module2) {
    module2.exports = require_db();
  }
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "node_modules/mime-types/index.js"(exports) {
    "use strict";
    var db = require_mime_db();
    var extname = require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2)
          mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== "string") {
        return false;
      }
      var extension2 = extname("x." + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "node_modules/asynckit/lib/defer.js"(exports, module2) {
    module2.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "node_modules/asynckit/lib/async.js"(exports, module2) {
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "node_modules/asynckit/lib/abort.js"(exports, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
      }
    }
  }
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "node_modules/asynckit/lib/iterate.js"(exports, module2) {
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list[key], function(error2, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error2) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error2, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  "node_modules/asynckit/lib/state.js"(exports, module2) {
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list[a], list[b]);
        });
      }
      return initState;
    }
  }
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "node_modules/asynckit/lib/terminator.js"(exports, module2) {
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "node_modules/asynckit/parallel.js"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, function(error2, result) {
          if (error2) {
            callback(error2, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "node_modules/asynckit/serialOrdered.js"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error2, result) {
        if (error2) {
          callback(error2, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "node_modules/asynckit/serial.js"(exports, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "node_modules/asynckit/index.js"(exports, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "node_modules/form-data/lib/populate.js"(exports, module2) {
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  "node_modules/form-data/lib/form_data.js"(exports, module2) {
    var CombinedStream = require_combined_stream();
    var util = require("util");
    var path = require("path");
    var http = require("http");
    var https = require("https");
    var parseUrl2 = require("url").parse;
    var fs = require("fs");
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData;
    util.inherits(FormData, CombinedStream);
    function FormData(options) {
      if (!(this instanceof FormData)) {
        return new FormData(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData.LINE_BREAK = "\r\n";
    FormData.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == "string") {
        options = { filename: options };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (util.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options);
    };
    FormData.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion"))) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty("fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (value.hasOwnProperty("httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == "string") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = "";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options.header == "object") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop))
          continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData.LINE_BREAK;
        }
      }
      return "--" + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
    };
    FormData.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === "string") {
        filename = path.normalize(options.filepath).replace(/\\/g, "/");
      } else if (options.filename || value.name || value.path) {
        filename = path.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        filename = path.basename(value.client._httpMessage.path || "");
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData.LINE_BREAK;
    };
    FormData.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== "function") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData.prototype.submit = function(params, cb) {
      var request2, options, defaults = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl2(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults);
      } else {
        options = populate(params, defaults);
        if (!options.port) {
          options.port = options.protocol == "https:" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == "https:") {
        request2 = https.request(options);
      } else {
        request2 = http.request(options);
      }
      this.getLength(function(err, length) {
        if (err) {
          this._error(err);
          return;
        }
        request2.setHeader("Content-Length", length);
        this.pipe(request2);
        if (cb) {
          var onResponse;
          var callback = function(error2, responce) {
            request2.removeListener("error", callback);
            request2.removeListener("response", onResponse);
            return cb.call(this, error2, responce);
          };
          onResponse = callback.bind(this, null);
          request2.on("error", callback);
          request2.on("response", onResponse);
        }
      }.bind(this));
      return request2;
    };
    FormData.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData.prototype.toString = function() {
      return "[object FormData]";
    };
  }
});

// node_modules/formidable/lib/file.js
var require_file = __commonJS({
  "node_modules/formidable/lib/file.js"(exports, module2) {
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var util = require("util");
    var fs = require("fs");
    var EventEmitter = require("events").EventEmitter;
    var crypto4 = require("crypto");
    function File2(properties) {
      EventEmitter.call(this);
      this.size = 0;
      this.path = null;
      this.name = null;
      this.type = null;
      this.hash = null;
      this.lastModifiedDate = null;
      this._writeStream = null;
      for (var key in properties) {
        this[key] = properties[key];
      }
      if (typeof this.hash === "string") {
        this.hash = crypto4.createHash(properties.hash);
      } else {
        this.hash = null;
      }
    }
    module2.exports = File2;
    util.inherits(File2, EventEmitter);
    File2.prototype.open = function() {
      this._writeStream = new fs.WriteStream(this.path);
    };
    File2.prototype.toJSON = function() {
      var json = {
        size: this.size,
        path: this.path,
        name: this.name,
        type: this.type,
        mtime: this.lastModifiedDate,
        length: this.length,
        filename: this.filename,
        mime: this.mime
      };
      if (this.hash && this.hash != "") {
        json.hash = this.hash;
      }
      return json;
    };
    File2.prototype.write = function(buffer, cb) {
      var self2 = this;
      if (self2.hash) {
        self2.hash.update(buffer);
      }
      if (this._writeStream.closed) {
        return cb();
      }
      this._writeStream.write(buffer, function() {
        self2.lastModifiedDate = /* @__PURE__ */ new Date();
        self2.size += buffer.length;
        self2.emit("progress", self2.size);
        cb();
      });
    };
    File2.prototype.end = function(cb) {
      var self2 = this;
      if (self2.hash) {
        self2.hash = self2.hash.digest("hex");
      }
      this._writeStream.end(function() {
        self2.emit("end");
        cb();
      });
    };
  }
});

// node_modules/formidable/lib/multipart_parser.js
var require_multipart_parser = __commonJS({
  "node_modules/formidable/lib/multipart_parser.js"(exports) {
    var Buffer2 = require("buffer").Buffer;
    var s = 0;
    var S = {
      PARSER_UNINITIALIZED: s++,
      START: s++,
      START_BOUNDARY: s++,
      HEADER_FIELD_START: s++,
      HEADER_FIELD: s++,
      HEADER_VALUE_START: s++,
      HEADER_VALUE: s++,
      HEADER_VALUE_ALMOST_DONE: s++,
      HEADERS_ALMOST_DONE: s++,
      PART_DATA_START: s++,
      PART_DATA: s++,
      PART_END: s++,
      END: s++
    };
    var f = 1;
    var F = {
      PART_BOUNDARY: f,
      LAST_BOUNDARY: f *= 2
    };
    var LF = 10;
    var CR = 13;
    var SPACE = 32;
    var HYPHEN = 45;
    var COLON = 58;
    var A = 97;
    var Z = 122;
    var lower = function(c) {
      return c | 32;
    };
    for (s in S) {
      exports[s] = S[s];
    }
    function MultipartParser() {
      this.boundary = null;
      this.boundaryChars = null;
      this.lookbehind = null;
      this.state = S.PARSER_UNINITIALIZED;
      this.index = null;
      this.flags = 0;
    }
    exports.MultipartParser = MultipartParser;
    MultipartParser.stateToString = function(stateNumber) {
      for (var state in S) {
        var number = S[state];
        if (number === stateNumber)
          return state;
      }
    };
    MultipartParser.prototype.initWithBoundary = function(str) {
      this.boundary = new Buffer2(str.length + 4);
      this.boundary.write("\r\n--", 0);
      this.boundary.write(str, 4);
      this.lookbehind = new Buffer2(this.boundary.length + 8);
      this.state = S.START;
      this.boundaryChars = {};
      for (var i = 0; i < this.boundary.length; i++) {
        this.boundaryChars[this.boundary[i]] = true;
      }
    };
    MultipartParser.prototype.write = function(buffer) {
      var self2 = this, i = 0, len = buffer.length, prevIndex = this.index, index = this.index, state = this.state, flags = this.flags, lookbehind = this.lookbehind, boundary = this.boundary, boundaryChars = this.boundaryChars, boundaryLength = this.boundary.length, boundaryEnd = boundaryLength - 1, bufferLength = buffer.length, c, cl, mark = function(name) {
        self2[name + "Mark"] = i;
      }, clear = function(name) {
        delete self2[name + "Mark"];
      }, callback = function(name, buffer2, start, end) {
        if (start !== void 0 && start === end) {
          return;
        }
        var callbackSymbol = "on" + name.substr(0, 1).toUpperCase() + name.substr(1);
        if (callbackSymbol in self2) {
          self2[callbackSymbol](buffer2, start, end);
        }
      }, dataCallback = function(name, clear2) {
        var markSymbol = name + "Mark";
        if (!(markSymbol in self2)) {
          return;
        }
        if (!clear2) {
          callback(name, buffer, self2[markSymbol], buffer.length);
          self2[markSymbol] = 0;
        } else {
          callback(name, buffer, self2[markSymbol], i);
          delete self2[markSymbol];
        }
      };
      for (i = 0; i < len; i++) {
        c = buffer[i];
        switch (state) {
          case S.PARSER_UNINITIALIZED:
            return i;
          case S.START:
            index = 0;
            state = S.START_BOUNDARY;
          case S.START_BOUNDARY:
            if (index == boundary.length - 2) {
              if (c == HYPHEN) {
                flags |= F.LAST_BOUNDARY;
              } else if (c != CR) {
                return i;
              }
              index++;
              break;
            } else if (index - 1 == boundary.length - 2) {
              if (flags & F.LAST_BOUNDARY && c == HYPHEN) {
                callback("end");
                state = S.END;
                flags = 0;
              } else if (!(flags & F.LAST_BOUNDARY) && c == LF) {
                index = 0;
                callback("partBegin");
                state = S.HEADER_FIELD_START;
              } else {
                return i;
              }
              break;
            }
            if (c != boundary[index + 2]) {
              index = -2;
            }
            if (c == boundary[index + 2]) {
              index++;
            }
            break;
          case S.HEADER_FIELD_START:
            state = S.HEADER_FIELD;
            mark("headerField");
            index = 0;
          case S.HEADER_FIELD:
            if (c == CR) {
              clear("headerField");
              state = S.HEADERS_ALMOST_DONE;
              break;
            }
            index++;
            if (c == HYPHEN) {
              break;
            }
            if (c == COLON) {
              if (index == 1) {
                return i;
              }
              dataCallback("headerField", true);
              state = S.HEADER_VALUE_START;
              break;
            }
            cl = lower(c);
            if (cl < A || cl > Z) {
              return i;
            }
            break;
          case S.HEADER_VALUE_START:
            if (c == SPACE) {
              break;
            }
            mark("headerValue");
            state = S.HEADER_VALUE;
          case S.HEADER_VALUE:
            if (c == CR) {
              dataCallback("headerValue", true);
              callback("headerEnd");
              state = S.HEADER_VALUE_ALMOST_DONE;
            }
            break;
          case S.HEADER_VALUE_ALMOST_DONE:
            if (c != LF) {
              return i;
            }
            state = S.HEADER_FIELD_START;
            break;
          case S.HEADERS_ALMOST_DONE:
            if (c != LF) {
              return i;
            }
            callback("headersEnd");
            state = S.PART_DATA_START;
            break;
          case S.PART_DATA_START:
            state = S.PART_DATA;
            mark("partData");
          case S.PART_DATA:
            prevIndex = index;
            if (index === 0) {
              i += boundaryEnd;
              while (i < bufferLength && !(buffer[i] in boundaryChars)) {
                i += boundaryLength;
              }
              i -= boundaryEnd;
              c = buffer[i];
            }
            if (index < boundary.length) {
              if (boundary[index] == c) {
                if (index === 0) {
                  dataCallback("partData", true);
                }
                index++;
              } else {
                index = 0;
              }
            } else if (index == boundary.length) {
              index++;
              if (c == CR) {
                flags |= F.PART_BOUNDARY;
              } else if (c == HYPHEN) {
                flags |= F.LAST_BOUNDARY;
              } else {
                index = 0;
              }
            } else if (index - 1 == boundary.length) {
              if (flags & F.PART_BOUNDARY) {
                index = 0;
                if (c == LF) {
                  flags &= ~F.PART_BOUNDARY;
                  callback("partEnd");
                  callback("partBegin");
                  state = S.HEADER_FIELD_START;
                  break;
                }
              } else if (flags & F.LAST_BOUNDARY) {
                if (c == HYPHEN) {
                  callback("partEnd");
                  callback("end");
                  state = S.END;
                  flags = 0;
                } else {
                  index = 0;
                }
              } else {
                index = 0;
              }
            }
            if (index > 0) {
              lookbehind[index - 1] = c;
            } else if (prevIndex > 0) {
              callback("partData", lookbehind, 0, prevIndex);
              prevIndex = 0;
              mark("partData");
              i--;
            }
            break;
          case S.END:
            break;
          default:
            return i;
        }
      }
      dataCallback("headerField");
      dataCallback("headerValue");
      dataCallback("partData");
      this.index = index;
      this.state = state;
      this.flags = flags;
      return len;
    };
    MultipartParser.prototype.end = function() {
      var callback = function(self2, name) {
        var callbackSymbol = "on" + name.substr(0, 1).toUpperCase() + name.substr(1);
        if (callbackSymbol in self2) {
          self2[callbackSymbol]();
        }
      };
      if (this.state == S.HEADER_FIELD_START && this.index === 0 || this.state == S.PART_DATA && this.index == this.boundary.length) {
        callback(this, "partEnd");
        callback(this, "end");
      } else if (this.state != S.END) {
        return new Error("MultipartParser.end(): stream ended unexpectedly: " + this.explain());
      }
    };
    MultipartParser.prototype.explain = function() {
      return "state = " + MultipartParser.stateToString(this.state);
    };
  }
});

// node_modules/formidable/lib/querystring_parser.js
var require_querystring_parser = __commonJS({
  "node_modules/formidable/lib/querystring_parser.js"(exports) {
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var querystring = require("querystring");
    function QuerystringParser(maxKeys) {
      this.maxKeys = maxKeys;
      this.buffer = "";
    }
    exports.QuerystringParser = QuerystringParser;
    QuerystringParser.prototype.write = function(buffer) {
      this.buffer += buffer.toString("ascii");
      return buffer.length;
    };
    QuerystringParser.prototype.end = function() {
      var fields = querystring.parse(this.buffer, "&", "=", { maxKeys: this.maxKeys });
      for (var field in fields) {
        this.onField(field, fields[field]);
      }
      this.buffer = "";
      this.onEnd();
    };
  }
});

// node_modules/formidable/lib/octet_parser.js
var require_octet_parser = __commonJS({
  "node_modules/formidable/lib/octet_parser.js"(exports) {
    var EventEmitter = require("events").EventEmitter;
    var util = require("util");
    function OctetParser(options) {
      if (!(this instanceof OctetParser))
        return new OctetParser(options);
      EventEmitter.call(this);
    }
    util.inherits(OctetParser, EventEmitter);
    exports.OctetParser = OctetParser;
    OctetParser.prototype.write = function(buffer) {
      this.emit("data", buffer);
      return buffer.length;
    };
    OctetParser.prototype.end = function() {
      this.emit("end");
    };
  }
});

// node_modules/formidable/lib/json_parser.js
var require_json_parser = __commonJS({
  "node_modules/formidable/lib/json_parser.js"(exports) {
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var Buffer2 = require("buffer").Buffer;
    function JSONParser(parent) {
      this.parent = parent;
      this.chunks = [];
      this.bytesWritten = 0;
    }
    exports.JSONParser = JSONParser;
    JSONParser.prototype.write = function(buffer) {
      this.bytesWritten += buffer.length;
      this.chunks.push(buffer);
      return buffer.length;
    };
    JSONParser.prototype.end = function() {
      try {
        var fields = JSON.parse(Buffer2.concat(this.chunks));
        for (var field in fields) {
          this.onField(field, fields[field]);
        }
      } catch (e) {
        this.parent.emit("error", e);
      }
      this.data = null;
      this.onEnd();
    };
  }
});

// node_modules/formidable/lib/incoming_form.js
var require_incoming_form = __commonJS({
  "node_modules/formidable/lib/incoming_form.js"(exports) {
    if (global.GENTLY)
      require = GENTLY.hijack(require);
    var crypto4 = require("crypto");
    var fs = require("fs");
    var util = require("util");
    var path = require("path");
    var File2 = require_file();
    var MultipartParser = require_multipart_parser().MultipartParser;
    var QuerystringParser = require_querystring_parser().QuerystringParser;
    var OctetParser = require_octet_parser().OctetParser;
    var JSONParser = require_json_parser().JSONParser;
    var StringDecoder = require("string_decoder").StringDecoder;
    var EventEmitter = require("events").EventEmitter;
    var Stream = require("stream").Stream;
    var os = require("os");
    function IncomingForm(opts) {
      if (!(this instanceof IncomingForm))
        return new IncomingForm(opts);
      EventEmitter.call(this);
      opts = opts || {};
      this.error = null;
      this.ended = false;
      this.maxFields = opts.maxFields || 1e3;
      this.maxFieldsSize = opts.maxFieldsSize || 20 * 1024 * 1024;
      this.maxFileSize = opts.maxFileSize || 200 * 1024 * 1024;
      this.keepExtensions = opts.keepExtensions || false;
      this.uploadDir = opts.uploadDir || os.tmpdir && os.tmpdir() || os.tmpDir();
      this.encoding = opts.encoding || "utf-8";
      this.headers = null;
      this.type = null;
      this.hash = opts.hash || false;
      this.multiples = opts.multiples || false;
      this.bytesReceived = null;
      this.bytesExpected = null;
      this._parser = null;
      this._flushing = 0;
      this._fieldsSize = 0;
      this._fileSize = 0;
      this.openedFiles = [];
      return this;
    }
    util.inherits(IncomingForm, EventEmitter);
    exports.IncomingForm = IncomingForm;
    IncomingForm.prototype.parse = function(req, cb) {
      this.pause = function() {
        try {
          req.pause();
        } catch (err) {
          if (!this.ended) {
            this._error(err);
          }
          return false;
        }
        return true;
      };
      this.resume = function() {
        try {
          req.resume();
        } catch (err) {
          if (!this.ended) {
            this._error(err);
          }
          return false;
        }
        return true;
      };
      if (cb) {
        var fields = {}, files = {};
        this.on("field", function(name, value) {
          fields[name] = value;
        }).on("file", function(name, file) {
          if (this.multiples) {
            if (files[name]) {
              if (!Array.isArray(files[name])) {
                files[name] = [files[name]];
              }
              files[name].push(file);
            } else {
              files[name] = file;
            }
          } else {
            files[name] = file;
          }
        }).on("error", function(err) {
          cb(err, fields, files);
        }).on("end", function() {
          cb(null, fields, files);
        });
      }
      this.writeHeaders(req.headers);
      var self2 = this;
      req.on("error", function(err) {
        self2._error(err);
      }).on("aborted", function() {
        self2.emit("aborted");
        self2._error(new Error("Request aborted"));
      }).on("data", function(buffer) {
        self2.write(buffer);
      }).on("end", function() {
        if (self2.error) {
          return;
        }
        var err = self2._parser.end();
        if (err) {
          self2._error(err);
        }
      });
      return this;
    };
    IncomingForm.prototype.writeHeaders = function(headers) {
      this.headers = headers;
      this._parseContentLength();
      this._parseContentType();
    };
    IncomingForm.prototype.write = function(buffer) {
      if (this.error) {
        return;
      }
      if (!this._parser) {
        this._error(new Error("uninitialized parser"));
        return;
      }
      if (typeof this._parser.write !== "function") {
        this._error(new Error("did not expect data"));
        return;
      }
      this.bytesReceived += buffer.length;
      this.emit("progress", this.bytesReceived, this.bytesExpected);
      var bytesParsed = this._parser.write(buffer);
      if (bytesParsed !== buffer.length) {
        this._error(new Error("parser error, " + bytesParsed + " of " + buffer.length + " bytes parsed"));
      }
      return bytesParsed;
    };
    IncomingForm.prototype.pause = function() {
      return false;
    };
    IncomingForm.prototype.resume = function() {
      return false;
    };
    IncomingForm.prototype.onPart = function(part) {
      this.handlePart(part);
    };
    IncomingForm.prototype.handlePart = function(part) {
      var self2 = this;
      if (part.filename === void 0) {
        var value = "", decoder = new StringDecoder(this.encoding);
        part.on("data", function(buffer) {
          self2._fieldsSize += buffer.length;
          if (self2._fieldsSize > self2.maxFieldsSize) {
            self2._error(new Error("maxFieldsSize exceeded, received " + self2._fieldsSize + " bytes of field data"));
            return;
          }
          value += decoder.write(buffer);
        });
        part.on("end", function() {
          self2.emit("field", part.name, value);
        });
        return;
      }
      this._flushing++;
      var file = new File2({
        path: this._uploadPath(part.filename),
        name: part.filename,
        type: part.mime,
        hash: self2.hash
      });
      this.emit("fileBegin", part.name, file);
      file.open();
      this.openedFiles.push(file);
      part.on("data", function(buffer) {
        self2._fileSize += buffer.length;
        if (self2._fileSize > self2.maxFileSize) {
          self2._error(new Error("maxFileSize exceeded, received " + self2._fileSize + " bytes of file data"));
          return;
        }
        if (buffer.length == 0) {
          return;
        }
        self2.pause();
        file.write(buffer, function() {
          self2.resume();
        });
      });
      part.on("end", function() {
        file.end(function() {
          self2._flushing--;
          self2.emit("file", part.name, file);
          self2._maybeEnd();
        });
      });
    };
    function dummyParser(self2) {
      return {
        end: function() {
          self2.ended = true;
          self2._maybeEnd();
          return null;
        }
      };
    }
    IncomingForm.prototype._parseContentType = function() {
      if (this.bytesExpected === 0) {
        this._parser = dummyParser(this);
        return;
      }
      if (!this.headers["content-type"]) {
        this._error(new Error("bad content-type header, no content-type"));
        return;
      }
      if (this.headers["content-type"].match(/octet-stream/i)) {
        this._initOctetStream();
        return;
      }
      if (this.headers["content-type"].match(/urlencoded/i)) {
        this._initUrlencoded();
        return;
      }
      if (this.headers["content-type"].match(/multipart/i)) {
        var m = this.headers["content-type"].match(/boundary=(?:"([^"]+)"|([^;]+))/i);
        if (m) {
          this._initMultipart(m[1] || m[2]);
        } else {
          this._error(new Error("bad content-type header, no multipart boundary"));
        }
        return;
      }
      if (this.headers["content-type"].match(/json/i)) {
        this._initJSONencoded();
        return;
      }
      this._error(new Error("bad content-type header, unknown content-type: " + this.headers["content-type"]));
    };
    IncomingForm.prototype._error = function(err) {
      if (this.error || this.ended) {
        return;
      }
      this.error = err;
      this.emit("error", err);
      if (Array.isArray(this.openedFiles)) {
        this.openedFiles.forEach(function(file) {
          file._writeStream.on("error", function() {
          }).destroy();
          setTimeout(fs.unlink, 0, file.path, function(error2) {
          });
        });
      }
    };
    IncomingForm.prototype._parseContentLength = function() {
      this.bytesReceived = 0;
      if (this.headers["content-length"]) {
        this.bytesExpected = parseInt(this.headers["content-length"], 10);
      } else if (this.headers["transfer-encoding"] === void 0) {
        this.bytesExpected = 0;
      }
      if (this.bytesExpected !== null) {
        this.emit("progress", this.bytesReceived, this.bytesExpected);
      }
    };
    IncomingForm.prototype._newParser = function() {
      return new MultipartParser();
    };
    IncomingForm.prototype._initMultipart = function(boundary) {
      this.type = "multipart";
      var parser = new MultipartParser(), self2 = this, headerField, headerValue, part;
      parser.initWithBoundary(boundary);
      parser.onPartBegin = function() {
        part = new Stream();
        part.readable = true;
        part.headers = {};
        part.name = null;
        part.filename = null;
        part.mime = null;
        part.transferEncoding = "binary";
        part.transferBuffer = "";
        headerField = "";
        headerValue = "";
      };
      parser.onHeaderField = function(b, start, end) {
        headerField += b.toString(self2.encoding, start, end);
      };
      parser.onHeaderValue = function(b, start, end) {
        headerValue += b.toString(self2.encoding, start, end);
      };
      parser.onHeaderEnd = function() {
        headerField = headerField.toLowerCase();
        part.headers[headerField] = headerValue;
        var m = headerValue.match(/\bname=("([^"]*)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t/]+))/i);
        if (headerField == "content-disposition") {
          if (m) {
            part.name = m[2] || m[3] || "";
          }
          part.filename = self2._fileName(headerValue);
        } else if (headerField == "content-type") {
          part.mime = headerValue;
        } else if (headerField == "content-transfer-encoding") {
          part.transferEncoding = headerValue.toLowerCase();
        }
        headerField = "";
        headerValue = "";
      };
      parser.onHeadersEnd = function() {
        switch (part.transferEncoding) {
          case "binary":
          case "7bit":
          case "8bit":
            parser.onPartData = function(b, start, end) {
              part.emit("data", b.slice(start, end));
            };
            parser.onPartEnd = function() {
              part.emit("end");
            };
            break;
          case "base64":
            parser.onPartData = function(b, start, end) {
              part.transferBuffer += b.slice(start, end).toString("ascii");
              var offset = parseInt(part.transferBuffer.length / 4, 10) * 4;
              part.emit("data", new Buffer(part.transferBuffer.substring(0, offset), "base64"));
              part.transferBuffer = part.transferBuffer.substring(offset);
            };
            parser.onPartEnd = function() {
              part.emit("data", new Buffer(part.transferBuffer, "base64"));
              part.emit("end");
            };
            break;
          default:
            return self2._error(new Error("unknown transfer-encoding"));
        }
        self2.onPart(part);
      };
      parser.onEnd = function() {
        self2.ended = true;
        self2._maybeEnd();
      };
      this._parser = parser;
    };
    IncomingForm.prototype._fileName = function(headerValue) {
      var m = headerValue.match(/\bfilename=("(.*?)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t/]+))($|;\s)/i);
      if (!m)
        return;
      var match = m[2] || m[3] || "";
      var filename = match.substr(match.lastIndexOf("\\") + 1);
      filename = filename.replace(/%22/g, '"');
      filename = filename.replace(/&#([\d]{4});/g, function(m2, code) {
        return String.fromCharCode(code);
      });
      return filename;
    };
    IncomingForm.prototype._initUrlencoded = function() {
      this.type = "urlencoded";
      var parser = new QuerystringParser(this.maxFields), self2 = this;
      parser.onField = function(key, val) {
        self2.emit("field", key, val);
      };
      parser.onEnd = function() {
        self2.ended = true;
        self2._maybeEnd();
      };
      this._parser = parser;
    };
    IncomingForm.prototype._initOctetStream = function() {
      this.type = "octet-stream";
      var filename = this.headers["x-file-name"];
      var mime = this.headers["content-type"];
      var file = new File2({
        path: this._uploadPath(filename),
        name: filename,
        type: mime
      });
      this.emit("fileBegin", filename, file);
      file.open();
      this.openedFiles.push(file);
      this._flushing++;
      var self2 = this;
      self2._parser = new OctetParser();
      var outstandingWrites = 0;
      self2._parser.on("data", function(buffer) {
        self2.pause();
        outstandingWrites++;
        file.write(buffer, function() {
          outstandingWrites--;
          self2.resume();
          if (self2.ended) {
            self2._parser.emit("doneWritingFile");
          }
        });
      });
      self2._parser.on("end", function() {
        self2._flushing--;
        self2.ended = true;
        var done = function() {
          file.end(function() {
            self2.emit("file", "file", file);
            self2._maybeEnd();
          });
        };
        if (outstandingWrites === 0) {
          done();
        } else {
          self2._parser.once("doneWritingFile", done);
        }
      });
    };
    IncomingForm.prototype._initJSONencoded = function() {
      this.type = "json";
      var parser = new JSONParser(this), self2 = this;
      parser.onField = function(key, val) {
        self2.emit("field", key, val);
      };
      parser.onEnd = function() {
        self2.ended = true;
        self2._maybeEnd();
      };
      this._parser = parser;
    };
    IncomingForm.prototype._uploadPath = function(filename) {
      var buf = crypto4.randomBytes(16);
      var name = "upload_" + buf.toString("hex");
      if (this.keepExtensions) {
        var ext = path.extname(filename);
        ext = ext.replace(/(\.[a-z0-9]+).*/i, "$1");
        name += ext;
      }
      return path.join(this.uploadDir, name);
    };
    IncomingForm.prototype._maybeEnd = function() {
      if (!this.ended || this._flushing || this.error) {
        return;
      }
      this.emit("end");
    };
  }
});

// node_modules/formidable/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/formidable/lib/index.js"(exports, module2) {
    var IncomingForm = require_incoming_form().IncomingForm;
    IncomingForm.IncomingForm = IncomingForm;
    module2.exports = IncomingForm;
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse3(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error2) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error2) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error2) {
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version2 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/debug/src/node.js"(exports, module2) {
    var tty = require("tty");
    var util = require("util");
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error2) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/debug/src/index.js
var require_src3 = __commonJS({
  "node_modules/debug/src/index.js"(exports, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/cookiejar/cookiejar.js
var require_cookiejar = __commonJS({
  "node_modules/cookiejar/cookiejar.js"(exports) {
    (function() {
      "use strict";
      function CookieAccessInfo(domain, path, secure, script) {
        if (this instanceof CookieAccessInfo) {
          this.domain = domain || void 0;
          this.path = path || "/";
          this.secure = !!secure;
          this.script = !!script;
          return this;
        }
        return new CookieAccessInfo(domain, path, secure, script);
      }
      CookieAccessInfo.All = Object.freeze(/* @__PURE__ */ Object.create(null));
      exports.CookieAccessInfo = CookieAccessInfo;
      function Cookie(cookiestr, request_domain, request_path) {
        if (cookiestr instanceof Cookie) {
          return cookiestr;
        }
        if (this instanceof Cookie) {
          this.name = null;
          this.value = null;
          this.expiration_date = Infinity;
          this.path = String(request_path || "/");
          this.explicit_path = false;
          this.domain = request_domain || null;
          this.explicit_domain = false;
          this.secure = false;
          this.noscript = false;
          if (cookiestr) {
            this.parse(cookiestr, request_domain, request_path);
          }
          return this;
        }
        return new Cookie(cookiestr, request_domain, request_path);
      }
      exports.Cookie = Cookie;
      Cookie.prototype.toString = function toString() {
        var str = [this.name + "=" + this.value];
        if (this.expiration_date !== Infinity) {
          str.push("expires=" + new Date(this.expiration_date).toGMTString());
        }
        if (this.domain) {
          str.push("domain=" + this.domain);
        }
        if (this.path) {
          str.push("path=" + this.path);
        }
        if (this.secure) {
          str.push("secure");
        }
        if (this.noscript) {
          str.push("httponly");
        }
        return str.join("; ");
      };
      Cookie.prototype.toValueString = function toValueString() {
        return this.name + "=" + this.value;
      };
      var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
      Cookie.prototype.parse = function parse3(str, request_domain, request_path) {
        if (this instanceof Cookie) {
          if (str.length > 32768) {
            console.warn("Cookie too long for parsing (>32768 characters)");
            return;
          }
          var parts = str.split(";").filter(function(value2) {
            return !!value2;
          });
          var i;
          var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
          if (!pair) {
            console.warn("Invalid cookie header encountered. Header: '" + str + "'");
            return;
          }
          var key = pair[1];
          var value = pair[2];
          if (typeof key !== "string" || key.length === 0 || typeof value !== "string") {
            console.warn("Unable to extract values from cookie header. Cookie: '" + str + "'");
            return;
          }
          this.name = key;
          this.value = value;
          for (i = 1; i < parts.length; i += 1) {
            pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
            key = pair[1].trim().toLowerCase();
            value = pair[2];
            switch (key) {
              case "httponly":
                this.noscript = true;
                break;
              case "expires":
                this.expiration_date = value ? Number(Date.parse(value)) : Infinity;
                break;
              case "path":
                this.path = value ? value.trim() : "";
                this.explicit_path = true;
                break;
              case "domain":
                this.domain = value ? value.trim() : "";
                this.explicit_domain = !!this.domain;
                break;
              case "secure":
                this.secure = true;
                break;
            }
          }
          if (!this.explicit_path) {
            this.path = request_path || "/";
          }
          if (!this.explicit_domain) {
            this.domain = request_domain;
          }
          return this;
        }
        return new Cookie().parse(str, request_domain, request_path);
      };
      Cookie.prototype.matches = function matches(access_info) {
        if (access_info === CookieAccessInfo.All) {
          return true;
        }
        if (this.noscript && access_info.script || this.secure && !access_info.secure || !this.collidesWith(access_info)) {
          return false;
        }
        return true;
      };
      Cookie.prototype.collidesWith = function collidesWith(access_info) {
        if (this.path && !access_info.path || this.domain && !access_info.domain) {
          return false;
        }
        if (this.path && access_info.path.indexOf(this.path) !== 0) {
          return false;
        }
        if (this.explicit_path && access_info.path.indexOf(this.path) !== 0) {
          return false;
        }
        var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/, "");
        var cookie_domain = this.domain && this.domain.replace(/^[\.]/, "");
        if (cookie_domain === access_domain) {
          return true;
        }
        if (cookie_domain) {
          if (!this.explicit_domain) {
            return false;
          }
          var wildcard = access_domain.indexOf(cookie_domain);
          if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
            return false;
          }
          return true;
        }
        return true;
      };
      function CookieJar() {
        var cookies, cookies_list, collidable_cookie;
        if (this instanceof CookieJar) {
          cookies = /* @__PURE__ */ Object.create(null);
          this.setCookie = function setCookie(cookie, request_domain, request_path) {
            var remove, i;
            cookie = new Cookie(cookie, request_domain, request_path);
            remove = cookie.expiration_date <= Date.now();
            if (cookies[cookie.name] !== void 0) {
              cookies_list = cookies[cookie.name];
              for (i = 0; i < cookies_list.length; i += 1) {
                collidable_cookie = cookies_list[i];
                if (collidable_cookie.collidesWith(cookie)) {
                  if (remove) {
                    cookies_list.splice(i, 1);
                    if (cookies_list.length === 0) {
                      delete cookies[cookie.name];
                    }
                    return false;
                  }
                  cookies_list[i] = cookie;
                  return cookie;
                }
              }
              if (remove) {
                return false;
              }
              cookies_list.push(cookie);
              return cookie;
            }
            if (remove) {
              return false;
            }
            cookies[cookie.name] = [cookie];
            return cookies[cookie.name];
          };
          this.getCookie = function getCookie(cookie_name, access_info) {
            var cookie, i;
            cookies_list = cookies[cookie_name];
            if (!cookies_list) {
              return;
            }
            for (i = 0; i < cookies_list.length; i += 1) {
              cookie = cookies_list[i];
              if (cookie.expiration_date <= Date.now()) {
                if (cookies_list.length === 0) {
                  delete cookies[cookie.name];
                }
                continue;
              }
              if (cookie.matches(access_info)) {
                return cookie;
              }
            }
          };
          this.getCookies = function getCookies(access_info) {
            var matches = [], cookie_name, cookie;
            for (cookie_name in cookies) {
              cookie = this.getCookie(cookie_name, access_info);
              if (cookie) {
                matches.push(cookie);
              }
            }
            matches.toString = function toString() {
              return matches.join(":");
            };
            matches.toValueString = function toValueString() {
              return matches.map(function(c) {
                return c.toValueString();
              }).join("; ");
            };
            return matches;
          };
          return this;
        }
        return new CookieJar();
      }
      exports.CookieJar = CookieJar;
      CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
        cookies = Array.isArray(cookies) ? cookies : cookies.split(cookie_str_splitter);
        var successful = [], i, cookie;
        cookies = cookies.map(function(item) {
          return new Cookie(item, request_domain, request_path);
        });
        for (i = 0; i < cookies.length; i += 1) {
          cookie = cookies[i];
          if (this.setCookie(cookie, request_domain, request_path)) {
            successful.push(cookie);
          }
        }
        return successful;
      };
    })();
  }
});

// node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module2) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module2) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module2) {
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports = module2.exports = {};
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var t = exports.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module2) {
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module2) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver2 = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module2) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { safeRe: re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof _SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse3 = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module2) {
    var SemVer = require_semver2();
    var parse3 = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse3;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports, module2) {
    var parse3 = require_parse3();
    var valid = (version2, options) => {
      const v = parse3(version2, options);
      return v ? v.version : null;
    };
    module2.exports = valid;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports, module2) {
    var parse3 = require_parse3();
    var clean = (version2, options) => {
      const s = parse3(version2.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module2.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports, module2) {
    var SemVer = require_semver2();
    var inc = (version2, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version2 instanceof SemVer ? version2.version : version2,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports, module2) {
    var parse3 = require_parse3();
    var diff = (version1, version2) => {
      const v12 = parse3(version1, null, true);
      const v2 = parse3(version2, null, true);
      const comparison = v12.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v12 : v2;
      const lowVersion = v1Higher ? v2 : v12;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v12.major !== v2.major) {
        return prefix + "major";
      }
      if (v12.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v12.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module2.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports, module2) {
    var SemVer = require_semver2();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports, module2) {
    var SemVer = require_semver2();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports, module2) {
    var SemVer = require_semver2();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports, module2) {
    var parse3 = require_parse3();
    var prerelease = (version2, options) => {
      const parsed = parse3(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module2) {
    var SemVer = require_semver2();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports, module2) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports, module2) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports, module2) {
    var SemVer = require_semver2();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module2) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module2) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module2) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module2) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module2) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module2) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module2) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module2) {
    var SemVer = require_semver2();
    var parse3 = require_parse3();
    var { safeRe: re, t } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(re[t.COERCE]);
      } else {
        let next;
        while ((next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse3(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
    };
    module2.exports = coerce;
  }
});

// node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "node_modules/yallist/iterator.js"(exports, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/yallist/yallist.js"(exports, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "node_modules/lru-cache/index.js"(exports, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      // resize the cache when the max changes.
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      // resize the cache when the lengthCalculator changes.
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module2) {
    var Range = class _Range {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof _Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new _Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().split(/\s+/).join(" ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lru_cache();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver2();
    var {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module2) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver2();
    var Range = require_range();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module2) {
    var Range = require_range();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports, module2) {
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports, module2) {
    var SemVer = require_semver2();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports, module2) {
    var SemVer = require_semver2();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports, module2) {
    var SemVer = require_semver2();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports, module2) {
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports, module2) {
    var SemVer = require_semver2();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports, module2) {
    var outside = require_outside();
    var gtr = (version2, range, options) => outside(version2, range, ">", options);
    module2.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports, module2) {
    var outside = require_outside();
    var ltr = (version2, range, options) => outside(version2, range, "<", options);
    module2.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports, module2) {
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2, options);
    };
    module2.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports, module2) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version2 of v) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports, module2) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt = higherGT(gt, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver3 = __commonJS({
  "node_modules/semver/index.js"(exports, module2) {
    var internalRe = require_re();
    var constants = require_constants();
    var SemVer = require_semver2();
    var identifiers = require_identifiers();
    var parse3 = require_parse3();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse: parse3,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/fast-safe-stringify/index.js
var require_fast_safe_stringify = __commonJS({
  "node_modules/fast-safe-stringify/index.js"(exports, module2) {
    module2.exports = stringify2;
    stringify2.default = stringify2;
    stringify2.stable = deterministicStringify;
    stringify2.stableStringify = deterministicStringify;
    var LIMIT_REPLACE_NODE = "[...]";
    var CIRCULAR_REPLACE_NODE = "[Circular]";
    var arr = [];
    var replacerStack = [];
    function defaultOptions() {
      return {
        depthLimit: Number.MAX_SAFE_INTEGER,
        edgesLimit: Number.MAX_SAFE_INTEGER
      };
    }
    function stringify2(obj, replacer, spacer, options) {
      if (typeof options === "undefined") {
        options = defaultOptions();
      }
      decirc(obj, "", 0, [], void 0, 0, options);
      var res;
      try {
        if (replacerStack.length === 0) {
          res = JSON.stringify(obj, replacer, spacer);
        } else {
          res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
        }
      } catch (_) {
        return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
      } finally {
        while (arr.length !== 0) {
          var part = arr.pop();
          if (part.length === 4) {
            Object.defineProperty(part[0], part[1], part[3]);
          } else {
            part[0][part[1]] = part[2];
          }
        }
      }
      return res;
    }
    function setReplace(replace, val, k, parent) {
      var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
      if (propertyDescriptor.get !== void 0) {
        if (propertyDescriptor.configurable) {
          Object.defineProperty(parent, k, { value: replace });
          arr.push([parent, k, val, propertyDescriptor]);
        } else {
          replacerStack.push([val, k, replace]);
        }
      } else {
        parent[k] = replace;
        arr.push([parent, k, val]);
      }
    }
    function decirc(val, k, edgeIndex, stack, parent, depth, options) {
      depth += 1;
      var i;
      if (typeof val === "object" && val !== null) {
        for (i = 0; i < stack.length; i++) {
          if (stack[i] === val) {
            setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
            return;
          }
        }
        if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        stack.push(val);
        if (Array.isArray(val)) {
          for (i = 0; i < val.length; i++) {
            decirc(val[i], i, i, stack, val, depth, options);
          }
        } else {
          var keys = Object.keys(val);
          for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            decirc(val[key], key, i, stack, val, depth, options);
          }
        }
        stack.pop();
      }
    }
    function compareFunction(a, b) {
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    }
    function deterministicStringify(obj, replacer, spacer, options) {
      if (typeof options === "undefined") {
        options = defaultOptions();
      }
      var tmp = deterministicDecirc(obj, "", 0, [], void 0, 0, options) || obj;
      var res;
      try {
        if (replacerStack.length === 0) {
          res = JSON.stringify(tmp, replacer, spacer);
        } else {
          res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
        }
      } catch (_) {
        return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
      } finally {
        while (arr.length !== 0) {
          var part = arr.pop();
          if (part.length === 4) {
            Object.defineProperty(part[0], part[1], part[3]);
          } else {
            part[0][part[1]] = part[2];
          }
        }
      }
      return res;
    }
    function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {
      depth += 1;
      var i;
      if (typeof val === "object" && val !== null) {
        for (i = 0; i < stack.length; i++) {
          if (stack[i] === val) {
            setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
            return;
          }
        }
        try {
          if (typeof val.toJSON === "function") {
            return;
          }
        } catch (_) {
          return;
        }
        if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        stack.push(val);
        if (Array.isArray(val)) {
          for (i = 0; i < val.length; i++) {
            deterministicDecirc(val[i], i, i, stack, val, depth, options);
          }
        } else {
          var tmp = {};
          var keys = Object.keys(val).sort(compareFunction);
          for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            deterministicDecirc(val[key], key, i, stack, val, depth, options);
            tmp[key] = val[key];
          }
          if (typeof parent !== "undefined") {
            arr.push([parent, k, val]);
            parent[k] = tmp;
          } else {
            return tmp;
          }
        }
        stack.pop();
      }
    }
    function replaceGetterValues(replacer) {
      replacer = typeof replacer !== "undefined" ? replacer : function(k, v) {
        return v;
      };
      return function(key, val) {
        if (replacerStack.length > 0) {
          for (var i = 0; i < replacerStack.length; i++) {
            var part = replacerStack[i];
            if (part[1] === key && part[0] === val) {
              val = part[2];
              replacerStack.splice(i, 1);
              break;
            }
          }
        }
        return replacer.call(this, key, val);
      };
    }
  }
});

// node_modules/superagent/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/superagent/lib/utils.js"(exports) {
    "use strict";
    exports.type = function(str) {
      return str.split(/ *; */).shift();
    };
    exports.params = function(str) {
      return str.split(/ *; */).reduce(function(obj, str2) {
        var parts = str2.split(/ *= */);
        var key = parts.shift();
        var val = parts.shift();
        if (key && val)
          obj[key] = val;
        return obj;
      }, {});
    };
    exports.parseLinks = function(str) {
      return str.split(/ *, */).reduce(function(obj, str2) {
        var parts = str2.split(/ *; */);
        var url = parts[0].slice(1, -1);
        var rel = parts[1].split(/ *= */)[1].slice(1, -1);
        obj[rel] = url;
        return obj;
      }, {});
    };
    exports.cleanHeader = function(header, changesOrigin) {
      delete header["content-type"];
      delete header["content-length"];
      delete header["transfer-encoding"];
      delete header.host;
      if (changesOrigin) {
        delete header.authorization;
        delete header.cookie;
      }
      return header;
    };
  }
});

// node_modules/superagent/lib/is-object.js
var require_is_object = __commonJS({
  "node_modules/superagent/lib/is-object.js"(exports, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isObject2(obj) {
      return obj !== null && _typeof(obj) === "object";
    }
    module2.exports = isObject2;
  }
});

// node_modules/superagent/lib/request-base.js
var require_request_base = __commonJS({
  "node_modules/superagent/lib/request-base.js"(exports, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var isObject2 = require_is_object();
    module2.exports = RequestBase;
    function RequestBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in RequestBase.prototype) {
        if (Object.prototype.hasOwnProperty.call(RequestBase.prototype, key))
          obj[key] = RequestBase.prototype[key];
      }
      return obj;
    }
    RequestBase.prototype.clearTimeout = function() {
      clearTimeout(this._timer);
      clearTimeout(this._responseTimeoutTimer);
      clearTimeout(this._uploadTimeoutTimer);
      delete this._timer;
      delete this._responseTimeoutTimer;
      delete this._uploadTimeoutTimer;
      return this;
    };
    RequestBase.prototype.parse = function(fn) {
      this._parser = fn;
      return this;
    };
    RequestBase.prototype.responseType = function(val) {
      this._responseType = val;
      return this;
    };
    RequestBase.prototype.serialize = function(fn) {
      this._serializer = fn;
      return this;
    };
    RequestBase.prototype.timeout = function(options) {
      if (!options || _typeof(options) !== "object") {
        this._timeout = options;
        this._responseTimeout = 0;
        this._uploadTimeout = 0;
        return this;
      }
      for (var option in options) {
        if (Object.prototype.hasOwnProperty.call(options, option)) {
          switch (option) {
            case "deadline":
              this._timeout = options.deadline;
              break;
            case "response":
              this._responseTimeout = options.response;
              break;
            case "upload":
              this._uploadTimeout = options.upload;
              break;
            default:
              console.warn("Unknown timeout option", option);
          }
        }
      }
      return this;
    };
    RequestBase.prototype.retry = function(count, fn) {
      if (arguments.length === 0 || count === true)
        count = 1;
      if (count <= 0)
        count = 0;
      this._maxRetries = count;
      this._retries = 0;
      this._retryCallback = fn;
      return this;
    };
    var ERROR_CODES = ["ECONNRESET", "ETIMEDOUT", "EADDRINFO", "ESOCKETTIMEDOUT"];
    RequestBase.prototype._shouldRetry = function(err, res) {
      if (!this._maxRetries || this._retries++ >= this._maxRetries) {
        return false;
      }
      if (this._retryCallback) {
        try {
          var override = this._retryCallback(err, res);
          if (override === true)
            return true;
          if (override === false)
            return false;
        } catch (err_) {
          console.error(err_);
        }
      }
      if (res && res.status && res.status >= 500 && res.status !== 501)
        return true;
      if (err) {
        if (err.code && ERROR_CODES.includes(err.code))
          return true;
        if (err.timeout && err.code === "ECONNABORTED")
          return true;
        if (err.crossDomain)
          return true;
      }
      return false;
    };
    RequestBase.prototype._retry = function() {
      this.clearTimeout();
      if (this.req) {
        this.req = null;
        this.req = this.request();
      }
      this._aborted = false;
      this.timedout = false;
      this.timedoutError = null;
      return this._end();
    };
    RequestBase.prototype.then = function(resolve, reject) {
      var _this = this;
      if (!this._fullfilledPromise) {
        var self2 = this;
        if (this._endCalled) {
          console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
        }
        this._fullfilledPromise = new Promise(function(resolve2, reject2) {
          self2.on("abort", function() {
            if (_this._maxRetries && _this._maxRetries > _this._retries) {
              return;
            }
            if (_this.timedout && _this.timedoutError) {
              reject2(_this.timedoutError);
              return;
            }
            var err = new Error("Aborted");
            err.code = "ABORTED";
            err.status = _this.status;
            err.method = _this.method;
            err.url = _this.url;
            reject2(err);
          });
          self2.end(function(err, res) {
            if (err)
              reject2(err);
            else
              resolve2(res);
          });
        });
      }
      return this._fullfilledPromise.then(resolve, reject);
    };
    RequestBase.prototype.catch = function(cb) {
      return this.then(void 0, cb);
    };
    RequestBase.prototype.use = function(fn) {
      fn(this);
      return this;
    };
    RequestBase.prototype.ok = function(cb) {
      if (typeof cb !== "function")
        throw new Error("Callback required");
      this._okCallback = cb;
      return this;
    };
    RequestBase.prototype._isResponseOK = function(res) {
      if (!res) {
        return false;
      }
      if (this._okCallback) {
        return this._okCallback(res);
      }
      return res.status >= 200 && res.status < 300;
    };
    RequestBase.prototype.get = function(field) {
      return this._header[field.toLowerCase()];
    };
    RequestBase.prototype.getHeader = RequestBase.prototype.get;
    RequestBase.prototype.set = function(field, val) {
      if (isObject2(field)) {
        for (var key in field) {
          if (Object.prototype.hasOwnProperty.call(field, key))
            this.set(key, field[key]);
        }
        return this;
      }
      this._header[field.toLowerCase()] = val;
      this.header[field] = val;
      return this;
    };
    RequestBase.prototype.unset = function(field) {
      delete this._header[field.toLowerCase()];
      delete this.header[field];
      return this;
    };
    RequestBase.prototype.field = function(name, val) {
      if (name === null || void 0 === name) {
        throw new Error(".field(name, val) name can not be empty");
      }
      if (this._data) {
        throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObject2(name)) {
        for (var key in name) {
          if (Object.prototype.hasOwnProperty.call(name, key))
            this.field(key, name[key]);
        }
        return this;
      }
      if (Array.isArray(val)) {
        for (var i in val) {
          if (Object.prototype.hasOwnProperty.call(val, i))
            this.field(name, val[i]);
        }
        return this;
      }
      if (val === null || void 0 === val) {
        throw new Error(".field(name, val) val can not be empty");
      }
      if (typeof val === "boolean") {
        val = String(val);
      }
      this._getFormData().append(name, val);
      return this;
    };
    RequestBase.prototype.abort = function() {
      if (this._aborted) {
        return this;
      }
      this._aborted = true;
      if (this.xhr)
        this.xhr.abort();
      if (this.req)
        this.req.abort();
      this.clearTimeout();
      this.emit("abort");
      return this;
    };
    RequestBase.prototype._auth = function(user, pass, options, base64Encoder) {
      switch (options.type) {
        case "basic":
          this.set("Authorization", "Basic ".concat(base64Encoder("".concat(user, ":").concat(pass))));
          break;
        case "auto":
          this.username = user;
          this.password = pass;
          break;
        case "bearer":
          this.set("Authorization", "Bearer ".concat(user));
          break;
        default:
          break;
      }
      return this;
    };
    RequestBase.prototype.withCredentials = function(on) {
      if (on === void 0)
        on = true;
      this._withCredentials = on;
      return this;
    };
    RequestBase.prototype.redirects = function(n) {
      this._maxRedirects = n;
      return this;
    };
    RequestBase.prototype.maxResponseSize = function(n) {
      if (typeof n !== "number") {
        throw new TypeError("Invalid argument");
      }
      this._maxResponseSize = n;
      return this;
    };
    RequestBase.prototype.toJSON = function() {
      return {
        method: this.method,
        url: this.url,
        data: this._data,
        headers: this._header
      };
    };
    RequestBase.prototype.send = function(data) {
      var isObj = isObject2(data);
      var type = this._header["content-type"];
      if (this._formData) {
        throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObj && !this._data) {
        if (Array.isArray(data)) {
          this._data = [];
        } else if (!this._isHost(data)) {
          this._data = {};
        }
      } else if (data && this._data && this._isHost(this._data)) {
        throw new Error("Can't merge these send calls");
      }
      if (isObj && isObject2(this._data)) {
        for (var key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key))
            this._data[key] = data[key];
        }
      } else if (typeof data === "string") {
        if (!type)
          this.type("form");
        type = this._header["content-type"];
        if (type === "application/x-www-form-urlencoded") {
          this._data = this._data ? "".concat(this._data, "&").concat(data) : data;
        } else {
          this._data = (this._data || "") + data;
        }
      } else {
        this._data = data;
      }
      if (!isObj || this._isHost(data)) {
        return this;
      }
      if (!type)
        this.type("json");
      return this;
    };
    RequestBase.prototype.sortQuery = function(sort) {
      this._sort = typeof sort === "undefined" ? true : sort;
      return this;
    };
    RequestBase.prototype._finalizeQueryString = function() {
      var query = this._query.join("&");
      if (query) {
        this.url += (this.url.includes("?") ? "&" : "?") + query;
      }
      this._query.length = 0;
      if (this._sort) {
        var index = this.url.indexOf("?");
        if (index >= 0) {
          var queryArr = this.url.slice(index + 1).split("&");
          if (typeof this._sort === "function") {
            queryArr.sort(this._sort);
          } else {
            queryArr.sort();
          }
          this.url = this.url.slice(0, index) + "?" + queryArr.join("&");
        }
      }
    };
    RequestBase.prototype._appendQueryString = function() {
      console.warn("Unsupported");
    };
    RequestBase.prototype._timeoutError = function(reason, timeout, errno) {
      if (this._aborted) {
        return;
      }
      var err = new Error("".concat(reason + timeout, "ms exceeded"));
      err.timeout = timeout;
      err.code = "ECONNABORTED";
      err.errno = errno;
      this.timedout = true;
      this.timedoutError = err;
      this.abort();
      this.callback(err);
    };
    RequestBase.prototype._setTimeouts = function() {
      var self2 = this;
      if (this._timeout && !this._timer) {
        this._timer = setTimeout(function() {
          self2._timeoutError("Timeout of ", self2._timeout, "ETIME");
        }, this._timeout);
      }
      if (this._responseTimeout && !this._responseTimeoutTimer) {
        this._responseTimeoutTimer = setTimeout(function() {
          self2._timeoutError("Response timeout of ", self2._responseTimeout, "ETIMEDOUT");
        }, this._responseTimeout);
      }
    };
  }
});

// node_modules/superagent/lib/node/unzip.js
var require_unzip = __commonJS({
  "node_modules/superagent/lib/node/unzip.js"(exports) {
    "use strict";
    var _require = require("string_decoder");
    var StringDecoder = _require.StringDecoder;
    var Stream = require("stream");
    var zlib = require("zlib");
    exports.unzip = function(req, res) {
      var unzip = zlib.createUnzip();
      var stream = new Stream();
      var decoder;
      stream.req = req;
      unzip.on("error", function(err) {
        if (err && err.code === "Z_BUF_ERROR") {
          stream.emit("end");
          return;
        }
        stream.emit("error", err);
      });
      res.pipe(unzip);
      res.setEncoding = function(type) {
        decoder = new StringDecoder(type);
      };
      unzip.on("data", function(buf) {
        if (decoder) {
          var str = decoder.write(buf);
          if (str.length > 0)
            stream.emit("data", str);
        } else {
          stream.emit("data", buf);
        }
      });
      unzip.on("end", function() {
        stream.emit("end");
      });
      var _on = res.on;
      res.on = function(type, fn) {
        if (type === "data" || type === "end") {
          stream.on(type, fn.bind(res));
        } else if (type === "error") {
          stream.on(type, fn.bind(res));
          _on.call(res, type, fn);
        } else {
          _on.call(res, type, fn);
        }
        return this;
      };
    };
  }
});

// node_modules/superagent/lib/response-base.js
var require_response_base = __commonJS({
  "node_modules/superagent/lib/response-base.js"(exports, module2) {
    "use strict";
    var utils = require_utils4();
    module2.exports = ResponseBase;
    function ResponseBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in ResponseBase.prototype) {
        if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key))
          obj[key] = ResponseBase.prototype[key];
      }
      return obj;
    }
    ResponseBase.prototype.get = function(field) {
      return this.header[field.toLowerCase()];
    };
    ResponseBase.prototype._setHeaderProperties = function(header) {
      var ct = header["content-type"] || "";
      this.type = utils.type(ct);
      var params = utils.params(ct);
      for (var key in params) {
        if (Object.prototype.hasOwnProperty.call(params, key))
          this[key] = params[key];
      }
      this.links = {};
      try {
        if (header.link) {
          this.links = utils.parseLinks(header.link);
        }
      } catch (_unused) {
      }
    };
    ResponseBase.prototype._setStatusProperties = function(status) {
      var type = status / 100 | 0;
      this.statusCode = status;
      this.status = this.statusCode;
      this.statusType = type;
      this.info = type === 1;
      this.ok = type === 2;
      this.redirect = type === 3;
      this.clientError = type === 4;
      this.serverError = type === 5;
      this.error = type === 4 || type === 5 ? this.toError() : false;
      this.created = status === 201;
      this.accepted = status === 202;
      this.noContent = status === 204;
      this.badRequest = status === 400;
      this.unauthorized = status === 401;
      this.notAcceptable = status === 406;
      this.forbidden = status === 403;
      this.notFound = status === 404;
      this.unprocessableEntity = status === 422;
    };
  }
});

// node_modules/superagent/lib/node/response.js
var require_response = __commonJS({
  "node_modules/superagent/lib/node/response.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var Stream = require("stream");
    var ResponseBase = require_response_base();
    module2.exports = Response;
    function Response(req) {
      Stream.call(this);
      this.res = req.res;
      var res = this.res;
      this.request = req;
      this.req = req.req;
      this.text = res.text;
      this.body = res.body === void 0 ? {} : res.body;
      this.files = res.files || {};
      this.buffered = req._resBuffered;
      this.headers = res.headers;
      this.header = this.headers;
      this._setStatusProperties(res.statusCode);
      this._setHeaderProperties(this.header);
      this.setEncoding = res.setEncoding.bind(res);
      res.on("data", this.emit.bind(this, "data"));
      res.on("end", this.emit.bind(this, "end"));
      res.on("close", this.emit.bind(this, "close"));
      res.on("error", this.emit.bind(this, "error"));
    }
    util.inherits(Response, Stream);
    ResponseBase(Response.prototype);
    Response.prototype.destroy = function(err) {
      this.res.destroy(err);
    };
    Response.prototype.pause = function() {
      this.res.pause();
    };
    Response.prototype.resume = function() {
      this.res.resume();
    };
    Response.prototype.toError = function() {
      var req = this.req;
      var method = req.method;
      var path = req.path;
      var msg = "cannot ".concat(method, " ").concat(path, " (").concat(this.status, ")");
      var err = new Error(msg);
      err.status = this.status;
      err.text = this.text;
      err.method = method;
      err.path = path;
      return err;
    };
    Response.prototype.setStatusProperties = function(status) {
      console.warn("In superagent 2.x setStatusProperties is a private method");
      return this._setStatusProperties(status);
    };
    Response.prototype.toJSON = function() {
      return {
        req: this.request.toJSON(),
        header: this.header,
        status: this.status,
        text: this.text
      };
    };
  }
});

// node_modules/superagent/lib/node/http2wrapper.js
var require_http2wrapper = __commonJS({
  "node_modules/superagent/lib/node/http2wrapper.js"(exports) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Stream = require("stream");
    var util = require("util");
    var net = require("net");
    var tls = require("tls");
    var _require = require("url");
    var parse3 = _require.parse;
    var semver = require_semver3();
    var http2;
    if (semver.gte(process.version, "v10.10.0"))
      http2 = require("http2");
    else
      throw new Error("superagent: this version of Node.js does not support http2");
    var _http2$constants = http2.constants;
    var HTTP2_HEADER_PATH = _http2$constants.HTTP2_HEADER_PATH;
    var HTTP2_HEADER_STATUS = _http2$constants.HTTP2_HEADER_STATUS;
    var HTTP2_HEADER_METHOD = _http2$constants.HTTP2_HEADER_METHOD;
    var HTTP2_HEADER_AUTHORITY = _http2$constants.HTTP2_HEADER_AUTHORITY;
    var HTTP2_HEADER_HOST = _http2$constants.HTTP2_HEADER_HOST;
    var HTTP2_HEADER_SET_COOKIE = _http2$constants.HTTP2_HEADER_SET_COOKIE;
    var NGHTTP2_CANCEL = _http2$constants.NGHTTP2_CANCEL;
    function setProtocol(protocol) {
      return {
        request: function request2(options) {
          return new Request(protocol, options);
        }
      };
    }
    function Request(protocol, options) {
      var _this = this;
      Stream.call(this);
      var defaultPort = protocol === "https:" ? 443 : 80;
      var defaultHost = "localhost";
      var port = options.port || defaultPort;
      var host = options.host || defaultHost;
      delete options.port;
      delete options.host;
      this.method = options.method;
      this.path = options.path;
      this.protocol = protocol;
      this.host = host;
      delete options.method;
      delete options.path;
      var sessionOptions = _objectSpread({}, options);
      if (options.socketPath) {
        sessionOptions.socketPath = options.socketPath;
        sessionOptions.createConnection = this.createUnixConnection.bind(this);
      }
      this._headers = {};
      var session = http2.connect("".concat(protocol, "//").concat(host, ":").concat(port), sessionOptions);
      this.setHeader("host", "".concat(host, ":").concat(port));
      session.on("error", function(err) {
        return _this.emit("error", err);
      });
      this.session = session;
    }
    util.inherits(Request, Stream);
    Request.prototype.createUnixConnection = function(authority, options) {
      switch (this.protocol) {
        case "http:":
          return net.connect(options.socketPath);
        case "https:":
          options.ALPNProtocols = ["h2"];
          options.servername = this.host;
          options.allowHalfOpen = true;
          return tls.connect(options.socketPath, options);
        default:
          throw new Error("Unsupported protocol", this.protocol);
      }
    };
    Request.prototype.setNoDelay = function(bool) {
    };
    Request.prototype.getFrame = function() {
      var _method, _this2 = this;
      if (this.frame) {
        return this.frame;
      }
      var method = (_method = {}, _defineProperty(_method, HTTP2_HEADER_PATH, this.path), _defineProperty(_method, HTTP2_HEADER_METHOD, this.method), _method);
      var headers = this.mapToHttp2Header(this._headers);
      headers = Object.assign(headers, method);
      var frame = this.session.request(headers);
      frame.once("response", function(headers2, flags) {
        headers2 = _this2.mapToHttpHeader(headers2);
        frame.headers = headers2;
        frame.statusCode = headers2[HTTP2_HEADER_STATUS];
        frame.status = frame.statusCode;
        _this2.emit("response", frame);
      });
      this._headerSent = true;
      frame.once("drain", function() {
        return _this2.emit("drain");
      });
      frame.on("error", function(err) {
        return _this2.emit("error", err);
      });
      frame.on("close", function() {
        return _this2.session.close();
      });
      this.frame = frame;
      return frame;
    };
    Request.prototype.mapToHttpHeader = function(headers) {
      var keys = Object.keys(headers);
      var http2Headers = {};
      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
        var key = _keys[_i];
        var value = headers[key];
        key = key.toLowerCase();
        switch (key) {
          case HTTP2_HEADER_SET_COOKIE:
            value = Array.isArray(value) ? value : [value];
            break;
          default:
            break;
        }
        http2Headers[key] = value;
      }
      return http2Headers;
    };
    Request.prototype.mapToHttp2Header = function(headers) {
      var keys = Object.keys(headers);
      var http2Headers = {};
      for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {
        var key = _keys2[_i2];
        var value = headers[key];
        key = key.toLowerCase();
        switch (key) {
          case HTTP2_HEADER_HOST:
            key = HTTP2_HEADER_AUTHORITY;
            value = /^http:\/\/|^https:\/\//.test(value) ? parse3(value).host : value;
            break;
          default:
            break;
        }
        http2Headers[key] = value;
      }
      return http2Headers;
    };
    Request.prototype.setHeader = function(name, value) {
      this._headers[name.toLowerCase()] = value;
    };
    Request.prototype.getHeader = function(name) {
      return this._headers[name.toLowerCase()];
    };
    Request.prototype.write = function(data, encoding) {
      var frame = this.getFrame();
      return frame.write(data, encoding);
    };
    Request.prototype.pipe = function(stream, options) {
      var frame = this.getFrame();
      return frame.pipe(stream, options);
    };
    Request.prototype.end = function(data) {
      var frame = this.getFrame();
      frame.end(data);
    };
    Request.prototype.abort = function(data) {
      var frame = this.getFrame();
      frame.close(NGHTTP2_CANCEL);
      this.session.destroy();
    };
    exports.setProtocol = setProtocol;
  }
});

// node_modules/superagent/lib/agent-base.js
var require_agent_base = __commonJS({
  "node_modules/superagent/lib/agent-base.js"(exports, module2) {
    "use strict";
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function Agent() {
      this._defaults = [];
    }
    ["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects", "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert", "disableTLSCerts"].forEach(function(fn) {
      Agent.prototype[fn] = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        this._defaults.push({
          fn,
          args
        });
        return this;
      };
    });
    Agent.prototype._setDefaults = function(req) {
      this._defaults.forEach(function(def) {
        req[def.fn].apply(req, _toConsumableArray(def.args));
      });
    };
    module2.exports = Agent;
  }
});

// node_modules/superagent/lib/node/agent.js
var require_agent = __commonJS({
  "node_modules/superagent/lib/node/agent.js"(exports, module2) {
    "use strict";
    var _require = require("url");
    var parse3 = _require.parse;
    var _require2 = require_cookiejar();
    var CookieJar = _require2.CookieJar;
    var _require3 = require_cookiejar();
    var CookieAccessInfo = _require3.CookieAccessInfo;
    var methods = require_methods();
    var request2 = require_node2();
    var AgentBase = require_agent_base();
    module2.exports = Agent;
    function Agent(options) {
      if (!(this instanceof Agent)) {
        return new Agent(options);
      }
      AgentBase.call(this);
      this.jar = new CookieJar();
      if (options) {
        if (options.ca) {
          this.ca(options.ca);
        }
        if (options.key) {
          this.key(options.key);
        }
        if (options.pfx) {
          this.pfx(options.pfx);
        }
        if (options.cert) {
          this.cert(options.cert);
        }
        if (options.rejectUnauthorized === false) {
          this.disableTLSCerts();
        }
      }
    }
    Agent.prototype = Object.create(AgentBase.prototype);
    Agent.prototype._saveCookies = function(res) {
      var cookies = res.headers["set-cookie"];
      if (cookies)
        this.jar.setCookies(cookies);
    };
    Agent.prototype._attachCookies = function(req) {
      var url = parse3(req.url);
      var access = new CookieAccessInfo(url.hostname, url.pathname, url.protocol === "https:");
      var cookies = this.jar.getCookies(access).toValueString();
      req.cookies = cookies;
    };
    methods.forEach(function(name) {
      var method = name.toUpperCase();
      Agent.prototype[name] = function(url, fn) {
        var req = new request2.Request(method, url);
        req.on("response", this._saveCookies.bind(this));
        req.on("redirect", this._saveCookies.bind(this));
        req.on("redirect", this._attachCookies.bind(this, req));
        this._setDefaults(req);
        this._attachCookies(req);
        if (fn) {
          req.end(fn);
        }
        return req;
      };
    });
    Agent.prototype.del = Agent.prototype.delete;
  }
});

// node_modules/superagent/lib/node/parsers/urlencoded.js
var require_urlencoded = __commonJS({
  "node_modules/superagent/lib/node/parsers/urlencoded.js"(exports, module2) {
    "use strict";
    var qs = require_lib4();
    module2.exports = function(res, fn) {
      res.text = "";
      res.setEncoding("ascii");
      res.on("data", function(chunk) {
        res.text += chunk;
      });
      res.on("end", function() {
        try {
          fn(null, qs.parse(res.text));
        } catch (err) {
          fn(err);
        }
      });
    };
  }
});

// node_modules/superagent/lib/node/parsers/json.js
var require_json = __commonJS({
  "node_modules/superagent/lib/node/parsers/json.js"(exports, module2) {
    "use strict";
    module2.exports = function(res, fn) {
      res.text = "";
      res.setEncoding("utf8");
      res.on("data", function(chunk) {
        res.text += chunk;
      });
      res.on("end", function() {
        var body;
        var err;
        try {
          body = res.text && JSON.parse(res.text);
        } catch (err_) {
          err = err_;
          err.rawResponse = res.text || null;
          err.statusCode = res.statusCode;
        } finally {
          fn(err, body);
        }
      });
    };
  }
});

// node_modules/superagent/lib/node/parsers/text.js
var require_text = __commonJS({
  "node_modules/superagent/lib/node/parsers/text.js"(exports, module2) {
    "use strict";
    module2.exports = function(res, fn) {
      res.text = "";
      res.setEncoding("utf8");
      res.on("data", function(chunk) {
        res.text += chunk;
      });
      res.on("end", fn);
    };
  }
});

// node_modules/superagent/lib/node/parsers/image.js
var require_image = __commonJS({
  "node_modules/superagent/lib/node/parsers/image.js"(exports, module2) {
    "use strict";
    module2.exports = function(res, fn) {
      var data = [];
      res.on("data", function(chunk) {
        data.push(chunk);
      });
      res.on("end", function() {
        fn(null, Buffer.concat(data));
      });
    };
  }
});

// node_modules/superagent/lib/node/parsers/index.js
var require_parsers = __commonJS({
  "node_modules/superagent/lib/node/parsers/index.js"(exports) {
    "use strict";
    exports["application/x-www-form-urlencoded"] = require_urlencoded();
    exports["application/json"] = require_json();
    exports.text = require_text();
    var binary = require_image();
    exports["application/octet-stream"] = binary;
    exports["application/pdf"] = binary;
    exports.image = binary;
  }
});

// node_modules/superagent/lib/node/index.js
var require_node2 = __commonJS({
  "node_modules/superagent/lib/node/index.js"(exports, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _require = require("url");
    var parse3 = _require.parse;
    var format = _require.format;
    var resolve = _require.resolve;
    var Stream = require("stream");
    var https = require("https");
    var http = require("http");
    var fs = require("fs");
    var zlib = require("zlib");
    var util = require("util");
    var qs = require_lib4();
    var mime = require_mime();
    var methods = require_methods();
    var FormData = require_form_data();
    var formidable = require_lib5();
    var debug = require_src3()("superagent");
    var CookieJar = require_cookiejar();
    var semver = require_semver3();
    var safeStringify = require_fast_safe_stringify();
    var utils = require_utils4();
    var RequestBase = require_request_base();
    var _require2 = require_unzip();
    var unzip = _require2.unzip;
    var Response = require_response();
    var http2;
    if (semver.gte(process.version, "v10.10.0"))
      http2 = require_http2wrapper();
    function request2(method, url) {
      if (typeof url === "function") {
        return new exports.Request("GET", method).end(url);
      }
      if (arguments.length === 1) {
        return new exports.Request("GET", method);
      }
      return new exports.Request(method, url);
    }
    module2.exports = request2;
    exports = module2.exports;
    exports.Request = Request;
    exports.agent = require_agent();
    function noop() {
    }
    exports.Response = Response;
    mime.define({
      "application/x-www-form-urlencoded": ["form", "urlencoded", "form-data"]
    }, true);
    exports.protocols = {
      "http:": http,
      "https:": https,
      "http2:": http2
    };
    exports.serialize = {
      "application/x-www-form-urlencoded": qs.stringify,
      "application/json": safeStringify
    };
    exports.parse = require_parsers();
    exports.buffer = {};
    function _initHeaders(req) {
      req._header = {
        // coerces header names to lowercase
      };
      req.header = {
        // preserves header name case
      };
    }
    function Request(method, url) {
      Stream.call(this);
      if (typeof url !== "string")
        url = format(url);
      this._enableHttp2 = Boolean(process.env.HTTP2_TEST);
      this._agent = false;
      this._formData = null;
      this.method = method;
      this.url = url;
      _initHeaders(this);
      this.writable = true;
      this._redirects = 0;
      this.redirects(method === "HEAD" ? 0 : 5);
      this.cookies = "";
      this.qs = {};
      this._query = [];
      this.qsRaw = this._query;
      this._redirectList = [];
      this._streamRequest = false;
      this.once("end", this.clearTimeout.bind(this));
    }
    util.inherits(Request, Stream);
    RequestBase(Request.prototype);
    Request.prototype.http2 = function(bool) {
      if (exports.protocols["http2:"] === void 0) {
        throw new Error("superagent: this version of Node.js does not support http2");
      }
      this._enableHttp2 = bool === void 0 ? true : bool;
      return this;
    };
    Request.prototype.attach = function(field, file, options) {
      if (file) {
        if (this._data) {
          throw new Error("superagent can't mix .send() and .attach()");
        }
        var o = options || {};
        if (typeof options === "string") {
          o = {
            filename: options
          };
        }
        if (typeof file === "string") {
          if (!o.filename)
            o.filename = file;
          debug("creating `fs.ReadStream` instance for file: %s", file);
          file = fs.createReadStream(file);
        } else if (!o.filename && file.path) {
          o.filename = file.path;
        }
        this._getFormData().append(field, file, o);
      }
      return this;
    };
    Request.prototype._getFormData = function() {
      var _this = this;
      if (!this._formData) {
        this._formData = new FormData();
        this._formData.on("error", function(err) {
          debug("FormData error", err);
          if (_this.called) {
            return;
          }
          _this.callback(err);
          _this.abort();
        });
      }
      return this._formData;
    };
    Request.prototype.agent = function(agent) {
      if (arguments.length === 0)
        return this._agent;
      this._agent = agent;
      return this;
    };
    Request.prototype.type = function(type) {
      return this.set("Content-Type", type.includes("/") ? type : mime.getType(type));
    };
    Request.prototype.accept = function(type) {
      return this.set("Accept", type.includes("/") ? type : mime.getType(type));
    };
    Request.prototype.query = function(val) {
      if (typeof val === "string") {
        this._query.push(val);
      } else {
        Object.assign(this.qs, val);
      }
      return this;
    };
    Request.prototype.write = function(data, encoding) {
      var req = this.request();
      if (!this._streamRequest) {
        this._streamRequest = true;
      }
      return req.write(data, encoding);
    };
    Request.prototype.pipe = function(stream, options) {
      this.piped = true;
      this.buffer(false);
      this.end();
      return this._pipeContinue(stream, options);
    };
    Request.prototype._pipeContinue = function(stream, options) {
      var _this2 = this;
      this.req.once("response", function(res) {
        if (isRedirect(res.statusCode) && _this2._redirects++ !== _this2._maxRedirects) {
          return _this2._redirect(res) === _this2 ? _this2._pipeContinue(stream, options) : void 0;
        }
        _this2.res = res;
        _this2._emitResponse();
        if (_this2._aborted)
          return;
        if (_this2._shouldUnzip(res)) {
          var unzipObj = zlib.createUnzip();
          unzipObj.on("error", function(err) {
            if (err && err.code === "Z_BUF_ERROR") {
              stream.emit("end");
              return;
            }
            stream.emit("error", err);
          });
          res.pipe(unzipObj).pipe(stream, options);
        } else {
          res.pipe(stream, options);
        }
        res.once("end", function() {
          _this2.emit("end");
        });
      });
      return stream;
    };
    Request.prototype.buffer = function(val) {
      this._buffer = val !== false;
      return this;
    };
    Request.prototype._redirect = function(res) {
      var url = res.headers.location;
      if (!url) {
        return this.callback(new Error("No location header for redirect"), res);
      }
      debug("redirect %s -> %s", this.url, url);
      url = resolve(this.url, url);
      res.resume();
      var headers = this.req.getHeaders ? this.req.getHeaders() : this.req._headers;
      var changesOrigin = parse3(url).host !== parse3(this.url).host;
      if (res.statusCode === 301 || res.statusCode === 302) {
        headers = utils.cleanHeader(headers, changesOrigin);
        this.method = this.method === "HEAD" ? "HEAD" : "GET";
        this._data = null;
      }
      if (res.statusCode === 303) {
        headers = utils.cleanHeader(headers, changesOrigin);
        this.method = "GET";
        this._data = null;
      }
      delete headers.host;
      delete this.req;
      delete this._formData;
      _initHeaders(this);
      this._endCalled = false;
      this.url = url;
      this.qs = {};
      this._query.length = 0;
      this.set(headers);
      this.emit("redirect", res);
      this._redirectList.push(this.url);
      this.end(this._callback);
      return this;
    };
    Request.prototype.auth = function(user, pass, options) {
      if (arguments.length === 1)
        pass = "";
      if (_typeof(pass) === "object" && pass !== null) {
        options = pass;
        pass = "";
      }
      if (!options) {
        options = {
          type: "basic"
        };
      }
      var encoder = function encoder2(string) {
        return Buffer.from(string).toString("base64");
      };
      return this._auth(user, pass, options, encoder);
    };
    Request.prototype.ca = function(cert) {
      this._ca = cert;
      return this;
    };
    Request.prototype.key = function(cert) {
      this._key = cert;
      return this;
    };
    Request.prototype.pfx = function(cert) {
      if (_typeof(cert) === "object" && !Buffer.isBuffer(cert)) {
        this._pfx = cert.pfx;
        this._passphrase = cert.passphrase;
      } else {
        this._pfx = cert;
      }
      return this;
    };
    Request.prototype.cert = function(cert) {
      this._cert = cert;
      return this;
    };
    Request.prototype.disableTLSCerts = function() {
      this._disableTLSCerts = true;
      return this;
    };
    Request.prototype.request = function() {
      var _this3 = this;
      if (this.req)
        return this.req;
      var options = {};
      try {
        var query = qs.stringify(this.qs, {
          indices: false,
          strictNullHandling: true
        });
        if (query) {
          this.qs = {};
          this._query.push(query);
        }
        this._finalizeQueryString();
      } catch (err) {
        return this.emit("error", err);
      }
      var url = this.url;
      var retries = this._retries;
      var queryStringBackticks;
      if (url.includes("`")) {
        var queryStartIndex = url.indexOf("?");
        if (queryStartIndex !== -1) {
          var queryString = url.slice(queryStartIndex + 1);
          queryStringBackticks = queryString.match(/`|%60/g);
        }
      }
      if (url.indexOf("http") !== 0)
        url = "http://".concat(url);
      url = parse3(url);
      if (queryStringBackticks) {
        var i = 0;
        url.query = url.query.replace(/%60/g, function() {
          return queryStringBackticks[i++];
        });
        url.search = "?".concat(url.query);
        url.path = url.pathname + url.search;
      }
      if (/^https?\+unix:/.test(url.protocol) === true) {
        url.protocol = "".concat(url.protocol.split("+")[0], ":");
        var unixParts = url.path.match(/^([^/]+)(.+)$/);
        options.socketPath = unixParts[1].replace(/%2F/g, "/");
        url.path = unixParts[2];
      }
      if (this._connectOverride) {
        var _url = url, hostname = _url.hostname;
        var match = hostname in this._connectOverride ? this._connectOverride[hostname] : this._connectOverride["*"];
        if (match) {
          if (!this._header.host) {
            this.set("host", url.host);
          }
          var newHost;
          var newPort;
          if (_typeof(match) === "object") {
            newHost = match.host;
            newPort = match.port;
          } else {
            newHost = match;
            newPort = url.port;
          }
          url.host = /:/.test(newHost) ? "[".concat(newHost, "]") : newHost;
          if (newPort) {
            url.host += ":".concat(newPort);
            url.port = newPort;
          }
          url.hostname = newHost;
        }
      }
      options.method = this.method;
      options.port = url.port;
      options.path = url.path;
      options.host = url.hostname;
      options.ca = this._ca;
      options.key = this._key;
      options.pfx = this._pfx;
      options.cert = this._cert;
      options.passphrase = this._passphrase;
      options.agent = this._agent;
      options.rejectUnauthorized = typeof this._disableTLSCerts === "boolean" ? !this._disableTLSCerts : process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0";
      if (this._header.host) {
        options.servername = this._header.host.replace(/:\d+$/, "");
      }
      if (this._trustLocalhost && /^(?:localhost|127\.0\.0\.\d+|(0*:)+:0*1)$/.test(url.hostname)) {
        options.rejectUnauthorized = false;
      }
      var mod = this._enableHttp2 ? exports.protocols["http2:"].setProtocol(url.protocol) : exports.protocols[url.protocol];
      this.req = mod.request(options);
      var req = this.req;
      req.setNoDelay(true);
      if (options.method !== "HEAD") {
        req.setHeader("Accept-Encoding", "gzip, deflate");
      }
      this.protocol = url.protocol;
      this.host = url.host;
      req.once("drain", function() {
        _this3.emit("drain");
      });
      req.on("error", function(err) {
        if (_this3._aborted)
          return;
        if (_this3._retries !== retries)
          return;
        if (_this3.response)
          return;
        _this3.callback(err);
      });
      if (url.auth) {
        var auth = url.auth.split(":");
        this.auth(auth[0], auth[1]);
      }
      if (this.username && this.password) {
        this.auth(this.username, this.password);
      }
      for (var key in this.header) {
        if (Object.prototype.hasOwnProperty.call(this.header, key))
          req.setHeader(key, this.header[key]);
      }
      if (this.cookies) {
        if (Object.prototype.hasOwnProperty.call(this._header, "cookie")) {
          var tmpJar = new CookieJar.CookieJar();
          tmpJar.setCookies(this._header.cookie.split(";"));
          tmpJar.setCookies(this.cookies.split(";"));
          req.setHeader("Cookie", tmpJar.getCookies(CookieJar.CookieAccessInfo.All).toValueString());
        } else {
          req.setHeader("Cookie", this.cookies);
        }
      }
      return req;
    };
    Request.prototype.callback = function(err, res) {
      if (this._shouldRetry(err, res)) {
        return this._retry();
      }
      var fn = this._callback || noop;
      this.clearTimeout();
      if (this.called)
        return console.warn("superagent: double callback bug");
      this.called = true;
      if (!err) {
        try {
          if (!this._isResponseOK(res)) {
            var msg = "Unsuccessful HTTP response";
            if (res) {
              msg = http.STATUS_CODES[res.status] || msg;
            }
            err = new Error(msg);
            err.status = res ? res.status : void 0;
          }
        } catch (err_) {
          err = err_;
        }
      }
      if (!err) {
        return fn(null, res);
      }
      err.response = res;
      if (this._maxRetries)
        err.retries = this._retries - 1;
      if (err && this.listeners("error").length > 0) {
        this.emit("error", err);
      }
      fn(err, res);
    };
    Request.prototype._isHost = function(obj) {
      return Buffer.isBuffer(obj) || obj instanceof Stream || obj instanceof FormData;
    };
    Request.prototype._emitResponse = function(body, files) {
      var response = new Response(this);
      this.response = response;
      response.redirects = this._redirectList;
      if (void 0 !== body) {
        response.body = body;
      }
      response.files = files;
      if (this._endCalled) {
        response.pipe = function() {
          throw new Error("end() has already been called, so it's too late to start piping");
        };
      }
      this.emit("response", response);
      return response;
    };
    Request.prototype.end = function(fn) {
      this.request();
      debug("%s %s", this.method, this.url);
      if (this._endCalled) {
        throw new Error(".end() was called twice. This is not supported in superagent");
      }
      this._endCalled = true;
      this._callback = fn || noop;
      this._end();
    };
    Request.prototype._end = function() {
      var _this4 = this;
      if (this._aborted)
        return this.callback(new Error("The request has been aborted even before .end() was called"));
      var data = this._data;
      var req = this.req;
      var method = this.method;
      this._setTimeouts();
      if (method !== "HEAD" && !req._headerSent) {
        if (typeof data !== "string") {
          var contentType = req.getHeader("Content-Type");
          if (contentType)
            contentType = contentType.split(";")[0];
          var serialize = this._serializer || exports.serialize[contentType];
          if (!serialize && isJSON(contentType)) {
            serialize = exports.serialize["application/json"];
          }
          if (serialize)
            data = serialize(data);
        }
        if (data && !req.getHeader("Content-Length")) {
          req.setHeader("Content-Length", Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));
        }
      }
      req.once("response", function(res) {
        debug("%s %s -> %s", _this4.method, _this4.url, res.statusCode);
        if (_this4._responseTimeoutTimer) {
          clearTimeout(_this4._responseTimeoutTimer);
        }
        if (_this4.piped) {
          return;
        }
        var max = _this4._maxRedirects;
        var mime2 = utils.type(res.headers["content-type"] || "") || "text/plain";
        var type = mime2.split("/")[0];
        var multipart = type === "multipart";
        var redirect = isRedirect(res.statusCode);
        var responseType = _this4._responseType;
        _this4.res = res;
        if (redirect && _this4._redirects++ !== max) {
          return _this4._redirect(res);
        }
        if (_this4.method === "HEAD") {
          _this4.emit("end");
          _this4.callback(null, _this4._emitResponse());
          return;
        }
        if (_this4._shouldUnzip(res)) {
          unzip(req, res);
        }
        var buffer = _this4._buffer;
        if (buffer === void 0 && mime2 in exports.buffer) {
          buffer = Boolean(exports.buffer[mime2]);
        }
        var parser = _this4._parser;
        if (void 0 === buffer) {
          if (parser) {
            console.warn("A custom superagent parser has been set, but buffering strategy for the parser hasn't been configured. Call `req.buffer(true or false)` or set `superagent.buffer[mime] = true or false`");
            buffer = true;
          }
        }
        if (!parser) {
          if (responseType) {
            parser = exports.parse.image;
            buffer = true;
          } else if (multipart) {
            var form = new formidable.IncomingForm();
            parser = form.parse.bind(form);
            buffer = true;
          } else if (isImageOrVideo(mime2)) {
            parser = exports.parse.image;
            buffer = true;
          } else if (exports.parse[mime2]) {
            parser = exports.parse[mime2];
          } else if (type === "text") {
            parser = exports.parse.text;
            buffer = buffer !== false;
          } else if (isJSON(mime2)) {
            parser = exports.parse["application/json"];
            buffer = buffer !== false;
          } else if (buffer) {
            parser = exports.parse.text;
          } else if (void 0 === buffer) {
            parser = exports.parse.image;
            buffer = true;
          }
        }
        if (void 0 === buffer && isText(mime2) || isJSON(mime2)) {
          buffer = true;
        }
        _this4._resBuffered = buffer;
        var parserHandlesEnd = false;
        if (buffer) {
          var responseBytesLeft = _this4._maxResponseSize || 2e8;
          res.on("data", function(buf) {
            responseBytesLeft -= buf.byteLength || buf.length;
            if (responseBytesLeft < 0) {
              var err = new Error("Maximum response size reached");
              err.code = "ETOOLARGE";
              parserHandlesEnd = false;
              res.destroy(err);
            }
          });
        }
        if (parser) {
          try {
            parserHandlesEnd = buffer;
            parser(res, function(err, obj, files) {
              if (_this4.timedout) {
                return;
              }
              if (err && !_this4._aborted) {
                return _this4.callback(err);
              }
              if (parserHandlesEnd) {
                _this4.emit("end");
                _this4.callback(null, _this4._emitResponse(obj, files));
              }
            });
          } catch (err) {
            _this4.callback(err);
            return;
          }
        }
        _this4.res = res;
        if (!buffer) {
          debug("unbuffered %s %s", _this4.method, _this4.url);
          _this4.callback(null, _this4._emitResponse());
          if (multipart)
            return;
          res.once("end", function() {
            debug("end %s %s", _this4.method, _this4.url);
            _this4.emit("end");
          });
          return;
        }
        res.once("error", function(err) {
          parserHandlesEnd = false;
          _this4.callback(err, null);
        });
        if (!parserHandlesEnd)
          res.once("end", function() {
            debug("end %s %s", _this4.method, _this4.url);
            _this4.emit("end");
            _this4.callback(null, _this4._emitResponse());
          });
      });
      this.emit("request", this);
      var getProgressMonitor = function getProgressMonitor2() {
        var lengthComputable = true;
        var total = req.getHeader("Content-Length");
        var loaded = 0;
        var progress = new Stream.Transform();
        progress._transform = function(chunk, encoding, cb) {
          loaded += chunk.length;
          _this4.emit("progress", {
            direction: "upload",
            lengthComputable,
            loaded,
            total
          });
          cb(null, chunk);
        };
        return progress;
      };
      var bufferToChunks = function bufferToChunks2(buffer) {
        var chunkSize = 16 * 1024;
        var chunking = new Stream.Readable();
        var totalLength = buffer.length;
        var remainder = totalLength % chunkSize;
        var cutoff = totalLength - remainder;
        for (var i2 = 0; i2 < cutoff; i2 += chunkSize) {
          var chunk = buffer.slice(i2, i2 + chunkSize);
          chunking.push(chunk);
        }
        if (remainder > 0) {
          var remainderBuffer = buffer.slice(-remainder);
          chunking.push(remainderBuffer);
        }
        chunking.push(null);
        return chunking;
      };
      var formData = this._formData;
      if (formData) {
        var headers = formData.getHeaders();
        for (var i in headers) {
          if (Object.prototype.hasOwnProperty.call(headers, i)) {
            debug('setting FormData header: "%s: %s"', i, headers[i]);
            req.setHeader(i, headers[i]);
          }
        }
        formData.getLength(function(err, length) {
          debug("got FormData Content-Length: %s", length);
          if (typeof length === "number") {
            req.setHeader("Content-Length", length);
          }
          formData.pipe(getProgressMonitor()).pipe(req);
        });
      } else if (Buffer.isBuffer(data)) {
        bufferToChunks(data).pipe(getProgressMonitor()).pipe(req);
      } else {
        req.end(data);
      }
    };
    Request.prototype._shouldUnzip = function(res) {
      if (res.statusCode === 204 || res.statusCode === 304) {
        return false;
      }
      if (res.headers["content-length"] === "0") {
        return false;
      }
      return /^\s*(?:deflate|gzip)\s*$/.test(res.headers["content-encoding"]);
    };
    Request.prototype.connect = function(connectOverride) {
      if (typeof connectOverride === "string") {
        this._connectOverride = {
          "*": connectOverride
        };
      } else if (_typeof(connectOverride) === "object") {
        this._connectOverride = connectOverride;
      } else {
        this._connectOverride = void 0;
      }
      return this;
    };
    Request.prototype.trustLocalhost = function(toggle) {
      this._trustLocalhost = toggle === void 0 ? true : toggle;
      return this;
    };
    if (!methods.includes("del")) {
      methods = methods.slice(0);
      methods.push("del");
    }
    methods.forEach(function(method) {
      var name = method;
      method = method === "del" ? "delete" : method;
      method = method.toUpperCase();
      request2[name] = function(url, data, fn) {
        var req = request2(method, url);
        if (typeof data === "function") {
          fn = data;
          data = null;
        }
        if (data) {
          if (method === "GET" || method === "HEAD") {
            req.query(data);
          } else {
            req.send(data);
          }
        }
        if (fn)
          req.end(fn);
        return req;
      };
    });
    function isText(mime2) {
      var parts = mime2.split("/");
      var type = parts[0];
      var subtype = parts[1];
      return type === "text" || subtype === "x-www-form-urlencoded";
    }
    function isImageOrVideo(mime2) {
      var type = mime2.split("/")[0];
      return type === "image" || type === "video";
    }
    function isJSON(mime2) {
      return /[/+]json($|[^-\w])/.test(mime2);
    }
    function isRedirect(code) {
      return [301, 302, 303, 305, 307, 308].includes(code);
    }
  }
});

// node_modules/asana/dist/ApiClient.js
var require_ApiClient = __commonJS({
  "node_modules/asana/dist/ApiClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApiClient = void 0;
    var _superagent = _interopRequireDefault(require_node2());
    var _querystring = _interopRequireDefault(require("querystring"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ApiClient = /* @__PURE__ */ function() {
      function ApiClient2() {
        _classCallCheck(this, ApiClient2);
        this.basePath = "https://app.asana.com/api/1.0".replace(/\/+$/, "");
        this.authentications = {
          "oauth2": {
            type: "oauth2"
          }
        };
        this.defaultHeaders = {};
        this.timeout = 6e4;
        this.cache = true;
        this.enableCookies = false;
        if (typeof window === "undefined") {
          this.agent = new _superagent["default"].agent();
        }
        this.requestAgent = null;
      }
      _createClass(ApiClient2, [{
        key: "paramToString",
        value: function paramToString(param) {
          if (param == void 0 || param == null) {
            return "";
          }
          if (param instanceof Date) {
            return param.toJSON();
          }
          return param.toString();
        }
        /**
        * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
        * NOTE: query parameters are not handled here.
        * @param {String} path The path to append to the base URL.
        * @param {Object} pathParams The parameter values to append.
        * @returns {String} The encoded path with parameter values substituted.
        */
      }, {
        key: "buildUrl",
        value: function buildUrl(path, pathParams) {
          var _this = this;
          if (!path.match(/^\//)) {
            path = "/" + path;
          }
          var url = this.basePath + path;
          url = url.replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
            var value;
            if (pathParams.hasOwnProperty(key)) {
              value = _this.paramToString(pathParams[key]);
            } else {
              value = fullMatch;
            }
            return encodeURIComponent(value);
          });
          return url;
        }
        /**
        * Checks whether the given content type represents JSON.<br>
        * JSON content type examples:<br>
        * <ul>
        * <li>application/json</li>
        * <li>application/json; charset=UTF8</li>
        * <li>APPLICATION/JSON</li>
        * </ul>
        * @param {String} contentType The MIME content type to check.
        * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
        */
      }, {
        key: "isJsonMime",
        value: function isJsonMime(contentType) {
          return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
        }
        /**
        * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
        * @param {Array.<String>} contentTypes
        * @returns {String} The chosen content type, preferring JSON.
        */
      }, {
        key: "jsonPreferredMime",
        value: function jsonPreferredMime(contentTypes) {
          for (var i = 0; i < contentTypes.length; i++) {
            if (this.isJsonMime(contentTypes[i])) {
              return contentTypes[i];
            }
          }
          return contentTypes[0];
        }
        /**
        * Checks whether the given parameter value represents file-like content.
        * @param param The parameter to check.
        * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
        */
      }, {
        key: "isFileParam",
        value: function isFileParam(param) {
          if (typeof require === "function") {
            var fs;
            try {
              fs = require("fs");
            } catch (err) {
            }
            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
              return true;
            }
          }
          if (typeof Buffer === "function" && param instanceof Buffer) {
            return true;
          }
          if (typeof Blob === "function" && param instanceof Blob) {
            return true;
          }
          if (typeof File === "function" && param instanceof File) {
            return true;
          }
          return false;
        }
        /**
        * Normalizes parameter values:
        * <ul>
        * <li>remove nils</li>
        * <li>keep files and arrays</li>
        * <li>format to string with `paramToString` for other cases</li>
        * </ul>
        * @param {Object.<String, Object>} params The parameters as object properties.
        * @returns {Object.<String, Object>} normalized parameters.
        */
      }, {
        key: "normalizeParams",
        value: function normalizeParams(params) {
          var newParams = {};
          for (var key in params) {
            if (params.hasOwnProperty(key) && params[key] != void 0 && params[key] != null) {
              var value = params[key];
              if (this.isFileParam(value) || Array.isArray(value)) {
                newParams[key] = value;
              } else {
                newParams[key] = this.paramToString(value);
              }
            }
          }
          return newParams;
        }
        /**
        * Enumeration of collection format separator strategies.
        * @enum {String}
        * @readonly
        */
      }, {
        key: "buildCollectionParam",
        value: (
          /**
          * Builds a string representation of an array-type actual parameter, according to the given collection format.
          * @param {Array} param An array parameter.
          * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
          * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
          * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
          */
          function buildCollectionParam(param, collectionFormat) {
            if (param == null) {
              return null;
            }
            switch (collectionFormat) {
              case "csv":
                return param.map(this.paramToString).join(",");
              case "ssv":
                return param.map(this.paramToString).join(" ");
              case "tsv":
                return param.map(this.paramToString).join("	");
              case "pipes":
                return param.map(this.paramToString).join("|");
              case "multi":
                return param.map(this.paramToString);
              default:
                throw new Error("Unknown collection format: " + collectionFormat);
            }
          }
        )
        /**
        * Applies authentication headers to the request.
        * @param {Object} request The request object created by a <code>superagent()</code> call.
        * @param {Array.<String>} authNames An array of authentication method names.
        */
      }, {
        key: "applyAuthToRequest",
        value: function applyAuthToRequest(request2, authNames) {
          var _this2 = this;
          authNames.forEach(function(authName) {
            var auth = _this2.authentications[authName];
            switch (auth.type) {
              case "basic":
                if (auth.username || auth.password) {
                  request2.auth(auth.username || "", auth.password || "");
                }
                break;
              case "apiKey":
                if (auth.apiKey) {
                  var data = {};
                  if (auth.apiKeyPrefix) {
                    data[auth.name] = auth.apiKeyPrefix + " " + auth.apiKey;
                  } else {
                    data[auth.name] = auth.apiKey;
                  }
                  if (auth["in"] === "header") {
                    request2.set(data);
                  } else {
                    request2.query(data);
                  }
                }
                break;
              case "oauth2":
                if (auth.accessToken) {
                  request2.set({
                    "Authorization": "Bearer " + auth.accessToken
                  });
                }
                break;
              default:
                throw new Error("Unknown authentication type: " + auth.type);
            }
          });
        }
        /**
        * Deserializes an HTTP response body into a value of the specified type.
        * @param {Object} response A SuperAgent response object.
        * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
        * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
        * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
        * all properties on <code>data<code> will be converted to this type.
        * @returns A value of the specified type.
        */
      }, {
        key: "deserialize",
        value: function deserialize(response, returnType) {
          if (response == null || returnType == null || response.status == 204) {
            return null;
          }
          var data = response.body;
          if (data == null || _typeof(data) === "object" && typeof data.length === "undefined" && !Object.keys(data).length) {
            data = response.text;
          }
          return ApiClient2.convertToType(data, returnType);
        }
        /**
        * Callback function to receive the result of the operation.
        * @callback module:ApiClient~callApiCallback
        * @param {String} error Error message, if any.
        * @param data The data returned by the service call.
        * @param {String} response The complete HTTP response.
        */
        /**
        * Invokes the REST service using the supplied settings and parameters.
        * @param {String} path The base URL to invoke.
        * @param {String} httpMethod The HTTP method to use.
        * @param {Object.<String, String>} pathParams A map of path parameters and their values.
        * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
        * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
        * @param {Object.<String, Object>} formParams A map of form parameters and their values.
        * @param {Object} bodyParam The value to pass as the request body.
        * @param {Array.<String>} authNames An array of authentication type names.
        * @param {Array.<String>} contentTypes An array of request MIME types.
        * @param {Array.<String>} accepts An array of acceptable response MIME types.
        * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
        * constructor for a complex type.
        * @param {module:ApiClient~callApiCallback} callback The callback function.
        * @returns {Object} The SuperAgent request object.
        */
      }, {
        key: "callApi",
        value: function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, callback) {
          var _this3 = this;
          var url = this.buildUrl(path, pathParams);
          var request2 = (0, _superagent["default"])(httpMethod, url);
          this.applyAuthToRequest(request2, authNames);
          if (httpMethod.toUpperCase() === "GET" && this.cache === false) {
            queryParams["_"] = (/* @__PURE__ */ new Date()).getTime();
          }
          request2.query(this.normalizeParams(queryParams));
          headerParams["X-Asana-Client-Lib"] = _querystring["default"].stringify({
            "version": "2.0.3",
            "language": "NodeJS",
            "language_version": process.version,
            "os": process.platform
          });
          request2.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
          if (this.requestAgent) {
            request2.agent(this.requestAgent);
          }
          request2.timeout(this.timeout);
          var contentType = this.jsonPreferredMime(contentTypes);
          if (contentType) {
            if (contentType != "multipart/form-data") {
              request2.type(contentType);
            }
          } else if (!request2.header["Content-Type"]) {
            request2.type("application/json");
          }
          if (contentType === "application/x-www-form-urlencoded") {
            request2.send(_querystring["default"].stringify(this.normalizeParams(formParams)));
          } else if (contentType == "multipart/form-data") {
            var _formParams = this.normalizeParams(formParams);
            for (var key in _formParams) {
              if (_formParams.hasOwnProperty(key)) {
                if (this.isFileParam(_formParams[key])) {
                  request2.attach(key, _formParams[key]);
                } else {
                  request2.field(key, _formParams[key]);
                }
              }
            }
          } else if (bodyParam) {
            if (bodyParam.data.hasOwnProperty("_public")) {
              bodyParam.data["public"] = bodyParam.data["_public"];
              delete bodyParam.data["_public"];
            }
            request2.send(bodyParam);
          }
          var accept = this.jsonPreferredMime(accepts);
          if (accept) {
            request2.accept(accept);
          }
          if (returnType === "Blob") {
            request2.responseType("blob");
          } else if (returnType === "String") {
            request2.responseType("string");
          }
          if (this.enableCookies) {
            if (typeof window === "undefined") {
              this.agent.attachCookies(request2);
            } else {
              request2.withCredentials();
            }
          }
          request2.end(function(error2, response) {
            if (callback) {
              var data = null;
              if (!error2) {
                try {
                  data = _this3.deserialize(response, returnType);
                  if (_this3.enableCookies && typeof window === "undefined") {
                    _this3.agent.saveCookies(response);
                  }
                } catch (err) {
                  error2 = err;
                }
              }
              callback(error2, data, response);
            }
          });
          return request2;
        }
        /**
        * Parses an ISO-8601 string representation of a date value.
        * @param {String} str The date value as a string.
        * @returns {Date} The parsed date object.
        */
      }], [{
        key: "parseDate",
        value: function parseDate(str) {
          return new Date(str);
        }
        /**
        * Converts a value to the specified type.
        * @param {(String|Object)} data The data to convert, as a string or object.
        * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
        * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
        * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
        * all properties on <code>data<code> will be converted to this type.
        * @returns An instance of the specified type or null or undefined if data is null or undefined.
        */
      }, {
        key: "convertToType",
        value: function convertToType(data, type) {
          if (data === null || data === void 0)
            return data;
          switch (type) {
            case "Boolean":
              return Boolean(data);
            case "Integer":
              return parseInt(data, 10);
            case "Number":
              return parseFloat(data);
            case "String":
              return String(data);
            case "Date":
              return ApiClient2.parseDate(String(data));
            case "Blob":
              return data;
            default:
              if (type === Object) {
                return data;
              } else if (typeof type === "function") {
                return type.constructFromObject(data);
              } else if (Array.isArray(type)) {
                var itemType = type[0];
                return data.map(function(item) {
                  return ApiClient2.convertToType(item, itemType);
                });
              } else if (_typeof(type) === "object") {
                var keyType, valueType;
                for (var k in type) {
                  if (type.hasOwnProperty(k)) {
                    keyType = k;
                    valueType = type[k];
                    break;
                  }
                }
                var result = {};
                for (var k in data) {
                  if (data.hasOwnProperty(k)) {
                    var key = ApiClient2.convertToType(k, keyType);
                    var value = ApiClient2.convertToType(data[k], valueType);
                    result[key] = value;
                  }
                }
                return result;
              } else {
                return data;
              }
          }
        }
        /**
        * Constructs a new map or array model from REST data.
        * @param data {Object|Array} The REST data.
        * @param obj {Object|Array} The target object or array.
        */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj, itemType) {
          if (Array.isArray(data)) {
            for (var i = 0; i < data.length; i++) {
              if (data.hasOwnProperty(i))
                obj[i] = ApiClient2.convertToType(data[i], itemType);
            }
          } else {
            for (var k in data) {
              if (data.hasOwnProperty(k))
                obj[k] = ApiClient2.convertToType(data[k], itemType);
            }
          }
        }
      }]);
      return ApiClient2;
    }();
    exports.ApiClient = ApiClient;
    _defineProperty(ApiClient, "CollectionFormatEnum", {
      /**
       * Comma-separated values. Value: <code>csv</code>
       * @const
       */
      CSV: ",",
      /**
       * Space-separated values. Value: <code>ssv</code>
       * @const
       */
      SSV: " ",
      /**
       * Tab-separated values. Value: <code>tsv</code>
       * @const
       */
      TSV: "	",
      /**
       * Pipe(|)-separated values. Value: <code>pipes</code>
       * @const
       */
      PIPES: "|",
      /**
       * Native array. Value: <code>multi</code>
       * @const
       */
      MULTI: "multi"
    });
    ApiClient.instance = new ApiClient();
  }
});

// node_modules/asana/dist/model/AddCustomFieldSettingRequest.js
var require_AddCustomFieldSettingRequest = __commonJS({
  "node_modules/asana/dist/model/AddCustomFieldSettingRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AddCustomFieldSettingRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AddCustomFieldSettingRequest = /* @__PURE__ */ function() {
      function AddCustomFieldSettingRequest2(custom_field) {
        _classCallCheck(this, AddCustomFieldSettingRequest2);
        this.custom_field = custom_field;
      }
      _createClass(AddCustomFieldSettingRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AddCustomFieldSettingRequest2();
            if (data.hasOwnProperty("custom_field"))
              obj.custom_field = _ApiClient.ApiClient.convertToType(data["custom_field"], "String");
            if (data.hasOwnProperty("is_important"))
              obj.is_important = _ApiClient.ApiClient.convertToType(data["is_important"], "Boolean");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
          }
          return obj;
        }
      }]);
      return AddCustomFieldSettingRequest2;
    }();
    exports.AddCustomFieldSettingRequest = AddCustomFieldSettingRequest;
    AddCustomFieldSettingRequest.prototype.custom_field = void 0;
    AddCustomFieldSettingRequest.prototype.is_important = void 0;
    AddCustomFieldSettingRequest.prototype.insert_before = void 0;
    AddCustomFieldSettingRequest.prototype.insert_after = void 0;
  }
});

// node_modules/asana/dist/model/AddFollowersRequest.js
var require_AddFollowersRequest = __commonJS({
  "node_modules/asana/dist/model/AddFollowersRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AddFollowersRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AddFollowersRequest = /* @__PURE__ */ function() {
      function AddFollowersRequest2(followers) {
        _classCallCheck(this, AddFollowersRequest2);
        this.followers = followers;
      }
      _createClass(AddFollowersRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AddFollowersRequest2();
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], "String");
          }
          return obj;
        }
      }]);
      return AddFollowersRequest2;
    }();
    exports.AddFollowersRequest = AddFollowersRequest;
    AddFollowersRequest.prototype.followers = void 0;
  }
});

// node_modules/asana/dist/model/AddMembersRequest.js
var require_AddMembersRequest = __commonJS({
  "node_modules/asana/dist/model/AddMembersRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AddMembersRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AddMembersRequest = /* @__PURE__ */ function() {
      function AddMembersRequest2(members) {
        _classCallCheck(this, AddMembersRequest2);
        this.members = members;
      }
      _createClass(AddMembersRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AddMembersRequest2();
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], "String");
          }
          return obj;
        }
      }]);
      return AddMembersRequest2;
    }();
    exports.AddMembersRequest = AddMembersRequest;
    AddMembersRequest.prototype.members = void 0;
  }
});

// node_modules/asana/dist/model/AllOfProjectResponseOwner.js
var require_AllOfProjectResponseOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfProjectResponseOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfProjectResponseOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfProjectResponseOwner = /* @__PURE__ */ function() {
      function AllOfProjectResponseOwner2() {
        _classCallCheck(this, AllOfProjectResponseOwner2);
      }
      _createClass(AllOfProjectResponseOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfProjectResponseOwner2();
          }
          return obj;
        }
      }]);
      return AllOfProjectResponseOwner2;
    }();
    exports.AllOfProjectResponseOwner = AllOfProjectResponseOwner;
  }
});

// node_modules/asana/dist/model/AllOfProjectTemplateBaseOwner.js
var require_AllOfProjectTemplateBaseOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfProjectTemplateBaseOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfProjectTemplateBaseOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfProjectTemplateBaseOwner = /* @__PURE__ */ function() {
      function AllOfProjectTemplateBaseOwner2() {
        _classCallCheck(this, AllOfProjectTemplateBaseOwner2);
      }
      _createClass(AllOfProjectTemplateBaseOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfProjectTemplateBaseOwner2();
          }
          return obj;
        }
      }]);
      return AllOfProjectTemplateBaseOwner2;
    }();
    exports.AllOfProjectTemplateBaseOwner = AllOfProjectTemplateBaseOwner;
  }
});

// node_modules/asana/dist/model/AllOfProjectTemplateResponseOwner.js
var require_AllOfProjectTemplateResponseOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfProjectTemplateResponseOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfProjectTemplateResponseOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfProjectTemplateResponseOwner = /* @__PURE__ */ function() {
      function AllOfProjectTemplateResponseOwner2() {
        _classCallCheck(this, AllOfProjectTemplateResponseOwner2);
      }
      _createClass(AllOfProjectTemplateResponseOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfProjectTemplateResponseOwner2();
          }
          return obj;
        }
      }]);
      return AllOfProjectTemplateResponseOwner2;
    }();
    exports.AllOfProjectTemplateResponseOwner = AllOfProjectTemplateResponseOwner;
  }
});

// node_modules/asana/dist/model/AllOfStoryResponseNewDateValue.js
var require_AllOfStoryResponseNewDateValue = __commonJS({
  "node_modules/asana/dist/model/AllOfStoryResponseNewDateValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfStoryResponseNewDateValue = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfStoryResponseNewDateValue = /* @__PURE__ */ function() {
      function AllOfStoryResponseNewDateValue2() {
        _classCallCheck(this, AllOfStoryResponseNewDateValue2);
      }
      _createClass(AllOfStoryResponseNewDateValue2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfStoryResponseNewDateValue2();
          }
          return obj;
        }
      }]);
      return AllOfStoryResponseNewDateValue2;
    }();
    exports.AllOfStoryResponseNewDateValue = AllOfStoryResponseNewDateValue;
  }
});

// node_modules/asana/dist/model/AllOfStoryResponseOldDateValue.js
var require_AllOfStoryResponseOldDateValue = __commonJS({
  "node_modules/asana/dist/model/AllOfStoryResponseOldDateValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfStoryResponseOldDateValue = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfStoryResponseOldDateValue = /* @__PURE__ */ function() {
      function AllOfStoryResponseOldDateValue2() {
        _classCallCheck(this, AllOfStoryResponseOldDateValue2);
      }
      _createClass(AllOfStoryResponseOldDateValue2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfStoryResponseOldDateValue2();
          }
          return obj;
        }
      }]);
      return AllOfStoryResponseOldDateValue2;
    }();
    exports.AllOfStoryResponseOldDateValue = AllOfStoryResponseOldDateValue;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListBaseOwner.js
var require_AllOfUserTaskListBaseOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListBaseOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListBaseOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListBaseOwner = /* @__PURE__ */ function() {
      function AllOfUserTaskListBaseOwner2() {
        _classCallCheck(this, AllOfUserTaskListBaseOwner2);
      }
      _createClass(AllOfUserTaskListBaseOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListBaseOwner2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListBaseOwner2;
    }();
    exports.AllOfUserTaskListBaseOwner = AllOfUserTaskListBaseOwner;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListBaseWorkspace.js
var require_AllOfUserTaskListBaseWorkspace = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListBaseWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListBaseWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListBaseWorkspace = /* @__PURE__ */ function() {
      function AllOfUserTaskListBaseWorkspace2() {
        _classCallCheck(this, AllOfUserTaskListBaseWorkspace2);
      }
      _createClass(AllOfUserTaskListBaseWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListBaseWorkspace2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListBaseWorkspace2;
    }();
    exports.AllOfUserTaskListBaseWorkspace = AllOfUserTaskListBaseWorkspace;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListCompactOwner.js
var require_AllOfUserTaskListCompactOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListCompactOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListCompactOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListCompactOwner = /* @__PURE__ */ function() {
      function AllOfUserTaskListCompactOwner2() {
        _classCallCheck(this, AllOfUserTaskListCompactOwner2);
      }
      _createClass(AllOfUserTaskListCompactOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListCompactOwner2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListCompactOwner2;
    }();
    exports.AllOfUserTaskListCompactOwner = AllOfUserTaskListCompactOwner;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListCompactWorkspace.js
var require_AllOfUserTaskListCompactWorkspace = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListCompactWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListCompactWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListCompactWorkspace = /* @__PURE__ */ function() {
      function AllOfUserTaskListCompactWorkspace2() {
        _classCallCheck(this, AllOfUserTaskListCompactWorkspace2);
      }
      _createClass(AllOfUserTaskListCompactWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListCompactWorkspace2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListCompactWorkspace2;
    }();
    exports.AllOfUserTaskListCompactWorkspace = AllOfUserTaskListCompactWorkspace;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListRequestOwner.js
var require_AllOfUserTaskListRequestOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListRequestOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListRequestOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListRequestOwner = /* @__PURE__ */ function() {
      function AllOfUserTaskListRequestOwner2() {
        _classCallCheck(this, AllOfUserTaskListRequestOwner2);
      }
      _createClass(AllOfUserTaskListRequestOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListRequestOwner2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListRequestOwner2;
    }();
    exports.AllOfUserTaskListRequestOwner = AllOfUserTaskListRequestOwner;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListRequestWorkspace.js
var require_AllOfUserTaskListRequestWorkspace = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListRequestWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListRequestWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListRequestWorkspace = /* @__PURE__ */ function() {
      function AllOfUserTaskListRequestWorkspace2() {
        _classCallCheck(this, AllOfUserTaskListRequestWorkspace2);
      }
      _createClass(AllOfUserTaskListRequestWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListRequestWorkspace2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListRequestWorkspace2;
    }();
    exports.AllOfUserTaskListRequestWorkspace = AllOfUserTaskListRequestWorkspace;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListResponseOwner.js
var require_AllOfUserTaskListResponseOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListResponseOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListResponseOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListResponseOwner = /* @__PURE__ */ function() {
      function AllOfUserTaskListResponseOwner2() {
        _classCallCheck(this, AllOfUserTaskListResponseOwner2);
      }
      _createClass(AllOfUserTaskListResponseOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListResponseOwner2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListResponseOwner2;
    }();
    exports.AllOfUserTaskListResponseOwner = AllOfUserTaskListResponseOwner;
  }
});

// node_modules/asana/dist/model/AllOfUserTaskListResponseWorkspace.js
var require_AllOfUserTaskListResponseWorkspace = __commonJS({
  "node_modules/asana/dist/model/AllOfUserTaskListResponseWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfUserTaskListResponseWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfUserTaskListResponseWorkspace = /* @__PURE__ */ function() {
      function AllOfUserTaskListResponseWorkspace2() {
        _classCallCheck(this, AllOfUserTaskListResponseWorkspace2);
      }
      _createClass(AllOfUserTaskListResponseWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfUserTaskListResponseWorkspace2();
          }
          return obj;
        }
      }]);
      return AllOfUserTaskListResponseWorkspace2;
    }();
    exports.AllOfUserTaskListResponseWorkspace = AllOfUserTaskListResponseWorkspace;
  }
});

// node_modules/asana/dist/model/AllOfWorkspaceMembershipResponseUserTaskListOwner.js
var require_AllOfWorkspaceMembershipResponseUserTaskListOwner = __commonJS({
  "node_modules/asana/dist/model/AllOfWorkspaceMembershipResponseUserTaskListOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfWorkspaceMembershipResponseUserTaskListOwner = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfWorkspaceMembershipResponseUserTaskListOwner = /* @__PURE__ */ function() {
      function AllOfWorkspaceMembershipResponseUserTaskListOwner2() {
        _classCallCheck(this, AllOfWorkspaceMembershipResponseUserTaskListOwner2);
      }
      _createClass(AllOfWorkspaceMembershipResponseUserTaskListOwner2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfWorkspaceMembershipResponseUserTaskListOwner2();
          }
          return obj;
        }
      }]);
      return AllOfWorkspaceMembershipResponseUserTaskListOwner2;
    }();
    exports.AllOfWorkspaceMembershipResponseUserTaskListOwner = AllOfWorkspaceMembershipResponseUserTaskListOwner;
  }
});

// node_modules/asana/dist/model/AllOfWorkspaceMembershipResponseUserTaskListWorkspace.js
var require_AllOfWorkspaceMembershipResponseUserTaskListWorkspace = __commonJS({
  "node_modules/asana/dist/model/AllOfWorkspaceMembershipResponseUserTaskListWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AllOfWorkspaceMembershipResponseUserTaskListWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AllOfWorkspaceMembershipResponseUserTaskListWorkspace = /* @__PURE__ */ function() {
      function AllOfWorkspaceMembershipResponseUserTaskListWorkspace2() {
        _classCallCheck(this, AllOfWorkspaceMembershipResponseUserTaskListWorkspace2);
      }
      _createClass(AllOfWorkspaceMembershipResponseUserTaskListWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AllOfWorkspaceMembershipResponseUserTaskListWorkspace2();
          }
          return obj;
        }
      }]);
      return AllOfWorkspaceMembershipResponseUserTaskListWorkspace2;
    }();
    exports.AllOfWorkspaceMembershipResponseUserTaskListWorkspace = AllOfWorkspaceMembershipResponseUserTaskListWorkspace;
  }
});

// node_modules/asana/dist/model/AsanaNamedResource.js
var require_AsanaNamedResource = __commonJS({
  "node_modules/asana/dist/model/AsanaNamedResource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AsanaNamedResource = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AsanaNamedResource = /* @__PURE__ */ function() {
      function AsanaNamedResource2() {
        _classCallCheck(this, AsanaNamedResource2);
      }
      _createClass(AsanaNamedResource2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AsanaNamedResource2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return AsanaNamedResource2;
    }();
    exports.AsanaNamedResource = AsanaNamedResource;
    AsanaNamedResource.prototype.gid = void 0;
    AsanaNamedResource.prototype.resource_type = void 0;
    AsanaNamedResource.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/NextPage.js
var require_NextPage = __commonJS({
  "node_modules/asana/dist/model/NextPage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NextPage = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var NextPage = /* @__PURE__ */ function() {
      function NextPage2() {
        _classCallCheck(this, NextPage2);
      }
      _createClass(NextPage2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NextPage2();
            if (data.hasOwnProperty("offset"))
              obj.offset = _ApiClient.ApiClient.convertToType(data["offset"], "String");
            if (data.hasOwnProperty("path"))
              obj.path = _ApiClient.ApiClient.convertToType(data["path"], "String");
            if (data.hasOwnProperty("uri"))
              obj.uri = _ApiClient.ApiClient.convertToType(data["uri"], "String");
          }
          return obj;
        }
      }]);
      return NextPage2;
    }();
    exports.NextPage = NextPage;
    NextPage.prototype.offset = void 0;
    NextPage.prototype.path = void 0;
    NextPage.prototype.uri = void 0;
  }
});

// node_modules/asana/dist/model/AsanaNamedResourceArray.js
var require_AsanaNamedResourceArray = __commonJS({
  "node_modules/asana/dist/model/AsanaNamedResourceArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AsanaNamedResourceArray = void 0;
    var _ApiClient = require_ApiClient();
    var _AsanaNamedResource = require_AsanaNamedResource();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AsanaNamedResourceArray = /* @__PURE__ */ function() {
      function AsanaNamedResourceArray2(data) {
        _classCallCheck(this, AsanaNamedResourceArray2);
        this.data = data;
      }
      _createClass(AsanaNamedResourceArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AsanaNamedResourceArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_AsanaNamedResource.AsanaNamedResource]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return AsanaNamedResourceArray2;
    }();
    exports.AsanaNamedResourceArray = AsanaNamedResourceArray;
    AsanaNamedResourceArray.prototype.data = void 0;
    AsanaNamedResourceArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/AsanaResource.js
var require_AsanaResource = __commonJS({
  "node_modules/asana/dist/model/AsanaResource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AsanaResource = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AsanaResource = /* @__PURE__ */ function() {
      function AsanaResource2() {
        _classCallCheck(this, AsanaResource2);
      }
      _createClass(AsanaResource2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AsanaResource2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
          }
          return obj;
        }
      }]);
      return AsanaResource2;
    }();
    exports.AsanaResource = AsanaResource;
    AsanaResource.prototype.gid = void 0;
    AsanaResource.prototype.resource_type = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentBase.js
var require_AttachmentBase = __commonJS({
  "node_modules/asana/dist/model/AttachmentBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentBase = /* @__PURE__ */ function() {
      function AttachmentBase2() {
        _classCallCheck(this, AttachmentBase2);
      }
      _createClass(AttachmentBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
          }
          return obj;
        }
      }]);
      return AttachmentBase2;
    }();
    exports.AttachmentBase = AttachmentBase;
    AttachmentBase.prototype.gid = void 0;
    AttachmentBase.prototype.resource_type = void 0;
    AttachmentBase.prototype.name = void 0;
    AttachmentBase.prototype.resource_subtype = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentCompact.js
var require_AttachmentCompact = __commonJS({
  "node_modules/asana/dist/model/AttachmentCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentCompact = /* @__PURE__ */ function() {
      function AttachmentCompact2() {
        _classCallCheck(this, AttachmentCompact2);
      }
      _createClass(AttachmentCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
          }
          return obj;
        }
      }]);
      return AttachmentCompact2;
    }();
    exports.AttachmentCompact = AttachmentCompact;
    AttachmentCompact.prototype.gid = void 0;
    AttachmentCompact.prototype.resource_type = void 0;
    AttachmentCompact.prototype.name = void 0;
    AttachmentCompact.prototype.resource_subtype = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentRequest.js
var require_AttachmentRequest = __commonJS({
  "node_modules/asana/dist/model/AttachmentRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentRequest = /* @__PURE__ */ function() {
      function AttachmentRequest2(parent) {
        _classCallCheck(this, AttachmentRequest2);
        this.parent = parent;
      }
      _createClass(AttachmentRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentRequest2();
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("file"))
              obj.file = _ApiClient.ApiClient.convertToType(data["file"], "Blob");
            if (data.hasOwnProperty("parent"))
              obj.parent = _ApiClient.ApiClient.convertToType(data["parent"], "String");
            if (data.hasOwnProperty("url"))
              obj.url = _ApiClient.ApiClient.convertToType(data["url"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("connect_to_app"))
              obj.connect_to_app = _ApiClient.ApiClient.convertToType(data["connect_to_app"], "Boolean");
          }
          return obj;
        }
      }]);
      return AttachmentRequest2;
    }();
    exports.AttachmentRequest = AttachmentRequest;
    AttachmentRequest.ResourceSubtypeEnum = {
      /**
       * value: "asana"
       * @const
       */
      asana: "asana",
      /**
       * value: "dropbox"
       * @const
       */
      dropbox: "dropbox",
      /**
       * value: "gdrive"
       * @const
       */
      gdrive: "gdrive",
      /**
       * value: "onedrive"
       * @const
       */
      onedrive: "onedrive",
      /**
       * value: "box"
       * @const
       */
      box: "box",
      /**
       * value: "vimeo"
       * @const
       */
      vimeo: "vimeo",
      /**
       * value: "external"
       * @const
       */
      external: "external"
    };
    AttachmentRequest.prototype.resource_subtype = void 0;
    AttachmentRequest.prototype.file = void 0;
    AttachmentRequest.prototype.parent = void 0;
    AttachmentRequest.prototype.url = void 0;
    AttachmentRequest.prototype.name = void 0;
    AttachmentRequest.prototype.connect_to_app = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentResponseParentCreatedBy.js
var require_AttachmentResponseParentCreatedBy = __commonJS({
  "node_modules/asana/dist/model/AttachmentResponseParentCreatedBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentResponseParentCreatedBy = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentResponseParentCreatedBy = /* @__PURE__ */ function() {
      function AttachmentResponseParentCreatedBy2() {
        _classCallCheck(this, AttachmentResponseParentCreatedBy2);
      }
      _createClass(AttachmentResponseParentCreatedBy2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentResponseParentCreatedBy2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
          }
          return obj;
        }
      }]);
      return AttachmentResponseParentCreatedBy2;
    }();
    exports.AttachmentResponseParentCreatedBy = AttachmentResponseParentCreatedBy;
    AttachmentResponseParentCreatedBy.prototype.gid = void 0;
    AttachmentResponseParentCreatedBy.prototype.resource_type = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentResponseParent.js
var require_AttachmentResponseParent = __commonJS({
  "node_modules/asana/dist/model/AttachmentResponseParent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentResponseParent = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentResponseParent = /* @__PURE__ */ function() {
      function AttachmentResponseParent2() {
        _classCallCheck(this, AttachmentResponseParent2);
      }
      _createClass(AttachmentResponseParent2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentResponseParent2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
          }
          return obj;
        }
      }]);
      return AttachmentResponseParent2;
    }();
    exports.AttachmentResponseParent = AttachmentResponseParent;
    AttachmentResponseParent.prototype.gid = void 0;
    AttachmentResponseParent.prototype.resource_type = void 0;
    AttachmentResponseParent.prototype.name = void 0;
    AttachmentResponseParent.prototype.resource_subtype = void 0;
    AttachmentResponseParent.prototype.created_by = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentResponse.js
var require_AttachmentResponse = __commonJS({
  "node_modules/asana/dist/model/AttachmentResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParent = require_AttachmentResponseParent();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentResponse = /* @__PURE__ */ function() {
      function AttachmentResponse2() {
        _classCallCheck(this, AttachmentResponse2);
      }
      _createClass(AttachmentResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("download_url"))
              obj.download_url = _ApiClient.ApiClient.convertToType(data["download_url"], "String");
            if (data.hasOwnProperty("permanent_url"))
              obj.permanent_url = _ApiClient.ApiClient.convertToType(data["permanent_url"], "String");
            if (data.hasOwnProperty("host"))
              obj.host = _ApiClient.ApiClient.convertToType(data["host"], "String");
            if (data.hasOwnProperty("parent"))
              obj.parent = _AttachmentResponseParent.AttachmentResponseParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("size"))
              obj.size = _ApiClient.ApiClient.convertToType(data["size"], "Number");
            if (data.hasOwnProperty("view_url"))
              obj.view_url = _ApiClient.ApiClient.convertToType(data["view_url"], "String");
            if (data.hasOwnProperty("connected_to_app"))
              obj.connected_to_app = _ApiClient.ApiClient.convertToType(data["connected_to_app"], "Boolean");
          }
          return obj;
        }
      }]);
      return AttachmentResponse2;
    }();
    exports.AttachmentResponse = AttachmentResponse;
    AttachmentResponse.prototype.gid = void 0;
    AttachmentResponse.prototype.resource_type = void 0;
    AttachmentResponse.prototype.name = void 0;
    AttachmentResponse.prototype.resource_subtype = void 0;
    AttachmentResponse.prototype.created_at = void 0;
    AttachmentResponse.prototype.download_url = void 0;
    AttachmentResponse.prototype.permanent_url = void 0;
    AttachmentResponse.prototype.host = void 0;
    AttachmentResponse.prototype.parent = void 0;
    AttachmentResponse.prototype.size = void 0;
    AttachmentResponse.prototype.view_url = void 0;
    AttachmentResponse.prototype.connected_to_app = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentResponseArray.js
var require_AttachmentResponseArray = __commonJS({
  "node_modules/asana/dist/model/AttachmentResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponse = require_AttachmentResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentResponseArray = /* @__PURE__ */ function() {
      function AttachmentResponseArray2(data) {
        _classCallCheck(this, AttachmentResponseArray2);
        this.data = data;
      }
      _createClass(AttachmentResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_AttachmentResponse.AttachmentResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return AttachmentResponseArray2;
    }();
    exports.AttachmentResponseArray = AttachmentResponseArray;
    AttachmentResponseArray.prototype.data = void 0;
    AttachmentResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/AttachmentResponseData.js
var require_AttachmentResponseData = __commonJS({
  "node_modules/asana/dist/model/AttachmentResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponse = require_AttachmentResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentResponseData = /* @__PURE__ */ function() {
      function AttachmentResponseData2(data) {
        _classCallCheck(this, AttachmentResponseData2);
        this.data = data;
      }
      _createClass(AttachmentResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AttachmentResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _AttachmentResponse.AttachmentResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return AttachmentResponseData2;
    }();
    exports.AttachmentResponseData = AttachmentResponseData;
    AttachmentResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/AuditLogEventActor.js
var require_AuditLogEventActor = __commonJS({
  "node_modules/asana/dist/model/AuditLogEventActor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AuditLogEventActor = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AuditLogEventActor = /* @__PURE__ */ function() {
      function AuditLogEventActor2() {
        _classCallCheck(this, AuditLogEventActor2);
      }
      _createClass(AuditLogEventActor2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AuditLogEventActor2();
            if (data.hasOwnProperty("actor_type"))
              obj.actor_type = _ApiClient.ApiClient.convertToType(data["actor_type"], "String");
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("email"))
              obj.email = _ApiClient.ApiClient.convertToType(data["email"], "String");
          }
          return obj;
        }
      }]);
      return AuditLogEventActor2;
    }();
    exports.AuditLogEventActor = AuditLogEventActor;
    AuditLogEventActor.ActorTypeEnum = {
      /**
       * value: "user"
       * @const
       */
      user: "user",
      /**
       * value: "asana"
       * @const
       */
      asana: "asana",
      /**
       * value: "asana_support"
       * @const
       */
      asana_support: "asana_support",
      /**
       * value: "anonymous"
       * @const
       */
      anonymous: "anonymous",
      /**
       * value: "external_administrator"
       * @const
       */
      external_administrator: "external_administrator"
    };
    AuditLogEventActor.prototype.actor_type = void 0;
    AuditLogEventActor.prototype.gid = void 0;
    AuditLogEventActor.prototype.name = void 0;
    AuditLogEventActor.prototype.email = void 0;
  }
});

// node_modules/asana/dist/model/AuditLogEventContext.js
var require_AuditLogEventContext = __commonJS({
  "node_modules/asana/dist/model/AuditLogEventContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AuditLogEventContext = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AuditLogEventContext = /* @__PURE__ */ function() {
      function AuditLogEventContext2() {
        _classCallCheck(this, AuditLogEventContext2);
      }
      _createClass(AuditLogEventContext2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AuditLogEventContext2();
            if (data.hasOwnProperty("context_type"))
              obj.context_type = _ApiClient.ApiClient.convertToType(data["context_type"], "String");
            if (data.hasOwnProperty("api_authentication_method"))
              obj.api_authentication_method = _ApiClient.ApiClient.convertToType(data["api_authentication_method"], "String");
            if (data.hasOwnProperty("client_ip_address"))
              obj.client_ip_address = _ApiClient.ApiClient.convertToType(data["client_ip_address"], "String");
            if (data.hasOwnProperty("user_agent"))
              obj.user_agent = _ApiClient.ApiClient.convertToType(data["user_agent"], "String");
            if (data.hasOwnProperty("oauth_app_name"))
              obj.oauth_app_name = _ApiClient.ApiClient.convertToType(data["oauth_app_name"], "String");
          }
          return obj;
        }
      }]);
      return AuditLogEventContext2;
    }();
    exports.AuditLogEventContext = AuditLogEventContext;
    AuditLogEventContext.ContextTypeEnum = {
      /**
       * value: "web"
       * @const
       */
      web: "web",
      /**
       * value: "desktop"
       * @const
       */
      desktop: "desktop",
      /**
       * value: "mobile"
       * @const
       */
      mobile: "mobile",
      /**
       * value: "asana_support"
       * @const
       */
      asana_support: "asana_support",
      /**
       * value: "asana"
       * @const
       */
      asana: "asana",
      /**
       * value: "email"
       * @const
       */
      email: "email",
      /**
       * value: "api"
       * @const
       */
      api: "api"
    };
    AuditLogEventContext.prototype.context_type = void 0;
    AuditLogEventContext.ApiAuthenticationMethodEnum = {
      /**
       * value: "cookie"
       * @const
       */
      cookie: "cookie",
      /**
       * value: "oauth"
       * @const
       */
      oauth: "oauth",
      /**
       * value: "personal_access_token"
       * @const
       */
      personal_access_token: "personal_access_token",
      /**
       * value: "service_account"
       * @const
       */
      service_account: "service_account"
    };
    AuditLogEventContext.prototype.api_authentication_method = void 0;
    AuditLogEventContext.prototype.client_ip_address = void 0;
    AuditLogEventContext.prototype.user_agent = void 0;
    AuditLogEventContext.prototype.oauth_app_name = void 0;
  }
});

// node_modules/asana/dist/model/AuditLogEventResource.js
var require_AuditLogEventResource = __commonJS({
  "node_modules/asana/dist/model/AuditLogEventResource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AuditLogEventResource = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AuditLogEventResource = /* @__PURE__ */ function() {
      function AuditLogEventResource2() {
        _classCallCheck(this, AuditLogEventResource2);
      }
      _createClass(AuditLogEventResource2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AuditLogEventResource2();
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("email"))
              obj.email = _ApiClient.ApiClient.convertToType(data["email"], "String");
          }
          return obj;
        }
      }]);
      return AuditLogEventResource2;
    }();
    exports.AuditLogEventResource = AuditLogEventResource;
    AuditLogEventResource.prototype.resource_type = void 0;
    AuditLogEventResource.prototype.resource_subtype = void 0;
    AuditLogEventResource.prototype.gid = void 0;
    AuditLogEventResource.prototype.name = void 0;
    AuditLogEventResource.prototype.email = void 0;
  }
});

// node_modules/asana/dist/model/AuditLogEvent.js
var require_AuditLogEvent = __commonJS({
  "node_modules/asana/dist/model/AuditLogEvent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AuditLogEvent = void 0;
    var _ApiClient = require_ApiClient();
    var _AuditLogEventActor = require_AuditLogEventActor();
    var _AuditLogEventContext = require_AuditLogEventContext();
    var _AuditLogEventResource = require_AuditLogEventResource();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AuditLogEvent = /* @__PURE__ */ function() {
      function AuditLogEvent2() {
        _classCallCheck(this, AuditLogEvent2);
      }
      _createClass(AuditLogEvent2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AuditLogEvent2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("event_type"))
              obj.event_type = _ApiClient.ApiClient.convertToType(data["event_type"], "String");
            if (data.hasOwnProperty("event_category"))
              obj.event_category = _ApiClient.ApiClient.convertToType(data["event_category"], "String");
            if (data.hasOwnProperty("actor"))
              obj.actor = _AuditLogEventActor.AuditLogEventActor.constructFromObject(data["actor"]);
            if (data.hasOwnProperty("resource"))
              obj.resource = _AuditLogEventResource.AuditLogEventResource.constructFromObject(data["resource"]);
            if (data.hasOwnProperty("details"))
              obj.details = _ApiClient.ApiClient.convertToType(data["details"], Object);
            if (data.hasOwnProperty("context"))
              obj.context = _AuditLogEventContext.AuditLogEventContext.constructFromObject(data["context"]);
          }
          return obj;
        }
      }]);
      return AuditLogEvent2;
    }();
    exports.AuditLogEvent = AuditLogEvent;
    AuditLogEvent.prototype.gid = void 0;
    AuditLogEvent.prototype.created_at = void 0;
    AuditLogEvent.prototype.event_type = void 0;
    AuditLogEvent.prototype.event_category = void 0;
    AuditLogEvent.prototype.actor = void 0;
    AuditLogEvent.prototype.resource = void 0;
    AuditLogEvent.prototype.details = void 0;
    AuditLogEvent.prototype.context = void 0;
  }
});

// node_modules/asana/dist/model/AuditLogEventArray.js
var require_AuditLogEventArray = __commonJS({
  "node_modules/asana/dist/model/AuditLogEventArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AuditLogEventArray = void 0;
    var _ApiClient = require_ApiClient();
    var _AuditLogEvent = require_AuditLogEvent();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AuditLogEventArray = /* @__PURE__ */ function() {
      function AuditLogEventArray2(data) {
        _classCallCheck(this, AuditLogEventArray2);
        this.data = data;
      }
      _createClass(AuditLogEventArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AuditLogEventArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_AuditLogEvent.AuditLogEvent]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return AuditLogEventArray2;
    }();
    exports.AuditLogEventArray = AuditLogEventArray;
    AuditLogEventArray.prototype.data = void 0;
    AuditLogEventArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/AuditLogEventDetails.js
var require_AuditLogEventDetails = __commonJS({
  "node_modules/asana/dist/model/AuditLogEventDetails.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AuditLogEventDetails = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AuditLogEventDetails = /* @__PURE__ */ function() {
      function AuditLogEventDetails2() {
        _classCallCheck(this, AuditLogEventDetails2);
      }
      _createClass(AuditLogEventDetails2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AuditLogEventDetails2();
          }
          return obj;
        }
      }]);
      return AuditLogEventDetails2;
    }();
    exports.AuditLogEventDetails = AuditLogEventDetails;
  }
});

// node_modules/asana/dist/model/BatchRequestOptions.js
var require_BatchRequestOptions = __commonJS({
  "node_modules/asana/dist/model/BatchRequestOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchRequestOptions = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchRequestOptions = /* @__PURE__ */ function() {
      function BatchRequestOptions2() {
        _classCallCheck(this, BatchRequestOptions2);
      }
      _createClass(BatchRequestOptions2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchRequestOptions2();
            if (data.hasOwnProperty("limit"))
              obj.limit = _ApiClient.ApiClient.convertToType(data["limit"], "Number");
            if (data.hasOwnProperty("offset"))
              obj.offset = _ApiClient.ApiClient.convertToType(data["offset"], "Number");
            if (data.hasOwnProperty("fields"))
              obj.fields = _ApiClient.ApiClient.convertToType(data["fields"], ["String"]);
          }
          return obj;
        }
      }]);
      return BatchRequestOptions2;
    }();
    exports.BatchRequestOptions = BatchRequestOptions;
    BatchRequestOptions.prototype.limit = void 0;
    BatchRequestOptions.prototype.offset = void 0;
    BatchRequestOptions.prototype.fields = void 0;
  }
});

// node_modules/asana/dist/model/BatchRequestActions.js
var require_BatchRequestActions = __commonJS({
  "node_modules/asana/dist/model/BatchRequestActions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchRequestActions = void 0;
    var _ApiClient = require_ApiClient();
    var _BatchRequestOptions = require_BatchRequestOptions();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchRequestActions = /* @__PURE__ */ function() {
      function BatchRequestActions2(relative_path, method) {
        _classCallCheck(this, BatchRequestActions2);
        this.relative_path = relative_path;
        this.method = method;
      }
      _createClass(BatchRequestActions2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchRequestActions2();
            if (data.hasOwnProperty("relative_path"))
              obj.relative_path = _ApiClient.ApiClient.convertToType(data["relative_path"], "String");
            if (data.hasOwnProperty("method"))
              obj.method = _ApiClient.ApiClient.convertToType(data["method"], "String");
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], Object);
            if (data.hasOwnProperty("options"))
              obj.options = _BatchRequestOptions.BatchRequestOptions.constructFromObject(data["options"]);
          }
          return obj;
        }
      }]);
      return BatchRequestActions2;
    }();
    exports.BatchRequestActions = BatchRequestActions;
    BatchRequestActions.prototype.relative_path = void 0;
    BatchRequestActions.MethodEnum = {
      /**
       * value: "get"
       * @const
       */
      get: "get",
      /**
       * value: "post"
       * @const
       */
      post: "post",
      /**
       * value: "put"
       * @const
       */
      put: "put",
      /**
       * value: "delete"
       * @const
       */
      _delete: "delete",
      /**
       * value: "patch"
       * @const
       */
      patch: "patch",
      /**
       * value: "head"
       * @const
       */
      head: "head"
    };
    BatchRequestActions.prototype.method = void 0;
    BatchRequestActions.prototype.data = void 0;
    BatchRequestActions.prototype.options = void 0;
  }
});

// node_modules/asana/dist/model/BatchRequest.js
var require_BatchRequest = __commonJS({
  "node_modules/asana/dist/model/BatchRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _BatchRequestActions = require_BatchRequestActions();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchRequest = /* @__PURE__ */ function() {
      function BatchRequest2() {
        _classCallCheck(this, BatchRequest2);
      }
      _createClass(BatchRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchRequest2();
            if (data.hasOwnProperty("actions"))
              obj.actions = _ApiClient.ApiClient.convertToType(data["actions"], [_BatchRequestActions.BatchRequestActions]);
          }
          return obj;
        }
      }]);
      return BatchRequest2;
    }();
    exports.BatchRequest = BatchRequest;
    BatchRequest.prototype.actions = void 0;
  }
});

// node_modules/asana/dist/model/BatchBody.js
var require_BatchBody = __commonJS({
  "node_modules/asana/dist/model/BatchBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchBody = void 0;
    var _ApiClient = require_ApiClient();
    var _BatchRequest = require_BatchRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchBody = /* @__PURE__ */ function() {
      function BatchBody2() {
        _classCallCheck(this, BatchBody2);
      }
      _createClass(BatchBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _BatchRequest.BatchRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return BatchBody2;
    }();
    exports.BatchBody = BatchBody;
    BatchBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/BatchRequestAction.js
var require_BatchRequestAction = __commonJS({
  "node_modules/asana/dist/model/BatchRequestAction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchRequestAction = void 0;
    var _ApiClient = require_ApiClient();
    var _BatchRequestOptions = require_BatchRequestOptions();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchRequestAction = /* @__PURE__ */ function() {
      function BatchRequestAction2(relative_path, method) {
        _classCallCheck(this, BatchRequestAction2);
        this.relative_path = relative_path;
        this.method = method;
      }
      _createClass(BatchRequestAction2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchRequestAction2();
            if (data.hasOwnProperty("relative_path"))
              obj.relative_path = _ApiClient.ApiClient.convertToType(data["relative_path"], "String");
            if (data.hasOwnProperty("method"))
              obj.method = _ApiClient.ApiClient.convertToType(data["method"], "String");
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], Object);
            if (data.hasOwnProperty("options"))
              obj.options = _BatchRequestOptions.BatchRequestOptions.constructFromObject(data["options"]);
          }
          return obj;
        }
      }]);
      return BatchRequestAction2;
    }();
    exports.BatchRequestAction = BatchRequestAction;
    BatchRequestAction.prototype.relative_path = void 0;
    BatchRequestAction.MethodEnum = {
      /**
       * value: "get"
       * @const
       */
      get: "get",
      /**
       * value: "post"
       * @const
       */
      post: "post",
      /**
       * value: "put"
       * @const
       */
      put: "put",
      /**
       * value: "delete"
       * @const
       */
      _delete: "delete",
      /**
       * value: "patch"
       * @const
       */
      patch: "patch",
      /**
       * value: "head"
       * @const
       */
      head: "head"
    };
    BatchRequestAction.prototype.method = void 0;
    BatchRequestAction.prototype.data = void 0;
    BatchRequestAction.prototype.options = void 0;
  }
});

// node_modules/asana/dist/model/BatchResponse.js
var require_BatchResponse = __commonJS({
  "node_modules/asana/dist/model/BatchResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchResponse = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchResponse = /* @__PURE__ */ function() {
      function BatchResponse2() {
        _classCallCheck(this, BatchResponse2);
      }
      _createClass(BatchResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchResponse2();
            if (data.hasOwnProperty("status_code"))
              obj.status_code = _ApiClient.ApiClient.convertToType(data["status_code"], "Number");
            if (data.hasOwnProperty("headers"))
              obj.headers = _ApiClient.ApiClient.convertToType(data["headers"], Object);
            if (data.hasOwnProperty("body"))
              obj.body = _ApiClient.ApiClient.convertToType(data["body"], Object);
          }
          return obj;
        }
      }]);
      return BatchResponse2;
    }();
    exports.BatchResponse = BatchResponse;
    BatchResponse.prototype.status_code = void 0;
    BatchResponse.prototype.headers = void 0;
    BatchResponse.prototype.body = void 0;
  }
});

// node_modules/asana/dist/model/BatchResponseArray.js
var require_BatchResponseArray = __commonJS({
  "node_modules/asana/dist/model/BatchResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _BatchResponse = require_BatchResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchResponseArray = /* @__PURE__ */ function() {
      function BatchResponseArray2(data) {
        _classCallCheck(this, BatchResponseArray2);
        this.data = data;
      }
      _createClass(BatchResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_BatchResponse.BatchResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return BatchResponseArray2;
    }();
    exports.BatchResponseArray = BatchResponseArray;
    BatchResponseArray.prototype.data = void 0;
    BatchResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/CreateMembershipRequest.js
var require_CreateMembershipRequest = __commonJS({
  "node_modules/asana/dist/model/CreateMembershipRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CreateMembershipRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CreateMembershipRequest = /* @__PURE__ */ function() {
      function CreateMembershipRequest2() {
        _classCallCheck(this, CreateMembershipRequest2);
      }
      _createClass(CreateMembershipRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CreateMembershipRequest2();
            if (data.hasOwnProperty("is_active"))
              obj.is_active = _ApiClient.ApiClient.convertToType(data["is_active"], "Boolean");
            if (data.hasOwnProperty("member"))
              obj.member = _ApiClient.ApiClient.convertToType(data["member"], "String");
            if (data.hasOwnProperty("parent"))
              obj.parent = _ApiClient.ApiClient.convertToType(data["parent"], "String");
          }
          return obj;
        }
      }]);
      return CreateMembershipRequest2;
    }();
    exports.CreateMembershipRequest = CreateMembershipRequest;
    CreateMembershipRequest.prototype.is_active = void 0;
    CreateMembershipRequest.prototype.member = void 0;
    CreateMembershipRequest.prototype.parent = void 0;
  }
});

// node_modules/asana/dist/model/CreateTimeTrackingEntryRequest.js
var require_CreateTimeTrackingEntryRequest = __commonJS({
  "node_modules/asana/dist/model/CreateTimeTrackingEntryRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CreateTimeTrackingEntryRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CreateTimeTrackingEntryRequest = /* @__PURE__ */ function() {
      function CreateTimeTrackingEntryRequest2() {
        _classCallCheck(this, CreateTimeTrackingEntryRequest2);
      }
      _createClass(CreateTimeTrackingEntryRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CreateTimeTrackingEntryRequest2();
            if (data.hasOwnProperty("duration_minutes"))
              obj.duration_minutes = _ApiClient.ApiClient.convertToType(data["duration_minutes"], "Number");
            if (data.hasOwnProperty("entered_on"))
              obj.entered_on = _ApiClient.ApiClient.convertToType(data["entered_on"], "Date");
          }
          return obj;
        }
      }]);
      return CreateTimeTrackingEntryRequest2;
    }();
    exports.CreateTimeTrackingEntryRequest = CreateTimeTrackingEntryRequest;
    CreateTimeTrackingEntryRequest.prototype.duration_minutes = void 0;
    CreateTimeTrackingEntryRequest.prototype.entered_on = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldBaseDateValue.js
var require_CustomFieldBaseDateValue = __commonJS({
  "node_modules/asana/dist/model/CustomFieldBaseDateValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldBaseDateValue = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldBaseDateValue = /* @__PURE__ */ function() {
      function CustomFieldBaseDateValue2() {
        _classCallCheck(this, CustomFieldBaseDateValue2);
      }
      _createClass(CustomFieldBaseDateValue2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldBaseDateValue2();
            if (data.hasOwnProperty("date"))
              obj._date = _ApiClient.ApiClient.convertToType(data["date"], "String");
            if (data.hasOwnProperty("date_time"))
              obj.date_time = _ApiClient.ApiClient.convertToType(data["date_time"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldBaseDateValue2;
    }();
    exports.CustomFieldBaseDateValue = CustomFieldBaseDateValue;
    CustomFieldBaseDateValue.prototype._date = void 0;
    CustomFieldBaseDateValue.prototype.date_time = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldBaseEnumOptions.js
var require_CustomFieldBaseEnumOptions = __commonJS({
  "node_modules/asana/dist/model/CustomFieldBaseEnumOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldBaseEnumOptions = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldBaseEnumOptions = /* @__PURE__ */ function() {
      function CustomFieldBaseEnumOptions2() {
        _classCallCheck(this, CustomFieldBaseEnumOptions2);
      }
      _createClass(CustomFieldBaseEnumOptions2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldBaseEnumOptions2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldBaseEnumOptions2;
    }();
    exports.CustomFieldBaseEnumOptions = CustomFieldBaseEnumOptions;
    CustomFieldBaseEnumOptions.prototype.gid = void 0;
    CustomFieldBaseEnumOptions.prototype.resource_type = void 0;
    CustomFieldBaseEnumOptions.prototype.name = void 0;
    CustomFieldBaseEnumOptions.prototype.enabled = void 0;
    CustomFieldBaseEnumOptions.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldBaseEnumValue.js
var require_CustomFieldBaseEnumValue = __commonJS({
  "node_modules/asana/dist/model/CustomFieldBaseEnumValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldBaseEnumValue = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldBaseEnumValue = /* @__PURE__ */ function() {
      function CustomFieldBaseEnumValue2() {
        _classCallCheck(this, CustomFieldBaseEnumValue2);
      }
      _createClass(CustomFieldBaseEnumValue2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldBaseEnumValue2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldBaseEnumValue2;
    }();
    exports.CustomFieldBaseEnumValue = CustomFieldBaseEnumValue;
    CustomFieldBaseEnumValue.prototype.gid = void 0;
    CustomFieldBaseEnumValue.prototype.resource_type = void 0;
    CustomFieldBaseEnumValue.prototype.name = void 0;
    CustomFieldBaseEnumValue.prototype.enabled = void 0;
    CustomFieldBaseEnumValue.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldBase.js
var require_CustomFieldBase = __commonJS({
  "node_modules/asana/dist/model/CustomFieldBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldBase = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldBase = /* @__PURE__ */ function() {
      function CustomFieldBase2() {
        _classCallCheck(this, CustomFieldBase2);
      }
      _createClass(CustomFieldBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("format"))
              obj.format = _ApiClient.ApiClient.convertToType(data["format"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("custom_label"))
              obj.custom_label = _ApiClient.ApiClient.convertToType(data["custom_label"], "String");
            if (data.hasOwnProperty("custom_label_position"))
              obj.custom_label_position = _ApiClient.ApiClient.convertToType(data["custom_label_position"], "String");
            if (data.hasOwnProperty("is_global_to_workspace"))
              obj.is_global_to_workspace = _ApiClient.ApiClient.convertToType(data["is_global_to_workspace"], "Boolean");
            if (data.hasOwnProperty("has_notifications_enabled"))
              obj.has_notifications_enabled = _ApiClient.ApiClient.convertToType(data["has_notifications_enabled"], "Boolean");
            if (data.hasOwnProperty("asana_created_field"))
              obj.asana_created_field = _ApiClient.ApiClient.convertToType(data["asana_created_field"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldBase2;
    }();
    exports.CustomFieldBase = CustomFieldBase;
    CustomFieldBase.prototype.gid = void 0;
    CustomFieldBase.prototype.resource_type = void 0;
    CustomFieldBase.prototype.name = void 0;
    CustomFieldBase.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldBase.prototype.resource_subtype = void 0;
    CustomFieldBase.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldBase.prototype.type = void 0;
    CustomFieldBase.prototype.enum_options = void 0;
    CustomFieldBase.prototype.enabled = void 0;
    CustomFieldBase.prototype.is_formula_field = void 0;
    CustomFieldBase.prototype.date_value = void 0;
    CustomFieldBase.prototype.enum_value = void 0;
    CustomFieldBase.prototype.multi_enum_values = void 0;
    CustomFieldBase.prototype.number_value = void 0;
    CustomFieldBase.prototype.text_value = void 0;
    CustomFieldBase.prototype.display_value = void 0;
    CustomFieldBase.prototype.description = void 0;
    CustomFieldBase.prototype.precision = void 0;
    CustomFieldBase.FormatEnum = {
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "identifier"
       * @const
       */
      identifier: "identifier",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage",
      /**
       * value: "custom"
       * @const
       */
      custom: "custom",
      /**
       * value: "duration"
       * @const
       */
      duration: "duration",
      /**
       * value: "none"
       * @const
       */
      none: "none"
    };
    CustomFieldBase.prototype.format = void 0;
    CustomFieldBase.prototype.currency_code = void 0;
    CustomFieldBase.prototype.custom_label = void 0;
    CustomFieldBase.CustomLabelPositionEnum = {
      /**
       * value: "prefix"
       * @const
       */
      prefix: "prefix",
      /**
       * value: "suffix"
       * @const
       */
      suffix: "suffix",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldBase.prototype.custom_label_position = void 0;
    CustomFieldBase.prototype.is_global_to_workspace = void 0;
    CustomFieldBase.prototype.has_notifications_enabled = void 0;
    CustomFieldBase.AsanaCreatedFieldEnum = {
      /**
       * value: "a_v_requirements"
       * @const
       */
      a_v_requirements: "a_v_requirements",
      /**
       * value: "account_name"
       * @const
       */
      account_name: "account_name",
      /**
       * value: "actionable"
       * @const
       */
      actionable: "actionable",
      /**
       * value: "align_shipping_link"
       * @const
       */
      align_shipping_link: "align_shipping_link",
      /**
       * value: "align_status"
       * @const
       */
      align_status: "align_status",
      /**
       * value: "allotted_time"
       * @const
       */
      allotted_time: "allotted_time",
      /**
       * value: "appointment"
       * @const
       */
      appointment: "appointment",
      /**
       * value: "approval_stage"
       * @const
       */
      approval_stage: "approval_stage",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "article_series"
       * @const
       */
      article_series: "article_series",
      /**
       * value: "board_committee"
       * @const
       */
      board_committee: "board_committee",
      /**
       * value: "browser"
       * @const
       */
      browser: "browser",
      /**
       * value: "campaign_audience"
       * @const
       */
      campaign_audience: "campaign_audience",
      /**
       * value: "campaign_project_status"
       * @const
       */
      campaign_project_status: "campaign_project_status",
      /**
       * value: "campaign_regions"
       * @const
       */
      campaign_regions: "campaign_regions",
      /**
       * value: "channel_primary"
       * @const
       */
      channel_primary: "channel_primary",
      /**
       * value: "client_topic_type"
       * @const
       */
      client_topic_type: "client_topic_type",
      /**
       * value: "complete_by"
       * @const
       */
      complete_by: "complete_by",
      /**
       * value: "contact"
       * @const
       */
      contact: "contact",
      /**
       * value: "contact_email_address"
       * @const
       */
      contact_email_address: "contact_email_address",
      /**
       * value: "content_channels"
       * @const
       */
      content_channels: "content_channels",
      /**
       * value: "content_channels_needed"
       * @const
       */
      content_channels_needed: "content_channels_needed",
      /**
       * value: "content_stage"
       * @const
       */
      content_stage: "content_stage",
      /**
       * value: "content_type"
       * @const
       */
      content_type: "content_type",
      /**
       * value: "contract"
       * @const
       */
      contract: "contract",
      /**
       * value: "contract_status"
       * @const
       */
      contract_status: "contract_status",
      /**
       * value: "cost"
       * @const
       */
      cost: "cost",
      /**
       * value: "creation_stage"
       * @const
       */
      creation_stage: "creation_stage",
      /**
       * value: "creative_channel"
       * @const
       */
      creative_channel: "creative_channel",
      /**
       * value: "creative_needed"
       * @const
       */
      creative_needed: "creative_needed",
      /**
       * value: "creative_needs"
       * @const
       */
      creative_needs: "creative_needs",
      /**
       * value: "data_sensitivity"
       * @const
       */
      data_sensitivity: "data_sensitivity",
      /**
       * value: "deal_size"
       * @const
       */
      deal_size: "deal_size",
      /**
       * value: "delivery_appt"
       * @const
       */
      delivery_appt: "delivery_appt",
      /**
       * value: "delivery_appt_date"
       * @const
       */
      delivery_appt_date: "delivery_appt_date",
      /**
       * value: "department"
       * @const
       */
      department: "department",
      /**
       * value: "department_responsible"
       * @const
       */
      department_responsible: "department_responsible",
      /**
       * value: "design_request_needed"
       * @const
       */
      design_request_needed: "design_request_needed",
      /**
       * value: "design_request_type"
       * @const
       */
      design_request_type: "design_request_type",
      /**
       * value: "discussion_category"
       * @const
       */
      discussion_category: "discussion_category",
      /**
       * value: "do_this_task"
       * @const
       */
      do_this_task: "do_this_task",
      /**
       * value: "editorial_content_status"
       * @const
       */
      editorial_content_status: "editorial_content_status",
      /**
       * value: "editorial_content_tag"
       * @const
       */
      editorial_content_tag: "editorial_content_tag",
      /**
       * value: "editorial_content_type"
       * @const
       */
      editorial_content_type: "editorial_content_type",
      /**
       * value: "effort"
       * @const
       */
      effort: "effort",
      /**
       * value: "effort_level"
       * @const
       */
      effort_level: "effort_level",
      /**
       * value: "est_completion_date"
       * @const
       */
      est_completion_date: "est_completion_date",
      /**
       * value: "estimated_time"
       * @const
       */
      estimated_time: "estimated_time",
      /**
       * value: "estimated_value"
       * @const
       */
      estimated_value: "estimated_value",
      /**
       * value: "expected_cost"
       * @const
       */
      expected_cost: "expected_cost",
      /**
       * value: "external_steps_needed"
       * @const
       */
      external_steps_needed: "external_steps_needed",
      /**
       * value: "favorite_idea"
       * @const
       */
      favorite_idea: "favorite_idea",
      /**
       * value: "feedback_type"
       * @const
       */
      feedback_type: "feedback_type",
      /**
       * value: "financial"
       * @const
       */
      financial: "financial",
      /**
       * value: "funding_amount"
       * @const
       */
      funding_amount: "funding_amount",
      /**
       * value: "grant_application_process"
       * @const
       */
      grant_application_process: "grant_application_process",
      /**
       * value: "hiring_candidate_status"
       * @const
       */
      hiring_candidate_status: "hiring_candidate_status",
      /**
       * value: "idea_status"
       * @const
       */
      idea_status: "idea_status",
      /**
       * value: "ids_link"
       * @const
       */
      ids_link: "ids_link",
      /**
       * value: "ids_patient_link"
       * @const
       */
      ids_patient_link: "ids_patient_link",
      /**
       * value: "implementation_stage"
       * @const
       */
      implementation_stage: "implementation_stage",
      /**
       * value: "insurance"
       * @const
       */
      insurance: "insurance",
      /**
       * value: "interview_area"
       * @const
       */
      interview_area: "interview_area",
      /**
       * value: "interview_question_score"
       * @const
       */
      interview_question_score: "interview_question_score",
      /**
       * value: "itero_scan_link"
       * @const
       */
      itero_scan_link: "itero_scan_link",
      /**
       * value: "job_s_applied_to"
       * @const
       */
      job_s_applied_to: "job_s_applied_to",
      /**
       * value: "lab"
       * @const
       */
      lab: "lab",
      /**
       * value: "launch_status"
       * @const
       */
      launch_status: "launch_status",
      /**
       * value: "lead_status"
       * @const
       */
      lead_status: "lead_status",
      /**
       * value: "localization_language"
       * @const
       */
      localization_language: "localization_language",
      /**
       * value: "localization_market_team"
       * @const
       */
      localization_market_team: "localization_market_team",
      /**
       * value: "localization_status"
       * @const
       */
      localization_status: "localization_status",
      /**
       * value: "meeting_minutes"
       * @const
       */
      meeting_minutes: "meeting_minutes",
      /**
       * value: "meeting_needed"
       * @const
       */
      meeting_needed: "meeting_needed",
      /**
       * value: "minutes"
       * @const
       */
      minutes: "minutes",
      /**
       * value: "mrr"
       * @const
       */
      mrr: "mrr",
      /**
       * value: "must_localize"
       * @const
       */
      must_localize: "must_localize",
      /**
       * value: "name_of_foundation"
       * @const
       */
      name_of_foundation: "name_of_foundation",
      /**
       * value: "need_to_follow_up"
       * @const
       */
      need_to_follow_up: "need_to_follow_up",
      /**
       * value: "next_appointment"
       * @const
       */
      next_appointment: "next_appointment",
      /**
       * value: "next_steps_sales"
       * @const
       */
      next_steps_sales: "next_steps_sales",
      /**
       * value: "num_people"
       * @const
       */
      num_people: "num_people",
      /**
       * value: "number_of_user_reports"
       * @const
       */
      number_of_user_reports: "number_of_user_reports",
      /**
       * value: "office_location"
       * @const
       */
      office_location: "office_location",
      /**
       * value: "onboarding_activity"
       * @const
       */
      onboarding_activity: "onboarding_activity",
      /**
       * value: "owner"
       * @const
       */
      owner: "owner",
      /**
       * value: "participants_needed"
       * @const
       */
      participants_needed: "participants_needed",
      /**
       * value: "patient_date_of_birth"
       * @const
       */
      patient_date_of_birth: "patient_date_of_birth",
      /**
       * value: "patient_email"
       * @const
       */
      patient_email: "patient_email",
      /**
       * value: "patient_phone"
       * @const
       */
      patient_phone: "patient_phone",
      /**
       * value: "patient_status"
       * @const
       */
      patient_status: "patient_status",
      /**
       * value: "phone_number"
       * @const
       */
      phone_number: "phone_number",
      /**
       * value: "planning_category"
       * @const
       */
      planning_category: "planning_category",
      /**
       * value: "point_of_contact"
       * @const
       */
      point_of_contact: "point_of_contact",
      /**
       * value: "position"
       * @const
       */
      position: "position",
      /**
       * value: "post_format"
       * @const
       */
      post_format: "post_format",
      /**
       * value: "prescription"
       * @const
       */
      prescription: "prescription",
      /**
       * value: "priority"
       * @const
       */
      priority: "priority",
      /**
       * value: "priority_level"
       * @const
       */
      priority_level: "priority_level",
      /**
       * value: "product"
       * @const
       */
      product: "product",
      /**
       * value: "product_stage"
       * @const
       */
      product_stage: "product_stage",
      /**
       * value: "progress"
       * @const
       */
      progress: "progress",
      /**
       * value: "project_size"
       * @const
       */
      project_size: "project_size",
      /**
       * value: "project_status"
       * @const
       */
      project_status: "project_status",
      /**
       * value: "proposed_budget"
       * @const
       */
      proposed_budget: "proposed_budget",
      /**
       * value: "publish_status"
       * @const
       */
      publish_status: "publish_status",
      /**
       * value: "reason_for_scan"
       * @const
       */
      reason_for_scan: "reason_for_scan",
      /**
       * value: "referral"
       * @const
       */
      referral: "referral",
      /**
       * value: "request_type"
       * @const
       */
      request_type: "request_type",
      /**
       * value: "research_status"
       * @const
       */
      research_status: "research_status",
      /**
       * value: "responsible_department"
       * @const
       */
      responsible_department: "responsible_department",
      /**
       * value: "responsible_team"
       * @const
       */
      responsible_team: "responsible_team",
      /**
       * value: "risk_assessment_status"
       * @const
       */
      risk_assessment_status: "risk_assessment_status",
      /**
       * value: "room_name"
       * @const
       */
      room_name: "room_name",
      /**
       * value: "sales_counterpart"
       * @const
       */
      sales_counterpart: "sales_counterpart",
      /**
       * value: "sentiment"
       * @const
       */
      sentiment: "sentiment",
      /**
       * value: "shipping_link"
       * @const
       */
      shipping_link: "shipping_link",
      /**
       * value: "social_channels"
       * @const
       */
      social_channels: "social_channels",
      /**
       * value: "stage"
       * @const
       */
      stage: "stage",
      /**
       * value: "status"
       * @const
       */
      status: "status",
      /**
       * value: "status_design"
       * @const
       */
      status_design: "status_design",
      /**
       * value: "status_of_initiative"
       * @const
       */
      status_of_initiative: "status_of_initiative",
      /**
       * value: "system_setup"
       * @const
       */
      system_setup: "system_setup",
      /**
       * value: "task_progress"
       * @const
       */
      task_progress: "task_progress",
      /**
       * value: "team"
       * @const
       */
      team: "team",
      /**
       * value: "team_marketing"
       * @const
       */
      team_marketing: "team_marketing",
      /**
       * value: "team_responsible"
       * @const
       */
      team_responsible: "team_responsible",
      /**
       * value: "time_it_takes_to_complete_tasks"
       * @const
       */
      time_it_takes_to_complete_tasks: "time_it_takes_to_complete_tasks",
      /**
       * value: "timeframe"
       * @const
       */
      timeframe: "timeframe",
      /**
       * value: "treatment_type"
       * @const
       */
      treatment_type: "treatment_type",
      /**
       * value: "type_work_requests_it"
       * @const
       */
      type_work_requests_it: "type_work_requests_it",
      /**
       * value: "use_agency"
       * @const
       */
      use_agency: "use_agency",
      /**
       * value: "user_name"
       * @const
       */
      user_name: "user_name",
      /**
       * value: "vendor_category"
       * @const
       */
      vendor_category: "vendor_category",
      /**
       * value: "vendor_type"
       * @const
       */
      vendor_type: "vendor_type",
      /**
       * value: "word_count"
       * @const
       */
      word_count: "word_count",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldBase.prototype.asana_created_field = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldCompact.js
var require_CustomFieldCompact = __commonJS({
  "node_modules/asana/dist/model/CustomFieldCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldCompact = /* @__PURE__ */ function() {
      function CustomFieldCompact2() {
        _classCallCheck(this, CustomFieldCompact2);
      }
      _createClass(CustomFieldCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldCompact2;
    }();
    exports.CustomFieldCompact = CustomFieldCompact;
    CustomFieldCompact.prototype.gid = void 0;
    CustomFieldCompact.prototype.resource_type = void 0;
    CustomFieldCompact.prototype.name = void 0;
    CustomFieldCompact.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldCompact.prototype.resource_subtype = void 0;
    CustomFieldCompact.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldCompact.prototype.type = void 0;
    CustomFieldCompact.prototype.enum_options = void 0;
    CustomFieldCompact.prototype.enabled = void 0;
    CustomFieldCompact.prototype.is_formula_field = void 0;
    CustomFieldCompact.prototype.date_value = void 0;
    CustomFieldCompact.prototype.enum_value = void 0;
    CustomFieldCompact.prototype.multi_enum_values = void 0;
    CustomFieldCompact.prototype.number_value = void 0;
    CustomFieldCompact.prototype.text_value = void 0;
    CustomFieldCompact.prototype.display_value = void 0;
  }
});

// node_modules/asana/dist/model/EnumOptionRequest.js
var require_EnumOptionRequest = __commonJS({
  "node_modules/asana/dist/model/EnumOptionRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumOptionRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EnumOptionRequest = /* @__PURE__ */ function() {
      function EnumOptionRequest2() {
        _classCallCheck(this, EnumOptionRequest2);
      }
      _createClass(EnumOptionRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EnumOptionRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
          }
          return obj;
        }
      }]);
      return EnumOptionRequest2;
    }();
    exports.EnumOptionRequest = EnumOptionRequest;
    EnumOptionRequest.prototype.gid = void 0;
    EnumOptionRequest.prototype.resource_type = void 0;
    EnumOptionRequest.prototype.name = void 0;
    EnumOptionRequest.prototype.enabled = void 0;
    EnumOptionRequest.prototype.color = void 0;
    EnumOptionRequest.prototype.insert_before = void 0;
    EnumOptionRequest.prototype.insert_after = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldGidEnumOptionsBody.js
var require_CustomFieldGidEnumOptionsBody = __commonJS({
  "node_modules/asana/dist/model/CustomFieldGidEnumOptionsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldGidEnumOptionsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _EnumOptionRequest = require_EnumOptionRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldGidEnumOptionsBody = /* @__PURE__ */ function() {
      function CustomFieldGidEnumOptionsBody2() {
        _classCallCheck(this, CustomFieldGidEnumOptionsBody2);
      }
      _createClass(CustomFieldGidEnumOptionsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldGidEnumOptionsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _EnumOptionRequest.EnumOptionRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return CustomFieldGidEnumOptionsBody2;
    }();
    exports.CustomFieldGidEnumOptionsBody = CustomFieldGidEnumOptionsBody;
    CustomFieldGidEnumOptionsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldRequest.js
var require_CustomFieldRequest = __commonJS({
  "node_modules/asana/dist/model/CustomFieldRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldRequest = /* @__PURE__ */ function() {
      function CustomFieldRequest2(workspace) {
        _classCallCheck(this, CustomFieldRequest2);
        this.workspace = workspace;
      }
      _createClass(CustomFieldRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("format"))
              obj.format = _ApiClient.ApiClient.convertToType(data["format"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("custom_label"))
              obj.custom_label = _ApiClient.ApiClient.convertToType(data["custom_label"], "String");
            if (data.hasOwnProperty("custom_label_position"))
              obj.custom_label_position = _ApiClient.ApiClient.convertToType(data["custom_label_position"], "String");
            if (data.hasOwnProperty("is_global_to_workspace"))
              obj.is_global_to_workspace = _ApiClient.ApiClient.convertToType(data["is_global_to_workspace"], "Boolean");
            if (data.hasOwnProperty("has_notifications_enabled"))
              obj.has_notifications_enabled = _ApiClient.ApiClient.convertToType(data["has_notifications_enabled"], "Boolean");
            if (data.hasOwnProperty("asana_created_field"))
              obj.asana_created_field = _ApiClient.ApiClient.convertToType(data["asana_created_field"], "String");
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
            if (data.hasOwnProperty("owned_by_app"))
              obj.owned_by_app = _ApiClient.ApiClient.convertToType(data["owned_by_app"], "Boolean");
            if (data.hasOwnProperty("people_value"))
              obj.people_value = _ApiClient.ApiClient.convertToType(data["people_value"], ["String"]);
          }
          return obj;
        }
      }]);
      return CustomFieldRequest2;
    }();
    exports.CustomFieldRequest = CustomFieldRequest;
    CustomFieldRequest.prototype.gid = void 0;
    CustomFieldRequest.prototype.resource_type = void 0;
    CustomFieldRequest.prototype.name = void 0;
    CustomFieldRequest.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldRequest.prototype.resource_subtype = void 0;
    CustomFieldRequest.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldRequest.prototype.type = void 0;
    CustomFieldRequest.prototype.enum_options = void 0;
    CustomFieldRequest.prototype.enabled = void 0;
    CustomFieldRequest.prototype.is_formula_field = void 0;
    CustomFieldRequest.prototype.date_value = void 0;
    CustomFieldRequest.prototype.enum_value = void 0;
    CustomFieldRequest.prototype.multi_enum_values = void 0;
    CustomFieldRequest.prototype.number_value = void 0;
    CustomFieldRequest.prototype.text_value = void 0;
    CustomFieldRequest.prototype.display_value = void 0;
    CustomFieldRequest.prototype.description = void 0;
    CustomFieldRequest.prototype.precision = void 0;
    CustomFieldRequest.FormatEnum = {
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "identifier"
       * @const
       */
      identifier: "identifier",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage",
      /**
       * value: "custom"
       * @const
       */
      custom: "custom",
      /**
       * value: "duration"
       * @const
       */
      duration: "duration",
      /**
       * value: "none"
       * @const
       */
      none: "none"
    };
    CustomFieldRequest.prototype.format = void 0;
    CustomFieldRequest.prototype.currency_code = void 0;
    CustomFieldRequest.prototype.custom_label = void 0;
    CustomFieldRequest.CustomLabelPositionEnum = {
      /**
       * value: "prefix"
       * @const
       */
      prefix: "prefix",
      /**
       * value: "suffix"
       * @const
       */
      suffix: "suffix",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldRequest.prototype.custom_label_position = void 0;
    CustomFieldRequest.prototype.is_global_to_workspace = void 0;
    CustomFieldRequest.prototype.has_notifications_enabled = void 0;
    CustomFieldRequest.AsanaCreatedFieldEnum = {
      /**
       * value: "a_v_requirements"
       * @const
       */
      a_v_requirements: "a_v_requirements",
      /**
       * value: "account_name"
       * @const
       */
      account_name: "account_name",
      /**
       * value: "actionable"
       * @const
       */
      actionable: "actionable",
      /**
       * value: "align_shipping_link"
       * @const
       */
      align_shipping_link: "align_shipping_link",
      /**
       * value: "align_status"
       * @const
       */
      align_status: "align_status",
      /**
       * value: "allotted_time"
       * @const
       */
      allotted_time: "allotted_time",
      /**
       * value: "appointment"
       * @const
       */
      appointment: "appointment",
      /**
       * value: "approval_stage"
       * @const
       */
      approval_stage: "approval_stage",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "article_series"
       * @const
       */
      article_series: "article_series",
      /**
       * value: "board_committee"
       * @const
       */
      board_committee: "board_committee",
      /**
       * value: "browser"
       * @const
       */
      browser: "browser",
      /**
       * value: "campaign_audience"
       * @const
       */
      campaign_audience: "campaign_audience",
      /**
       * value: "campaign_project_status"
       * @const
       */
      campaign_project_status: "campaign_project_status",
      /**
       * value: "campaign_regions"
       * @const
       */
      campaign_regions: "campaign_regions",
      /**
       * value: "channel_primary"
       * @const
       */
      channel_primary: "channel_primary",
      /**
       * value: "client_topic_type"
       * @const
       */
      client_topic_type: "client_topic_type",
      /**
       * value: "complete_by"
       * @const
       */
      complete_by: "complete_by",
      /**
       * value: "contact"
       * @const
       */
      contact: "contact",
      /**
       * value: "contact_email_address"
       * @const
       */
      contact_email_address: "contact_email_address",
      /**
       * value: "content_channels"
       * @const
       */
      content_channels: "content_channels",
      /**
       * value: "content_channels_needed"
       * @const
       */
      content_channels_needed: "content_channels_needed",
      /**
       * value: "content_stage"
       * @const
       */
      content_stage: "content_stage",
      /**
       * value: "content_type"
       * @const
       */
      content_type: "content_type",
      /**
       * value: "contract"
       * @const
       */
      contract: "contract",
      /**
       * value: "contract_status"
       * @const
       */
      contract_status: "contract_status",
      /**
       * value: "cost"
       * @const
       */
      cost: "cost",
      /**
       * value: "creation_stage"
       * @const
       */
      creation_stage: "creation_stage",
      /**
       * value: "creative_channel"
       * @const
       */
      creative_channel: "creative_channel",
      /**
       * value: "creative_needed"
       * @const
       */
      creative_needed: "creative_needed",
      /**
       * value: "creative_needs"
       * @const
       */
      creative_needs: "creative_needs",
      /**
       * value: "data_sensitivity"
       * @const
       */
      data_sensitivity: "data_sensitivity",
      /**
       * value: "deal_size"
       * @const
       */
      deal_size: "deal_size",
      /**
       * value: "delivery_appt"
       * @const
       */
      delivery_appt: "delivery_appt",
      /**
       * value: "delivery_appt_date"
       * @const
       */
      delivery_appt_date: "delivery_appt_date",
      /**
       * value: "department"
       * @const
       */
      department: "department",
      /**
       * value: "department_responsible"
       * @const
       */
      department_responsible: "department_responsible",
      /**
       * value: "design_request_needed"
       * @const
       */
      design_request_needed: "design_request_needed",
      /**
       * value: "design_request_type"
       * @const
       */
      design_request_type: "design_request_type",
      /**
       * value: "discussion_category"
       * @const
       */
      discussion_category: "discussion_category",
      /**
       * value: "do_this_task"
       * @const
       */
      do_this_task: "do_this_task",
      /**
       * value: "editorial_content_status"
       * @const
       */
      editorial_content_status: "editorial_content_status",
      /**
       * value: "editorial_content_tag"
       * @const
       */
      editorial_content_tag: "editorial_content_tag",
      /**
       * value: "editorial_content_type"
       * @const
       */
      editorial_content_type: "editorial_content_type",
      /**
       * value: "effort"
       * @const
       */
      effort: "effort",
      /**
       * value: "effort_level"
       * @const
       */
      effort_level: "effort_level",
      /**
       * value: "est_completion_date"
       * @const
       */
      est_completion_date: "est_completion_date",
      /**
       * value: "estimated_time"
       * @const
       */
      estimated_time: "estimated_time",
      /**
       * value: "estimated_value"
       * @const
       */
      estimated_value: "estimated_value",
      /**
       * value: "expected_cost"
       * @const
       */
      expected_cost: "expected_cost",
      /**
       * value: "external_steps_needed"
       * @const
       */
      external_steps_needed: "external_steps_needed",
      /**
       * value: "favorite_idea"
       * @const
       */
      favorite_idea: "favorite_idea",
      /**
       * value: "feedback_type"
       * @const
       */
      feedback_type: "feedback_type",
      /**
       * value: "financial"
       * @const
       */
      financial: "financial",
      /**
       * value: "funding_amount"
       * @const
       */
      funding_amount: "funding_amount",
      /**
       * value: "grant_application_process"
       * @const
       */
      grant_application_process: "grant_application_process",
      /**
       * value: "hiring_candidate_status"
       * @const
       */
      hiring_candidate_status: "hiring_candidate_status",
      /**
       * value: "idea_status"
       * @const
       */
      idea_status: "idea_status",
      /**
       * value: "ids_link"
       * @const
       */
      ids_link: "ids_link",
      /**
       * value: "ids_patient_link"
       * @const
       */
      ids_patient_link: "ids_patient_link",
      /**
       * value: "implementation_stage"
       * @const
       */
      implementation_stage: "implementation_stage",
      /**
       * value: "insurance"
       * @const
       */
      insurance: "insurance",
      /**
       * value: "interview_area"
       * @const
       */
      interview_area: "interview_area",
      /**
       * value: "interview_question_score"
       * @const
       */
      interview_question_score: "interview_question_score",
      /**
       * value: "itero_scan_link"
       * @const
       */
      itero_scan_link: "itero_scan_link",
      /**
       * value: "job_s_applied_to"
       * @const
       */
      job_s_applied_to: "job_s_applied_to",
      /**
       * value: "lab"
       * @const
       */
      lab: "lab",
      /**
       * value: "launch_status"
       * @const
       */
      launch_status: "launch_status",
      /**
       * value: "lead_status"
       * @const
       */
      lead_status: "lead_status",
      /**
       * value: "localization_language"
       * @const
       */
      localization_language: "localization_language",
      /**
       * value: "localization_market_team"
       * @const
       */
      localization_market_team: "localization_market_team",
      /**
       * value: "localization_status"
       * @const
       */
      localization_status: "localization_status",
      /**
       * value: "meeting_minutes"
       * @const
       */
      meeting_minutes: "meeting_minutes",
      /**
       * value: "meeting_needed"
       * @const
       */
      meeting_needed: "meeting_needed",
      /**
       * value: "minutes"
       * @const
       */
      minutes: "minutes",
      /**
       * value: "mrr"
       * @const
       */
      mrr: "mrr",
      /**
       * value: "must_localize"
       * @const
       */
      must_localize: "must_localize",
      /**
       * value: "name_of_foundation"
       * @const
       */
      name_of_foundation: "name_of_foundation",
      /**
       * value: "need_to_follow_up"
       * @const
       */
      need_to_follow_up: "need_to_follow_up",
      /**
       * value: "next_appointment"
       * @const
       */
      next_appointment: "next_appointment",
      /**
       * value: "next_steps_sales"
       * @const
       */
      next_steps_sales: "next_steps_sales",
      /**
       * value: "num_people"
       * @const
       */
      num_people: "num_people",
      /**
       * value: "number_of_user_reports"
       * @const
       */
      number_of_user_reports: "number_of_user_reports",
      /**
       * value: "office_location"
       * @const
       */
      office_location: "office_location",
      /**
       * value: "onboarding_activity"
       * @const
       */
      onboarding_activity: "onboarding_activity",
      /**
       * value: "owner"
       * @const
       */
      owner: "owner",
      /**
       * value: "participants_needed"
       * @const
       */
      participants_needed: "participants_needed",
      /**
       * value: "patient_date_of_birth"
       * @const
       */
      patient_date_of_birth: "patient_date_of_birth",
      /**
       * value: "patient_email"
       * @const
       */
      patient_email: "patient_email",
      /**
       * value: "patient_phone"
       * @const
       */
      patient_phone: "patient_phone",
      /**
       * value: "patient_status"
       * @const
       */
      patient_status: "patient_status",
      /**
       * value: "phone_number"
       * @const
       */
      phone_number: "phone_number",
      /**
       * value: "planning_category"
       * @const
       */
      planning_category: "planning_category",
      /**
       * value: "point_of_contact"
       * @const
       */
      point_of_contact: "point_of_contact",
      /**
       * value: "position"
       * @const
       */
      position: "position",
      /**
       * value: "post_format"
       * @const
       */
      post_format: "post_format",
      /**
       * value: "prescription"
       * @const
       */
      prescription: "prescription",
      /**
       * value: "priority"
       * @const
       */
      priority: "priority",
      /**
       * value: "priority_level"
       * @const
       */
      priority_level: "priority_level",
      /**
       * value: "product"
       * @const
       */
      product: "product",
      /**
       * value: "product_stage"
       * @const
       */
      product_stage: "product_stage",
      /**
       * value: "progress"
       * @const
       */
      progress: "progress",
      /**
       * value: "project_size"
       * @const
       */
      project_size: "project_size",
      /**
       * value: "project_status"
       * @const
       */
      project_status: "project_status",
      /**
       * value: "proposed_budget"
       * @const
       */
      proposed_budget: "proposed_budget",
      /**
       * value: "publish_status"
       * @const
       */
      publish_status: "publish_status",
      /**
       * value: "reason_for_scan"
       * @const
       */
      reason_for_scan: "reason_for_scan",
      /**
       * value: "referral"
       * @const
       */
      referral: "referral",
      /**
       * value: "request_type"
       * @const
       */
      request_type: "request_type",
      /**
       * value: "research_status"
       * @const
       */
      research_status: "research_status",
      /**
       * value: "responsible_department"
       * @const
       */
      responsible_department: "responsible_department",
      /**
       * value: "responsible_team"
       * @const
       */
      responsible_team: "responsible_team",
      /**
       * value: "risk_assessment_status"
       * @const
       */
      risk_assessment_status: "risk_assessment_status",
      /**
       * value: "room_name"
       * @const
       */
      room_name: "room_name",
      /**
       * value: "sales_counterpart"
       * @const
       */
      sales_counterpart: "sales_counterpart",
      /**
       * value: "sentiment"
       * @const
       */
      sentiment: "sentiment",
      /**
       * value: "shipping_link"
       * @const
       */
      shipping_link: "shipping_link",
      /**
       * value: "social_channels"
       * @const
       */
      social_channels: "social_channels",
      /**
       * value: "stage"
       * @const
       */
      stage: "stage",
      /**
       * value: "status"
       * @const
       */
      status: "status",
      /**
       * value: "status_design"
       * @const
       */
      status_design: "status_design",
      /**
       * value: "status_of_initiative"
       * @const
       */
      status_of_initiative: "status_of_initiative",
      /**
       * value: "system_setup"
       * @const
       */
      system_setup: "system_setup",
      /**
       * value: "task_progress"
       * @const
       */
      task_progress: "task_progress",
      /**
       * value: "team"
       * @const
       */
      team: "team",
      /**
       * value: "team_marketing"
       * @const
       */
      team_marketing: "team_marketing",
      /**
       * value: "team_responsible"
       * @const
       */
      team_responsible: "team_responsible",
      /**
       * value: "time_it_takes_to_complete_tasks"
       * @const
       */
      time_it_takes_to_complete_tasks: "time_it_takes_to_complete_tasks",
      /**
       * value: "timeframe"
       * @const
       */
      timeframe: "timeframe",
      /**
       * value: "treatment_type"
       * @const
       */
      treatment_type: "treatment_type",
      /**
       * value: "type_work_requests_it"
       * @const
       */
      type_work_requests_it: "type_work_requests_it",
      /**
       * value: "use_agency"
       * @const
       */
      use_agency: "use_agency",
      /**
       * value: "user_name"
       * @const
       */
      user_name: "user_name",
      /**
       * value: "vendor_category"
       * @const
       */
      vendor_category: "vendor_category",
      /**
       * value: "vendor_type"
       * @const
       */
      vendor_type: "vendor_type",
      /**
       * value: "word_count"
       * @const
       */
      word_count: "word_count",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldRequest.prototype.asana_created_field = void 0;
    CustomFieldRequest.prototype.workspace = void 0;
    CustomFieldRequest.prototype.owned_by_app = void 0;
    CustomFieldRequest.prototype.people_value = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldResponseCreatedBy.js
var require_CustomFieldResponseCreatedBy = __commonJS({
  "node_modules/asana/dist/model/CustomFieldResponseCreatedBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldResponseCreatedBy = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldResponseCreatedBy = /* @__PURE__ */ function() {
      function CustomFieldResponseCreatedBy2() {
        _classCallCheck(this, CustomFieldResponseCreatedBy2);
      }
      _createClass(CustomFieldResponseCreatedBy2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldResponseCreatedBy2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldResponseCreatedBy2;
    }();
    exports.CustomFieldResponseCreatedBy = CustomFieldResponseCreatedBy;
    CustomFieldResponseCreatedBy.prototype.gid = void 0;
    CustomFieldResponseCreatedBy.prototype.resource_type = void 0;
    CustomFieldResponseCreatedBy.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldResponsePeopleValue.js
var require_CustomFieldResponsePeopleValue = __commonJS({
  "node_modules/asana/dist/model/CustomFieldResponsePeopleValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldResponsePeopleValue = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldResponsePeopleValue = /* @__PURE__ */ function() {
      function CustomFieldResponsePeopleValue2() {
        _classCallCheck(this, CustomFieldResponsePeopleValue2);
      }
      _createClass(CustomFieldResponsePeopleValue2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldResponsePeopleValue2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldResponsePeopleValue2;
    }();
    exports.CustomFieldResponsePeopleValue = CustomFieldResponsePeopleValue;
    CustomFieldResponsePeopleValue.prototype.gid = void 0;
    CustomFieldResponsePeopleValue.prototype.resource_type = void 0;
    CustomFieldResponsePeopleValue.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldResponse.js
var require_CustomFieldResponse = __commonJS({
  "node_modules/asana/dist/model/CustomFieldResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldResponse = /* @__PURE__ */ function() {
      function CustomFieldResponse2() {
        _classCallCheck(this, CustomFieldResponse2);
      }
      _createClass(CustomFieldResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("format"))
              obj.format = _ApiClient.ApiClient.convertToType(data["format"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("custom_label"))
              obj.custom_label = _ApiClient.ApiClient.convertToType(data["custom_label"], "String");
            if (data.hasOwnProperty("custom_label_position"))
              obj.custom_label_position = _ApiClient.ApiClient.convertToType(data["custom_label_position"], "String");
            if (data.hasOwnProperty("is_global_to_workspace"))
              obj.is_global_to_workspace = _ApiClient.ApiClient.convertToType(data["is_global_to_workspace"], "Boolean");
            if (data.hasOwnProperty("has_notifications_enabled"))
              obj.has_notifications_enabled = _ApiClient.ApiClient.convertToType(data["has_notifications_enabled"], "Boolean");
            if (data.hasOwnProperty("asana_created_field"))
              obj.asana_created_field = _ApiClient.ApiClient.convertToType(data["asana_created_field"], "String");
            if (data.hasOwnProperty("is_value_read_only"))
              obj.is_value_read_only = _ApiClient.ApiClient.convertToType(data["is_value_read_only"], "Boolean");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("people_value"))
              obj.people_value = _ApiClient.ApiClient.convertToType(data["people_value"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
          }
          return obj;
        }
      }]);
      return CustomFieldResponse2;
    }();
    exports.CustomFieldResponse = CustomFieldResponse;
    CustomFieldResponse.prototype.gid = void 0;
    CustomFieldResponse.prototype.resource_type = void 0;
    CustomFieldResponse.prototype.name = void 0;
    CustomFieldResponse.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldResponse.prototype.resource_subtype = void 0;
    CustomFieldResponse.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldResponse.prototype.type = void 0;
    CustomFieldResponse.prototype.enum_options = void 0;
    CustomFieldResponse.prototype.enabled = void 0;
    CustomFieldResponse.prototype.is_formula_field = void 0;
    CustomFieldResponse.prototype.date_value = void 0;
    CustomFieldResponse.prototype.enum_value = void 0;
    CustomFieldResponse.prototype.multi_enum_values = void 0;
    CustomFieldResponse.prototype.number_value = void 0;
    CustomFieldResponse.prototype.text_value = void 0;
    CustomFieldResponse.prototype.display_value = void 0;
    CustomFieldResponse.prototype.description = void 0;
    CustomFieldResponse.prototype.precision = void 0;
    CustomFieldResponse.FormatEnum = {
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "identifier"
       * @const
       */
      identifier: "identifier",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage",
      /**
       * value: "custom"
       * @const
       */
      custom: "custom",
      /**
       * value: "duration"
       * @const
       */
      duration: "duration",
      /**
       * value: "none"
       * @const
       */
      none: "none"
    };
    CustomFieldResponse.prototype.format = void 0;
    CustomFieldResponse.prototype.currency_code = void 0;
    CustomFieldResponse.prototype.custom_label = void 0;
    CustomFieldResponse.CustomLabelPositionEnum = {
      /**
       * value: "prefix"
       * @const
       */
      prefix: "prefix",
      /**
       * value: "suffix"
       * @const
       */
      suffix: "suffix",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldResponse.prototype.custom_label_position = void 0;
    CustomFieldResponse.prototype.is_global_to_workspace = void 0;
    CustomFieldResponse.prototype.has_notifications_enabled = void 0;
    CustomFieldResponse.AsanaCreatedFieldEnum = {
      /**
       * value: "a_v_requirements"
       * @const
       */
      a_v_requirements: "a_v_requirements",
      /**
       * value: "account_name"
       * @const
       */
      account_name: "account_name",
      /**
       * value: "actionable"
       * @const
       */
      actionable: "actionable",
      /**
       * value: "align_shipping_link"
       * @const
       */
      align_shipping_link: "align_shipping_link",
      /**
       * value: "align_status"
       * @const
       */
      align_status: "align_status",
      /**
       * value: "allotted_time"
       * @const
       */
      allotted_time: "allotted_time",
      /**
       * value: "appointment"
       * @const
       */
      appointment: "appointment",
      /**
       * value: "approval_stage"
       * @const
       */
      approval_stage: "approval_stage",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "article_series"
       * @const
       */
      article_series: "article_series",
      /**
       * value: "board_committee"
       * @const
       */
      board_committee: "board_committee",
      /**
       * value: "browser"
       * @const
       */
      browser: "browser",
      /**
       * value: "campaign_audience"
       * @const
       */
      campaign_audience: "campaign_audience",
      /**
       * value: "campaign_project_status"
       * @const
       */
      campaign_project_status: "campaign_project_status",
      /**
       * value: "campaign_regions"
       * @const
       */
      campaign_regions: "campaign_regions",
      /**
       * value: "channel_primary"
       * @const
       */
      channel_primary: "channel_primary",
      /**
       * value: "client_topic_type"
       * @const
       */
      client_topic_type: "client_topic_type",
      /**
       * value: "complete_by"
       * @const
       */
      complete_by: "complete_by",
      /**
       * value: "contact"
       * @const
       */
      contact: "contact",
      /**
       * value: "contact_email_address"
       * @const
       */
      contact_email_address: "contact_email_address",
      /**
       * value: "content_channels"
       * @const
       */
      content_channels: "content_channels",
      /**
       * value: "content_channels_needed"
       * @const
       */
      content_channels_needed: "content_channels_needed",
      /**
       * value: "content_stage"
       * @const
       */
      content_stage: "content_stage",
      /**
       * value: "content_type"
       * @const
       */
      content_type: "content_type",
      /**
       * value: "contract"
       * @const
       */
      contract: "contract",
      /**
       * value: "contract_status"
       * @const
       */
      contract_status: "contract_status",
      /**
       * value: "cost"
       * @const
       */
      cost: "cost",
      /**
       * value: "creation_stage"
       * @const
       */
      creation_stage: "creation_stage",
      /**
       * value: "creative_channel"
       * @const
       */
      creative_channel: "creative_channel",
      /**
       * value: "creative_needed"
       * @const
       */
      creative_needed: "creative_needed",
      /**
       * value: "creative_needs"
       * @const
       */
      creative_needs: "creative_needs",
      /**
       * value: "data_sensitivity"
       * @const
       */
      data_sensitivity: "data_sensitivity",
      /**
       * value: "deal_size"
       * @const
       */
      deal_size: "deal_size",
      /**
       * value: "delivery_appt"
       * @const
       */
      delivery_appt: "delivery_appt",
      /**
       * value: "delivery_appt_date"
       * @const
       */
      delivery_appt_date: "delivery_appt_date",
      /**
       * value: "department"
       * @const
       */
      department: "department",
      /**
       * value: "department_responsible"
       * @const
       */
      department_responsible: "department_responsible",
      /**
       * value: "design_request_needed"
       * @const
       */
      design_request_needed: "design_request_needed",
      /**
       * value: "design_request_type"
       * @const
       */
      design_request_type: "design_request_type",
      /**
       * value: "discussion_category"
       * @const
       */
      discussion_category: "discussion_category",
      /**
       * value: "do_this_task"
       * @const
       */
      do_this_task: "do_this_task",
      /**
       * value: "editorial_content_status"
       * @const
       */
      editorial_content_status: "editorial_content_status",
      /**
       * value: "editorial_content_tag"
       * @const
       */
      editorial_content_tag: "editorial_content_tag",
      /**
       * value: "editorial_content_type"
       * @const
       */
      editorial_content_type: "editorial_content_type",
      /**
       * value: "effort"
       * @const
       */
      effort: "effort",
      /**
       * value: "effort_level"
       * @const
       */
      effort_level: "effort_level",
      /**
       * value: "est_completion_date"
       * @const
       */
      est_completion_date: "est_completion_date",
      /**
       * value: "estimated_time"
       * @const
       */
      estimated_time: "estimated_time",
      /**
       * value: "estimated_value"
       * @const
       */
      estimated_value: "estimated_value",
      /**
       * value: "expected_cost"
       * @const
       */
      expected_cost: "expected_cost",
      /**
       * value: "external_steps_needed"
       * @const
       */
      external_steps_needed: "external_steps_needed",
      /**
       * value: "favorite_idea"
       * @const
       */
      favorite_idea: "favorite_idea",
      /**
       * value: "feedback_type"
       * @const
       */
      feedback_type: "feedback_type",
      /**
       * value: "financial"
       * @const
       */
      financial: "financial",
      /**
       * value: "funding_amount"
       * @const
       */
      funding_amount: "funding_amount",
      /**
       * value: "grant_application_process"
       * @const
       */
      grant_application_process: "grant_application_process",
      /**
       * value: "hiring_candidate_status"
       * @const
       */
      hiring_candidate_status: "hiring_candidate_status",
      /**
       * value: "idea_status"
       * @const
       */
      idea_status: "idea_status",
      /**
       * value: "ids_link"
       * @const
       */
      ids_link: "ids_link",
      /**
       * value: "ids_patient_link"
       * @const
       */
      ids_patient_link: "ids_patient_link",
      /**
       * value: "implementation_stage"
       * @const
       */
      implementation_stage: "implementation_stage",
      /**
       * value: "insurance"
       * @const
       */
      insurance: "insurance",
      /**
       * value: "interview_area"
       * @const
       */
      interview_area: "interview_area",
      /**
       * value: "interview_question_score"
       * @const
       */
      interview_question_score: "interview_question_score",
      /**
       * value: "itero_scan_link"
       * @const
       */
      itero_scan_link: "itero_scan_link",
      /**
       * value: "job_s_applied_to"
       * @const
       */
      job_s_applied_to: "job_s_applied_to",
      /**
       * value: "lab"
       * @const
       */
      lab: "lab",
      /**
       * value: "launch_status"
       * @const
       */
      launch_status: "launch_status",
      /**
       * value: "lead_status"
       * @const
       */
      lead_status: "lead_status",
      /**
       * value: "localization_language"
       * @const
       */
      localization_language: "localization_language",
      /**
       * value: "localization_market_team"
       * @const
       */
      localization_market_team: "localization_market_team",
      /**
       * value: "localization_status"
       * @const
       */
      localization_status: "localization_status",
      /**
       * value: "meeting_minutes"
       * @const
       */
      meeting_minutes: "meeting_minutes",
      /**
       * value: "meeting_needed"
       * @const
       */
      meeting_needed: "meeting_needed",
      /**
       * value: "minutes"
       * @const
       */
      minutes: "minutes",
      /**
       * value: "mrr"
       * @const
       */
      mrr: "mrr",
      /**
       * value: "must_localize"
       * @const
       */
      must_localize: "must_localize",
      /**
       * value: "name_of_foundation"
       * @const
       */
      name_of_foundation: "name_of_foundation",
      /**
       * value: "need_to_follow_up"
       * @const
       */
      need_to_follow_up: "need_to_follow_up",
      /**
       * value: "next_appointment"
       * @const
       */
      next_appointment: "next_appointment",
      /**
       * value: "next_steps_sales"
       * @const
       */
      next_steps_sales: "next_steps_sales",
      /**
       * value: "num_people"
       * @const
       */
      num_people: "num_people",
      /**
       * value: "number_of_user_reports"
       * @const
       */
      number_of_user_reports: "number_of_user_reports",
      /**
       * value: "office_location"
       * @const
       */
      office_location: "office_location",
      /**
       * value: "onboarding_activity"
       * @const
       */
      onboarding_activity: "onboarding_activity",
      /**
       * value: "owner"
       * @const
       */
      owner: "owner",
      /**
       * value: "participants_needed"
       * @const
       */
      participants_needed: "participants_needed",
      /**
       * value: "patient_date_of_birth"
       * @const
       */
      patient_date_of_birth: "patient_date_of_birth",
      /**
       * value: "patient_email"
       * @const
       */
      patient_email: "patient_email",
      /**
       * value: "patient_phone"
       * @const
       */
      patient_phone: "patient_phone",
      /**
       * value: "patient_status"
       * @const
       */
      patient_status: "patient_status",
      /**
       * value: "phone_number"
       * @const
       */
      phone_number: "phone_number",
      /**
       * value: "planning_category"
       * @const
       */
      planning_category: "planning_category",
      /**
       * value: "point_of_contact"
       * @const
       */
      point_of_contact: "point_of_contact",
      /**
       * value: "position"
       * @const
       */
      position: "position",
      /**
       * value: "post_format"
       * @const
       */
      post_format: "post_format",
      /**
       * value: "prescription"
       * @const
       */
      prescription: "prescription",
      /**
       * value: "priority"
       * @const
       */
      priority: "priority",
      /**
       * value: "priority_level"
       * @const
       */
      priority_level: "priority_level",
      /**
       * value: "product"
       * @const
       */
      product: "product",
      /**
       * value: "product_stage"
       * @const
       */
      product_stage: "product_stage",
      /**
       * value: "progress"
       * @const
       */
      progress: "progress",
      /**
       * value: "project_size"
       * @const
       */
      project_size: "project_size",
      /**
       * value: "project_status"
       * @const
       */
      project_status: "project_status",
      /**
       * value: "proposed_budget"
       * @const
       */
      proposed_budget: "proposed_budget",
      /**
       * value: "publish_status"
       * @const
       */
      publish_status: "publish_status",
      /**
       * value: "reason_for_scan"
       * @const
       */
      reason_for_scan: "reason_for_scan",
      /**
       * value: "referral"
       * @const
       */
      referral: "referral",
      /**
       * value: "request_type"
       * @const
       */
      request_type: "request_type",
      /**
       * value: "research_status"
       * @const
       */
      research_status: "research_status",
      /**
       * value: "responsible_department"
       * @const
       */
      responsible_department: "responsible_department",
      /**
       * value: "responsible_team"
       * @const
       */
      responsible_team: "responsible_team",
      /**
       * value: "risk_assessment_status"
       * @const
       */
      risk_assessment_status: "risk_assessment_status",
      /**
       * value: "room_name"
       * @const
       */
      room_name: "room_name",
      /**
       * value: "sales_counterpart"
       * @const
       */
      sales_counterpart: "sales_counterpart",
      /**
       * value: "sentiment"
       * @const
       */
      sentiment: "sentiment",
      /**
       * value: "shipping_link"
       * @const
       */
      shipping_link: "shipping_link",
      /**
       * value: "social_channels"
       * @const
       */
      social_channels: "social_channels",
      /**
       * value: "stage"
       * @const
       */
      stage: "stage",
      /**
       * value: "status"
       * @const
       */
      status: "status",
      /**
       * value: "status_design"
       * @const
       */
      status_design: "status_design",
      /**
       * value: "status_of_initiative"
       * @const
       */
      status_of_initiative: "status_of_initiative",
      /**
       * value: "system_setup"
       * @const
       */
      system_setup: "system_setup",
      /**
       * value: "task_progress"
       * @const
       */
      task_progress: "task_progress",
      /**
       * value: "team"
       * @const
       */
      team: "team",
      /**
       * value: "team_marketing"
       * @const
       */
      team_marketing: "team_marketing",
      /**
       * value: "team_responsible"
       * @const
       */
      team_responsible: "team_responsible",
      /**
       * value: "time_it_takes_to_complete_tasks"
       * @const
       */
      time_it_takes_to_complete_tasks: "time_it_takes_to_complete_tasks",
      /**
       * value: "timeframe"
       * @const
       */
      timeframe: "timeframe",
      /**
       * value: "treatment_type"
       * @const
       */
      treatment_type: "treatment_type",
      /**
       * value: "type_work_requests_it"
       * @const
       */
      type_work_requests_it: "type_work_requests_it",
      /**
       * value: "use_agency"
       * @const
       */
      use_agency: "use_agency",
      /**
       * value: "user_name"
       * @const
       */
      user_name: "user_name",
      /**
       * value: "vendor_category"
       * @const
       */
      vendor_category: "vendor_category",
      /**
       * value: "vendor_type"
       * @const
       */
      vendor_type: "vendor_type",
      /**
       * value: "word_count"
       * @const
       */
      word_count: "word_count",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldResponse.prototype.asana_created_field = void 0;
    CustomFieldResponse.prototype.is_value_read_only = void 0;
    CustomFieldResponse.prototype.created_by = void 0;
    CustomFieldResponse.prototype.people_value = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldResponseArray.js
var require_CustomFieldResponseArray = __commonJS({
  "node_modules/asana/dist/model/CustomFieldResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponse = require_CustomFieldResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldResponseArray = /* @__PURE__ */ function() {
      function CustomFieldResponseArray2(data) {
        _classCallCheck(this, CustomFieldResponseArray2);
        this.data = data;
      }
      _createClass(CustomFieldResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_CustomFieldResponse.CustomFieldResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return CustomFieldResponseArray2;
    }();
    exports.CustomFieldResponseArray = CustomFieldResponseArray;
    CustomFieldResponseArray.prototype.data = void 0;
    CustomFieldResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldResponseData.js
var require_CustomFieldResponseData = __commonJS({
  "node_modules/asana/dist/model/CustomFieldResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponse = require_CustomFieldResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldResponseData = /* @__PURE__ */ function() {
      function CustomFieldResponseData2(data) {
        _classCallCheck(this, CustomFieldResponseData2);
        this.data = data;
      }
      _createClass(CustomFieldResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _CustomFieldResponse.CustomFieldResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return CustomFieldResponseData2;
    }();
    exports.CustomFieldResponseData = CustomFieldResponseData;
    CustomFieldResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingBase.js
var require_CustomFieldSettingBase = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingBase = /* @__PURE__ */ function() {
      function CustomFieldSettingBase2() {
        _classCallCheck(this, CustomFieldSettingBase2);
      }
      _createClass(CustomFieldSettingBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldSettingBase2;
    }();
    exports.CustomFieldSettingBase = CustomFieldSettingBase;
    CustomFieldSettingBase.prototype.gid = void 0;
    CustomFieldSettingBase.prototype.resource_type = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingCompact.js
var require_CustomFieldSettingCompact = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingCompact = /* @__PURE__ */ function() {
      function CustomFieldSettingCompact2() {
        _classCallCheck(this, CustomFieldSettingCompact2);
      }
      _createClass(CustomFieldSettingCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldSettingCompact2;
    }();
    exports.CustomFieldSettingCompact = CustomFieldSettingCompact;
    CustomFieldSettingCompact.prototype.gid = void 0;
    CustomFieldSettingCompact.prototype.resource_type = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingResponseCustomField.js
var require_CustomFieldSettingResponseCustomField = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingResponseCustomField.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingResponseCustomField = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingResponseCustomField = /* @__PURE__ */ function() {
      function CustomFieldSettingResponseCustomField2() {
        _classCallCheck(this, CustomFieldSettingResponseCustomField2);
      }
      _createClass(CustomFieldSettingResponseCustomField2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingResponseCustomField2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("format"))
              obj.format = _ApiClient.ApiClient.convertToType(data["format"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("custom_label"))
              obj.custom_label = _ApiClient.ApiClient.convertToType(data["custom_label"], "String");
            if (data.hasOwnProperty("custom_label_position"))
              obj.custom_label_position = _ApiClient.ApiClient.convertToType(data["custom_label_position"], "String");
            if (data.hasOwnProperty("is_global_to_workspace"))
              obj.is_global_to_workspace = _ApiClient.ApiClient.convertToType(data["is_global_to_workspace"], "Boolean");
            if (data.hasOwnProperty("has_notifications_enabled"))
              obj.has_notifications_enabled = _ApiClient.ApiClient.convertToType(data["has_notifications_enabled"], "Boolean");
            if (data.hasOwnProperty("asana_created_field"))
              obj.asana_created_field = _ApiClient.ApiClient.convertToType(data["asana_created_field"], "String");
            if (data.hasOwnProperty("is_value_read_only"))
              obj.is_value_read_only = _ApiClient.ApiClient.convertToType(data["is_value_read_only"], "Boolean");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("people_value"))
              obj.people_value = _ApiClient.ApiClient.convertToType(data["people_value"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
          }
          return obj;
        }
      }]);
      return CustomFieldSettingResponseCustomField2;
    }();
    exports.CustomFieldSettingResponseCustomField = CustomFieldSettingResponseCustomField;
    CustomFieldSettingResponseCustomField.prototype.gid = void 0;
    CustomFieldSettingResponseCustomField.prototype.resource_type = void 0;
    CustomFieldSettingResponseCustomField.prototype.name = void 0;
    CustomFieldSettingResponseCustomField.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldSettingResponseCustomField.prototype.resource_subtype = void 0;
    CustomFieldSettingResponseCustomField.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    CustomFieldSettingResponseCustomField.prototype.type = void 0;
    CustomFieldSettingResponseCustomField.prototype.enum_options = void 0;
    CustomFieldSettingResponseCustomField.prototype.enabled = void 0;
    CustomFieldSettingResponseCustomField.prototype.is_formula_field = void 0;
    CustomFieldSettingResponseCustomField.prototype.date_value = void 0;
    CustomFieldSettingResponseCustomField.prototype.enum_value = void 0;
    CustomFieldSettingResponseCustomField.prototype.multi_enum_values = void 0;
    CustomFieldSettingResponseCustomField.prototype.number_value = void 0;
    CustomFieldSettingResponseCustomField.prototype.text_value = void 0;
    CustomFieldSettingResponseCustomField.prototype.display_value = void 0;
    CustomFieldSettingResponseCustomField.prototype.description = void 0;
    CustomFieldSettingResponseCustomField.prototype.precision = void 0;
    CustomFieldSettingResponseCustomField.FormatEnum = {
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "identifier"
       * @const
       */
      identifier: "identifier",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage",
      /**
       * value: "custom"
       * @const
       */
      custom: "custom",
      /**
       * value: "duration"
       * @const
       */
      duration: "duration",
      /**
       * value: "none"
       * @const
       */
      none: "none"
    };
    CustomFieldSettingResponseCustomField.prototype.format = void 0;
    CustomFieldSettingResponseCustomField.prototype.currency_code = void 0;
    CustomFieldSettingResponseCustomField.prototype.custom_label = void 0;
    CustomFieldSettingResponseCustomField.CustomLabelPositionEnum = {
      /**
       * value: "prefix"
       * @const
       */
      prefix: "prefix",
      /**
       * value: "suffix"
       * @const
       */
      suffix: "suffix",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldSettingResponseCustomField.prototype.custom_label_position = void 0;
    CustomFieldSettingResponseCustomField.prototype.is_global_to_workspace = void 0;
    CustomFieldSettingResponseCustomField.prototype.has_notifications_enabled = void 0;
    CustomFieldSettingResponseCustomField.AsanaCreatedFieldEnum = {
      /**
       * value: "a_v_requirements"
       * @const
       */
      a_v_requirements: "a_v_requirements",
      /**
       * value: "account_name"
       * @const
       */
      account_name: "account_name",
      /**
       * value: "actionable"
       * @const
       */
      actionable: "actionable",
      /**
       * value: "align_shipping_link"
       * @const
       */
      align_shipping_link: "align_shipping_link",
      /**
       * value: "align_status"
       * @const
       */
      align_status: "align_status",
      /**
       * value: "allotted_time"
       * @const
       */
      allotted_time: "allotted_time",
      /**
       * value: "appointment"
       * @const
       */
      appointment: "appointment",
      /**
       * value: "approval_stage"
       * @const
       */
      approval_stage: "approval_stage",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "article_series"
       * @const
       */
      article_series: "article_series",
      /**
       * value: "board_committee"
       * @const
       */
      board_committee: "board_committee",
      /**
       * value: "browser"
       * @const
       */
      browser: "browser",
      /**
       * value: "campaign_audience"
       * @const
       */
      campaign_audience: "campaign_audience",
      /**
       * value: "campaign_project_status"
       * @const
       */
      campaign_project_status: "campaign_project_status",
      /**
       * value: "campaign_regions"
       * @const
       */
      campaign_regions: "campaign_regions",
      /**
       * value: "channel_primary"
       * @const
       */
      channel_primary: "channel_primary",
      /**
       * value: "client_topic_type"
       * @const
       */
      client_topic_type: "client_topic_type",
      /**
       * value: "complete_by"
       * @const
       */
      complete_by: "complete_by",
      /**
       * value: "contact"
       * @const
       */
      contact: "contact",
      /**
       * value: "contact_email_address"
       * @const
       */
      contact_email_address: "contact_email_address",
      /**
       * value: "content_channels"
       * @const
       */
      content_channels: "content_channels",
      /**
       * value: "content_channels_needed"
       * @const
       */
      content_channels_needed: "content_channels_needed",
      /**
       * value: "content_stage"
       * @const
       */
      content_stage: "content_stage",
      /**
       * value: "content_type"
       * @const
       */
      content_type: "content_type",
      /**
       * value: "contract"
       * @const
       */
      contract: "contract",
      /**
       * value: "contract_status"
       * @const
       */
      contract_status: "contract_status",
      /**
       * value: "cost"
       * @const
       */
      cost: "cost",
      /**
       * value: "creation_stage"
       * @const
       */
      creation_stage: "creation_stage",
      /**
       * value: "creative_channel"
       * @const
       */
      creative_channel: "creative_channel",
      /**
       * value: "creative_needed"
       * @const
       */
      creative_needed: "creative_needed",
      /**
       * value: "creative_needs"
       * @const
       */
      creative_needs: "creative_needs",
      /**
       * value: "data_sensitivity"
       * @const
       */
      data_sensitivity: "data_sensitivity",
      /**
       * value: "deal_size"
       * @const
       */
      deal_size: "deal_size",
      /**
       * value: "delivery_appt"
       * @const
       */
      delivery_appt: "delivery_appt",
      /**
       * value: "delivery_appt_date"
       * @const
       */
      delivery_appt_date: "delivery_appt_date",
      /**
       * value: "department"
       * @const
       */
      department: "department",
      /**
       * value: "department_responsible"
       * @const
       */
      department_responsible: "department_responsible",
      /**
       * value: "design_request_needed"
       * @const
       */
      design_request_needed: "design_request_needed",
      /**
       * value: "design_request_type"
       * @const
       */
      design_request_type: "design_request_type",
      /**
       * value: "discussion_category"
       * @const
       */
      discussion_category: "discussion_category",
      /**
       * value: "do_this_task"
       * @const
       */
      do_this_task: "do_this_task",
      /**
       * value: "editorial_content_status"
       * @const
       */
      editorial_content_status: "editorial_content_status",
      /**
       * value: "editorial_content_tag"
       * @const
       */
      editorial_content_tag: "editorial_content_tag",
      /**
       * value: "editorial_content_type"
       * @const
       */
      editorial_content_type: "editorial_content_type",
      /**
       * value: "effort"
       * @const
       */
      effort: "effort",
      /**
       * value: "effort_level"
       * @const
       */
      effort_level: "effort_level",
      /**
       * value: "est_completion_date"
       * @const
       */
      est_completion_date: "est_completion_date",
      /**
       * value: "estimated_time"
       * @const
       */
      estimated_time: "estimated_time",
      /**
       * value: "estimated_value"
       * @const
       */
      estimated_value: "estimated_value",
      /**
       * value: "expected_cost"
       * @const
       */
      expected_cost: "expected_cost",
      /**
       * value: "external_steps_needed"
       * @const
       */
      external_steps_needed: "external_steps_needed",
      /**
       * value: "favorite_idea"
       * @const
       */
      favorite_idea: "favorite_idea",
      /**
       * value: "feedback_type"
       * @const
       */
      feedback_type: "feedback_type",
      /**
       * value: "financial"
       * @const
       */
      financial: "financial",
      /**
       * value: "funding_amount"
       * @const
       */
      funding_amount: "funding_amount",
      /**
       * value: "grant_application_process"
       * @const
       */
      grant_application_process: "grant_application_process",
      /**
       * value: "hiring_candidate_status"
       * @const
       */
      hiring_candidate_status: "hiring_candidate_status",
      /**
       * value: "idea_status"
       * @const
       */
      idea_status: "idea_status",
      /**
       * value: "ids_link"
       * @const
       */
      ids_link: "ids_link",
      /**
       * value: "ids_patient_link"
       * @const
       */
      ids_patient_link: "ids_patient_link",
      /**
       * value: "implementation_stage"
       * @const
       */
      implementation_stage: "implementation_stage",
      /**
       * value: "insurance"
       * @const
       */
      insurance: "insurance",
      /**
       * value: "interview_area"
       * @const
       */
      interview_area: "interview_area",
      /**
       * value: "interview_question_score"
       * @const
       */
      interview_question_score: "interview_question_score",
      /**
       * value: "itero_scan_link"
       * @const
       */
      itero_scan_link: "itero_scan_link",
      /**
       * value: "job_s_applied_to"
       * @const
       */
      job_s_applied_to: "job_s_applied_to",
      /**
       * value: "lab"
       * @const
       */
      lab: "lab",
      /**
       * value: "launch_status"
       * @const
       */
      launch_status: "launch_status",
      /**
       * value: "lead_status"
       * @const
       */
      lead_status: "lead_status",
      /**
       * value: "localization_language"
       * @const
       */
      localization_language: "localization_language",
      /**
       * value: "localization_market_team"
       * @const
       */
      localization_market_team: "localization_market_team",
      /**
       * value: "localization_status"
       * @const
       */
      localization_status: "localization_status",
      /**
       * value: "meeting_minutes"
       * @const
       */
      meeting_minutes: "meeting_minutes",
      /**
       * value: "meeting_needed"
       * @const
       */
      meeting_needed: "meeting_needed",
      /**
       * value: "minutes"
       * @const
       */
      minutes: "minutes",
      /**
       * value: "mrr"
       * @const
       */
      mrr: "mrr",
      /**
       * value: "must_localize"
       * @const
       */
      must_localize: "must_localize",
      /**
       * value: "name_of_foundation"
       * @const
       */
      name_of_foundation: "name_of_foundation",
      /**
       * value: "need_to_follow_up"
       * @const
       */
      need_to_follow_up: "need_to_follow_up",
      /**
       * value: "next_appointment"
       * @const
       */
      next_appointment: "next_appointment",
      /**
       * value: "next_steps_sales"
       * @const
       */
      next_steps_sales: "next_steps_sales",
      /**
       * value: "num_people"
       * @const
       */
      num_people: "num_people",
      /**
       * value: "number_of_user_reports"
       * @const
       */
      number_of_user_reports: "number_of_user_reports",
      /**
       * value: "office_location"
       * @const
       */
      office_location: "office_location",
      /**
       * value: "onboarding_activity"
       * @const
       */
      onboarding_activity: "onboarding_activity",
      /**
       * value: "owner"
       * @const
       */
      owner: "owner",
      /**
       * value: "participants_needed"
       * @const
       */
      participants_needed: "participants_needed",
      /**
       * value: "patient_date_of_birth"
       * @const
       */
      patient_date_of_birth: "patient_date_of_birth",
      /**
       * value: "patient_email"
       * @const
       */
      patient_email: "patient_email",
      /**
       * value: "patient_phone"
       * @const
       */
      patient_phone: "patient_phone",
      /**
       * value: "patient_status"
       * @const
       */
      patient_status: "patient_status",
      /**
       * value: "phone_number"
       * @const
       */
      phone_number: "phone_number",
      /**
       * value: "planning_category"
       * @const
       */
      planning_category: "planning_category",
      /**
       * value: "point_of_contact"
       * @const
       */
      point_of_contact: "point_of_contact",
      /**
       * value: "position"
       * @const
       */
      position: "position",
      /**
       * value: "post_format"
       * @const
       */
      post_format: "post_format",
      /**
       * value: "prescription"
       * @const
       */
      prescription: "prescription",
      /**
       * value: "priority"
       * @const
       */
      priority: "priority",
      /**
       * value: "priority_level"
       * @const
       */
      priority_level: "priority_level",
      /**
       * value: "product"
       * @const
       */
      product: "product",
      /**
       * value: "product_stage"
       * @const
       */
      product_stage: "product_stage",
      /**
       * value: "progress"
       * @const
       */
      progress: "progress",
      /**
       * value: "project_size"
       * @const
       */
      project_size: "project_size",
      /**
       * value: "project_status"
       * @const
       */
      project_status: "project_status",
      /**
       * value: "proposed_budget"
       * @const
       */
      proposed_budget: "proposed_budget",
      /**
       * value: "publish_status"
       * @const
       */
      publish_status: "publish_status",
      /**
       * value: "reason_for_scan"
       * @const
       */
      reason_for_scan: "reason_for_scan",
      /**
       * value: "referral"
       * @const
       */
      referral: "referral",
      /**
       * value: "request_type"
       * @const
       */
      request_type: "request_type",
      /**
       * value: "research_status"
       * @const
       */
      research_status: "research_status",
      /**
       * value: "responsible_department"
       * @const
       */
      responsible_department: "responsible_department",
      /**
       * value: "responsible_team"
       * @const
       */
      responsible_team: "responsible_team",
      /**
       * value: "risk_assessment_status"
       * @const
       */
      risk_assessment_status: "risk_assessment_status",
      /**
       * value: "room_name"
       * @const
       */
      room_name: "room_name",
      /**
       * value: "sales_counterpart"
       * @const
       */
      sales_counterpart: "sales_counterpart",
      /**
       * value: "sentiment"
       * @const
       */
      sentiment: "sentiment",
      /**
       * value: "shipping_link"
       * @const
       */
      shipping_link: "shipping_link",
      /**
       * value: "social_channels"
       * @const
       */
      social_channels: "social_channels",
      /**
       * value: "stage"
       * @const
       */
      stage: "stage",
      /**
       * value: "status"
       * @const
       */
      status: "status",
      /**
       * value: "status_design"
       * @const
       */
      status_design: "status_design",
      /**
       * value: "status_of_initiative"
       * @const
       */
      status_of_initiative: "status_of_initiative",
      /**
       * value: "system_setup"
       * @const
       */
      system_setup: "system_setup",
      /**
       * value: "task_progress"
       * @const
       */
      task_progress: "task_progress",
      /**
       * value: "team"
       * @const
       */
      team: "team",
      /**
       * value: "team_marketing"
       * @const
       */
      team_marketing: "team_marketing",
      /**
       * value: "team_responsible"
       * @const
       */
      team_responsible: "team_responsible",
      /**
       * value: "time_it_takes_to_complete_tasks"
       * @const
       */
      time_it_takes_to_complete_tasks: "time_it_takes_to_complete_tasks",
      /**
       * value: "timeframe"
       * @const
       */
      timeframe: "timeframe",
      /**
       * value: "treatment_type"
       * @const
       */
      treatment_type: "treatment_type",
      /**
       * value: "type_work_requests_it"
       * @const
       */
      type_work_requests_it: "type_work_requests_it",
      /**
       * value: "use_agency"
       * @const
       */
      use_agency: "use_agency",
      /**
       * value: "user_name"
       * @const
       */
      user_name: "user_name",
      /**
       * value: "vendor_category"
       * @const
       */
      vendor_category: "vendor_category",
      /**
       * value: "vendor_type"
       * @const
       */
      vendor_type: "vendor_type",
      /**
       * value: "word_count"
       * @const
       */
      word_count: "word_count",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    CustomFieldSettingResponseCustomField.prototype.asana_created_field = void 0;
    CustomFieldSettingResponseCustomField.prototype.is_value_read_only = void 0;
    CustomFieldSettingResponseCustomField.prototype.created_by = void 0;
    CustomFieldSettingResponseCustomField.prototype.people_value = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingResponseParent.js
var require_CustomFieldSettingResponseParent = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingResponseParent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingResponseParent = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingResponseParent = /* @__PURE__ */ function() {
      function CustomFieldSettingResponseParent2() {
        _classCallCheck(this, CustomFieldSettingResponseParent2);
      }
      _createClass(CustomFieldSettingResponseParent2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingResponseParent2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldSettingResponseParent2;
    }();
    exports.CustomFieldSettingResponseParent = CustomFieldSettingResponseParent;
    CustomFieldSettingResponseParent.prototype.gid = void 0;
    CustomFieldSettingResponseParent.prototype.resource_type = void 0;
    CustomFieldSettingResponseParent.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingResponseProject.js
var require_CustomFieldSettingResponseProject = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingResponseProject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingResponseProject = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingResponseProject = /* @__PURE__ */ function() {
      function CustomFieldSettingResponseProject2() {
        _classCallCheck(this, CustomFieldSettingResponseProject2);
      }
      _createClass(CustomFieldSettingResponseProject2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingResponseProject2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return CustomFieldSettingResponseProject2;
    }();
    exports.CustomFieldSettingResponseProject = CustomFieldSettingResponseProject;
    CustomFieldSettingResponseProject.prototype.gid = void 0;
    CustomFieldSettingResponseProject.prototype.resource_type = void 0;
    CustomFieldSettingResponseProject.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingResponse.js
var require_CustomFieldSettingResponse = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldSettingResponseCustomField = require_CustomFieldSettingResponseCustomField();
    var _CustomFieldSettingResponseParent = require_CustomFieldSettingResponseParent();
    var _CustomFieldSettingResponseProject = require_CustomFieldSettingResponseProject();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingResponse = /* @__PURE__ */ function() {
      function CustomFieldSettingResponse2() {
        _classCallCheck(this, CustomFieldSettingResponse2);
      }
      _createClass(CustomFieldSettingResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("project"))
              obj.project = _CustomFieldSettingResponseProject.CustomFieldSettingResponseProject.constructFromObject(data["project"]);
            if (data.hasOwnProperty("is_important"))
              obj.is_important = _ApiClient.ApiClient.convertToType(data["is_important"], "Boolean");
            if (data.hasOwnProperty("parent"))
              obj.parent = _CustomFieldSettingResponseParent.CustomFieldSettingResponseParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("custom_field"))
              obj.custom_field = _CustomFieldSettingResponseCustomField.CustomFieldSettingResponseCustomField.constructFromObject(data["custom_field"]);
          }
          return obj;
        }
      }]);
      return CustomFieldSettingResponse2;
    }();
    exports.CustomFieldSettingResponse = CustomFieldSettingResponse;
    CustomFieldSettingResponse.prototype.gid = void 0;
    CustomFieldSettingResponse.prototype.resource_type = void 0;
    CustomFieldSettingResponse.prototype.project = void 0;
    CustomFieldSettingResponse.prototype.is_important = void 0;
    CustomFieldSettingResponse.prototype.parent = void 0;
    CustomFieldSettingResponse.prototype.custom_field = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingResponseArray.js
var require_CustomFieldSettingResponseArray = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldSettingResponse = require_CustomFieldSettingResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingResponseArray = /* @__PURE__ */ function() {
      function CustomFieldSettingResponseArray2(data) {
        _classCallCheck(this, CustomFieldSettingResponseArray2);
        this.data = data;
      }
      _createClass(CustomFieldSettingResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_CustomFieldSettingResponse.CustomFieldSettingResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return CustomFieldSettingResponseArray2;
    }();
    exports.CustomFieldSettingResponseArray = CustomFieldSettingResponseArray;
    CustomFieldSettingResponseArray.prototype.data = void 0;
    CustomFieldSettingResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldSettingResponseData.js
var require_CustomFieldSettingResponseData = __commonJS({
  "node_modules/asana/dist/model/CustomFieldSettingResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldSettingResponse = require_CustomFieldSettingResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingResponseData = /* @__PURE__ */ function() {
      function CustomFieldSettingResponseData2(data) {
        _classCallCheck(this, CustomFieldSettingResponseData2);
        this.data = data;
      }
      _createClass(CustomFieldSettingResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldSettingResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _CustomFieldSettingResponse.CustomFieldSettingResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return CustomFieldSettingResponseData2;
    }();
    exports.CustomFieldSettingResponseData = CustomFieldSettingResponseData;
    CustomFieldSettingResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldsBody.js
var require_CustomFieldsBody = __commonJS({
  "node_modules/asana/dist/model/CustomFieldsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldRequest = require_CustomFieldRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldsBody = /* @__PURE__ */ function() {
      function CustomFieldsBody2() {
        _classCallCheck(this, CustomFieldsBody2);
      }
      _createClass(CustomFieldsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _CustomFieldRequest.CustomFieldRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return CustomFieldsBody2;
    }();
    exports.CustomFieldsBody = CustomFieldsBody;
    CustomFieldsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/CustomFieldsCustomFieldGidBody.js
var require_CustomFieldsCustomFieldGidBody = __commonJS({
  "node_modules/asana/dist/model/CustomFieldsCustomFieldGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldsCustomFieldGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldRequest = require_CustomFieldRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldsCustomFieldGidBody = /* @__PURE__ */ function() {
      function CustomFieldsCustomFieldGidBody2() {
        _classCallCheck(this, CustomFieldsCustomFieldGidBody2);
      }
      _createClass(CustomFieldsCustomFieldGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CustomFieldsCustomFieldGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _CustomFieldRequest.CustomFieldRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return CustomFieldsCustomFieldGidBody2;
    }();
    exports.CustomFieldsCustomFieldGidBody = CustomFieldsCustomFieldGidBody;
    CustomFieldsCustomFieldGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/DateVariableCompact.js
var require_DateVariableCompact = __commonJS({
  "node_modules/asana/dist/model/DateVariableCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DateVariableCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var DateVariableCompact = /* @__PURE__ */ function() {
      function DateVariableCompact2() {
        _classCallCheck(this, DateVariableCompact2);
      }
      _createClass(DateVariableCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new DateVariableCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
          }
          return obj;
        }
      }]);
      return DateVariableCompact2;
    }();
    exports.DateVariableCompact = DateVariableCompact;
    DateVariableCompact.prototype.gid = void 0;
    DateVariableCompact.prototype.name = void 0;
    DateVariableCompact.prototype.description = void 0;
  }
});

// node_modules/asana/dist/model/DateVariableRequest.js
var require_DateVariableRequest = __commonJS({
  "node_modules/asana/dist/model/DateVariableRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DateVariableRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var DateVariableRequest = /* @__PURE__ */ function() {
      function DateVariableRequest2() {
        _classCallCheck(this, DateVariableRequest2);
      }
      _createClass(DateVariableRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new DateVariableRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("value"))
              obj.value = _ApiClient.ApiClient.convertToType(data["value"], "Date");
          }
          return obj;
        }
      }]);
      return DateVariableRequest2;
    }();
    exports.DateVariableRequest = DateVariableRequest;
    DateVariableRequest.prototype.gid = void 0;
    DateVariableRequest.prototype.value = void 0;
  }
});

// node_modules/asana/dist/model/EmptyResponse.js
var require_EmptyResponse = __commonJS({
  "node_modules/asana/dist/model/EmptyResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EmptyResponse = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EmptyResponse = /* @__PURE__ */ function() {
      function EmptyResponse2() {
        _classCallCheck(this, EmptyResponse2);
      }
      _createClass(EmptyResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EmptyResponse2();
          }
          return obj;
        }
      }]);
      return EmptyResponse2;
    }();
    exports.EmptyResponse = EmptyResponse;
  }
});

// node_modules/asana/dist/model/EmptyResponseData.js
var require_EmptyResponseData = __commonJS({
  "node_modules/asana/dist/model/EmptyResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EmptyResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponse = require_EmptyResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EmptyResponseData = /* @__PURE__ */ function() {
      function EmptyResponseData2(data) {
        _classCallCheck(this, EmptyResponseData2);
        this.data = data;
      }
      _createClass(EmptyResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EmptyResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _EmptyResponse.EmptyResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return EmptyResponseData2;
    }();
    exports.EmptyResponseData = EmptyResponseData;
    EmptyResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/EnumOption.js
var require_EnumOption = __commonJS({
  "node_modules/asana/dist/model/EnumOption.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumOption = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EnumOption = /* @__PURE__ */ function() {
      function EnumOption2() {
        _classCallCheck(this, EnumOption2);
      }
      _createClass(EnumOption2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EnumOption2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return EnumOption2;
    }();
    exports.EnumOption = EnumOption;
    EnumOption.prototype.gid = void 0;
    EnumOption.prototype.resource_type = void 0;
    EnumOption.prototype.name = void 0;
    EnumOption.prototype.enabled = void 0;
    EnumOption.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/EnumOptionBase.js
var require_EnumOptionBase = __commonJS({
  "node_modules/asana/dist/model/EnumOptionBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumOptionBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EnumOptionBase = /* @__PURE__ */ function() {
      function EnumOptionBase2() {
        _classCallCheck(this, EnumOptionBase2);
      }
      _createClass(EnumOptionBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EnumOptionBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return EnumOptionBase2;
    }();
    exports.EnumOptionBase = EnumOptionBase;
    EnumOptionBase.prototype.gid = void 0;
    EnumOptionBase.prototype.resource_type = void 0;
    EnumOptionBase.prototype.name = void 0;
    EnumOptionBase.prototype.enabled = void 0;
    EnumOptionBase.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/EnumOptionData.js
var require_EnumOptionData = __commonJS({
  "node_modules/asana/dist/model/EnumOptionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumOptionData = void 0;
    var _ApiClient = require_ApiClient();
    var _EnumOption = require_EnumOption();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EnumOptionData = /* @__PURE__ */ function() {
      function EnumOptionData2(data) {
        _classCallCheck(this, EnumOptionData2);
        this.data = data;
      }
      _createClass(EnumOptionData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EnumOptionData2();
            if (data.hasOwnProperty("data"))
              obj.data = _EnumOption.EnumOption.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return EnumOptionData2;
    }();
    exports.EnumOptionData = EnumOptionData;
    EnumOptionData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/EnumOptionInsertRequest.js
var require_EnumOptionInsertRequest = __commonJS({
  "node_modules/asana/dist/model/EnumOptionInsertRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumOptionInsertRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EnumOptionInsertRequest = /* @__PURE__ */ function() {
      function EnumOptionInsertRequest2(enum_option) {
        _classCallCheck(this, EnumOptionInsertRequest2);
        this.enum_option = enum_option;
      }
      _createClass(EnumOptionInsertRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EnumOptionInsertRequest2();
            if (data.hasOwnProperty("enum_option"))
              obj.enum_option = _ApiClient.ApiClient.convertToType(data["enum_option"], "String");
            if (data.hasOwnProperty("before_enum_option"))
              obj.before_enum_option = _ApiClient.ApiClient.convertToType(data["before_enum_option"], "String");
            if (data.hasOwnProperty("after_enum_option"))
              obj.after_enum_option = _ApiClient.ApiClient.convertToType(data["after_enum_option"], "String");
          }
          return obj;
        }
      }]);
      return EnumOptionInsertRequest2;
    }();
    exports.EnumOptionInsertRequest = EnumOptionInsertRequest;
    EnumOptionInsertRequest.prototype.enum_option = void 0;
    EnumOptionInsertRequest.prototype.before_enum_option = void 0;
    EnumOptionInsertRequest.prototype.after_enum_option = void 0;
  }
});

// node_modules/asana/dist/model/EnumOptionsEnumOptionGidBody.js
var require_EnumOptionsEnumOptionGidBody = __commonJS({
  "node_modules/asana/dist/model/EnumOptionsEnumOptionGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumOptionsEnumOptionGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _EnumOptionBase = require_EnumOptionBase();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EnumOptionsEnumOptionGidBody = /* @__PURE__ */ function() {
      function EnumOptionsEnumOptionGidBody2() {
        _classCallCheck(this, EnumOptionsEnumOptionGidBody2);
      }
      _createClass(EnumOptionsEnumOptionGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EnumOptionsEnumOptionGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _EnumOptionBase.EnumOptionBase.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return EnumOptionsEnumOptionGidBody2;
    }();
    exports.EnumOptionsEnumOptionGidBody = EnumOptionsEnumOptionGidBody;
    EnumOptionsEnumOptionGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/EnumOptionsInsertBody.js
var require_EnumOptionsInsertBody = __commonJS({
  "node_modules/asana/dist/model/EnumOptionsInsertBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EnumOptionsInsertBody = void 0;
    var _ApiClient = require_ApiClient();
    var _EnumOptionInsertRequest = require_EnumOptionInsertRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EnumOptionsInsertBody = /* @__PURE__ */ function() {
      function EnumOptionsInsertBody2() {
        _classCallCheck(this, EnumOptionsInsertBody2);
      }
      _createClass(EnumOptionsInsertBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EnumOptionsInsertBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _EnumOptionInsertRequest.EnumOptionInsertRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return EnumOptionsInsertBody2;
    }();
    exports.EnumOptionsInsertBody = EnumOptionsInsertBody;
    EnumOptionsInsertBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/Error.js
var require_Error = __commonJS({
  "node_modules/asana/dist/model/Error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Error = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var Error2 = /* @__PURE__ */ function() {
      function Error3() {
        _classCallCheck(this, Error3);
      }
      _createClass(Error3, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Error3();
            if (data.hasOwnProperty("message"))
              obj.message = _ApiClient.ApiClient.convertToType(data["message"], "String");
            if (data.hasOwnProperty("help"))
              obj.help = _ApiClient.ApiClient.convertToType(data["help"], "String");
            if (data.hasOwnProperty("phrase"))
              obj.phrase = _ApiClient.ApiClient.convertToType(data["phrase"], "String");
          }
          return obj;
        }
      }]);
      return Error3;
    }();
    exports.Error = Error2;
    Error2.prototype.message = void 0;
    Error2.prototype.help = void 0;
    Error2.prototype.phrase = void 0;
  }
});

// node_modules/asana/dist/model/ErrorResponseErrors.js
var require_ErrorResponseErrors = __commonJS({
  "node_modules/asana/dist/model/ErrorResponseErrors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ErrorResponseErrors = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ErrorResponseErrors = /* @__PURE__ */ function() {
      function ErrorResponseErrors2() {
        _classCallCheck(this, ErrorResponseErrors2);
      }
      _createClass(ErrorResponseErrors2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ErrorResponseErrors2();
            if (data.hasOwnProperty("message"))
              obj.message = _ApiClient.ApiClient.convertToType(data["message"], "String");
            if (data.hasOwnProperty("help"))
              obj.help = _ApiClient.ApiClient.convertToType(data["help"], "String");
            if (data.hasOwnProperty("phrase"))
              obj.phrase = _ApiClient.ApiClient.convertToType(data["phrase"], "String");
          }
          return obj;
        }
      }]);
      return ErrorResponseErrors2;
    }();
    exports.ErrorResponseErrors = ErrorResponseErrors;
    ErrorResponseErrors.prototype.message = void 0;
    ErrorResponseErrors.prototype.help = void 0;
    ErrorResponseErrors.prototype.phrase = void 0;
  }
});

// node_modules/asana/dist/model/ErrorResponse.js
var require_ErrorResponse = __commonJS({
  "node_modules/asana/dist/model/ErrorResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ErrorResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponseErrors = require_ErrorResponseErrors();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ErrorResponse = /* @__PURE__ */ function() {
      function ErrorResponse2() {
        _classCallCheck(this, ErrorResponse2);
      }
      _createClass(ErrorResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ErrorResponse2();
            if (data.hasOwnProperty("errors"))
              obj.errors = _ApiClient.ApiClient.convertToType(data["errors"], [_ErrorResponseErrors.ErrorResponseErrors]);
          }
          return obj;
        }
      }]);
      return ErrorResponse2;
    }();
    exports.ErrorResponse = ErrorResponse;
    ErrorResponse.prototype.errors = void 0;
  }
});

// node_modules/asana/dist/model/EventResponseChange.js
var require_EventResponseChange = __commonJS({
  "node_modules/asana/dist/model/EventResponseChange.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventResponseChange = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EventResponseChange = /* @__PURE__ */ function() {
      function EventResponseChange2() {
        _classCallCheck(this, EventResponseChange2);
      }
      _createClass(EventResponseChange2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EventResponseChange2();
            if (data.hasOwnProperty("field"))
              obj.field = _ApiClient.ApiClient.convertToType(data["field"], "String");
            if (data.hasOwnProperty("action"))
              obj.action = _ApiClient.ApiClient.convertToType(data["action"], "String");
            if (data.hasOwnProperty("new_value"))
              obj.new_value = _ApiClient.ApiClient.convertToType(data["new_value"], Object);
            if (data.hasOwnProperty("added_value"))
              obj.added_value = _ApiClient.ApiClient.convertToType(data["added_value"], Object);
            if (data.hasOwnProperty("removed_value"))
              obj.removed_value = _ApiClient.ApiClient.convertToType(data["removed_value"], Object);
          }
          return obj;
        }
      }]);
      return EventResponseChange2;
    }();
    exports.EventResponseChange = EventResponseChange;
    EventResponseChange.prototype.field = void 0;
    EventResponseChange.prototype.action = void 0;
    EventResponseChange.prototype.new_value = void 0;
    EventResponseChange.prototype.added_value = void 0;
    EventResponseChange.prototype.removed_value = void 0;
  }
});

// node_modules/asana/dist/model/EventResponseParent.js
var require_EventResponseParent = __commonJS({
  "node_modules/asana/dist/model/EventResponseParent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventResponseParent = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EventResponseParent = /* @__PURE__ */ function() {
      function EventResponseParent2() {
        _classCallCheck(this, EventResponseParent2);
      }
      _createClass(EventResponseParent2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EventResponseParent2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return EventResponseParent2;
    }();
    exports.EventResponseParent = EventResponseParent;
    EventResponseParent.prototype.gid = void 0;
    EventResponseParent.prototype.resource_type = void 0;
    EventResponseParent.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/EventResponseResource.js
var require_EventResponseResource = __commonJS({
  "node_modules/asana/dist/model/EventResponseResource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventResponseResource = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EventResponseResource = /* @__PURE__ */ function() {
      function EventResponseResource2() {
        _classCallCheck(this, EventResponseResource2);
      }
      _createClass(EventResponseResource2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EventResponseResource2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return EventResponseResource2;
    }();
    exports.EventResponseResource = EventResponseResource;
    EventResponseResource.prototype.gid = void 0;
    EventResponseResource.prototype.resource_type = void 0;
    EventResponseResource.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/EventResponseUser.js
var require_EventResponseUser = __commonJS({
  "node_modules/asana/dist/model/EventResponseUser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventResponseUser = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EventResponseUser = /* @__PURE__ */ function() {
      function EventResponseUser2() {
        _classCallCheck(this, EventResponseUser2);
      }
      _createClass(EventResponseUser2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EventResponseUser2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return EventResponseUser2;
    }();
    exports.EventResponseUser = EventResponseUser;
    EventResponseUser.prototype.gid = void 0;
    EventResponseUser.prototype.resource_type = void 0;
    EventResponseUser.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/EventResponse.js
var require_EventResponse = __commonJS({
  "node_modules/asana/dist/model/EventResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _EventResponseChange = require_EventResponseChange();
    var _EventResponseParent = require_EventResponseParent();
    var _EventResponseResource = require_EventResponseResource();
    var _EventResponseUser = require_EventResponseUser();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EventResponse = /* @__PURE__ */ function() {
      function EventResponse2() {
        _classCallCheck(this, EventResponse2);
      }
      _createClass(EventResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EventResponse2();
            if (data.hasOwnProperty("user"))
              obj.user = _EventResponseUser.EventResponseUser.constructFromObject(data["user"]);
            if (data.hasOwnProperty("resource"))
              obj.resource = _EventResponseResource.EventResponseResource.constructFromObject(data["resource"]);
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("action"))
              obj.action = _ApiClient.ApiClient.convertToType(data["action"], "String");
            if (data.hasOwnProperty("parent"))
              obj.parent = _EventResponseParent.EventResponseParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("change"))
              obj.change = _EventResponseChange.EventResponseChange.constructFromObject(data["change"]);
          }
          return obj;
        }
      }]);
      return EventResponse2;
    }();
    exports.EventResponse = EventResponse;
    EventResponse.prototype.user = void 0;
    EventResponse.prototype.resource = void 0;
    EventResponse.prototype.type = void 0;
    EventResponse.prototype.action = void 0;
    EventResponse.prototype.parent = void 0;
    EventResponse.prototype.created_at = void 0;
    EventResponse.prototype.change = void 0;
  }
});

// node_modules/asana/dist/model/EventResponseArray.js
var require_EventResponseArray = __commonJS({
  "node_modules/asana/dist/model/EventResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _EventResponse = require_EventResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EventResponseArray = /* @__PURE__ */ function() {
      function EventResponseArray2(data) {
        _classCallCheck(this, EventResponseArray2);
        this.data = data;
      }
      _createClass(EventResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EventResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_EventResponse.EventResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return EventResponseArray2;
    }();
    exports.EventResponseArray = EventResponseArray;
    EventResponseArray.prototype.data = void 0;
    EventResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/GoalAddSubgoalRequest.js
var require_GoalAddSubgoalRequest = __commonJS({
  "node_modules/asana/dist/model/GoalAddSubgoalRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalAddSubgoalRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalAddSubgoalRequest = /* @__PURE__ */ function() {
      function GoalAddSubgoalRequest2(subgoal) {
        _classCallCheck(this, GoalAddSubgoalRequest2);
        this.subgoal = subgoal;
      }
      _createClass(GoalAddSubgoalRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalAddSubgoalRequest2();
            if (data.hasOwnProperty("subgoal"))
              obj.subgoal = _ApiClient.ApiClient.convertToType(data["subgoal"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
          }
          return obj;
        }
      }]);
      return GoalAddSubgoalRequest2;
    }();
    exports.GoalAddSubgoalRequest = GoalAddSubgoalRequest;
    GoalAddSubgoalRequest.prototype.subgoal = void 0;
    GoalAddSubgoalRequest.prototype.insert_before = void 0;
    GoalAddSubgoalRequest.prototype.insert_after = void 0;
  }
});

// node_modules/asana/dist/model/GoalAddSupportingRelationshipRequest.js
var require_GoalAddSupportingRelationshipRequest = __commonJS({
  "node_modules/asana/dist/model/GoalAddSupportingRelationshipRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalAddSupportingRelationshipRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalAddSupportingRelationshipRequest = /* @__PURE__ */ function() {
      function GoalAddSupportingRelationshipRequest2(supporting_resource) {
        _classCallCheck(this, GoalAddSupportingRelationshipRequest2);
        this.supporting_resource = supporting_resource;
      }
      _createClass(GoalAddSupportingRelationshipRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalAddSupportingRelationshipRequest2();
            if (data.hasOwnProperty("supporting_resource"))
              obj.supporting_resource = _ApiClient.ApiClient.convertToType(data["supporting_resource"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
            if (data.hasOwnProperty("contribution_weight"))
              obj.contribution_weight = _ApiClient.ApiClient.convertToType(data["contribution_weight"], "Number");
          }
          return obj;
        }
      }]);
      return GoalAddSupportingRelationshipRequest2;
    }();
    exports.GoalAddSupportingRelationshipRequest = GoalAddSupportingRelationshipRequest;
    GoalAddSupportingRelationshipRequest.prototype.supporting_resource = void 0;
    GoalAddSupportingRelationshipRequest.prototype.insert_before = void 0;
    GoalAddSupportingRelationshipRequest.prototype.insert_after = void 0;
    GoalAddSupportingRelationshipRequest.prototype.contribution_weight = void 0;
  }
});

// node_modules/asana/dist/model/GoalAddSupportingWorkRequest.js
var require_GoalAddSupportingWorkRequest = __commonJS({
  "node_modules/asana/dist/model/GoalAddSupportingWorkRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalAddSupportingWorkRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalAddSupportingWorkRequest = /* @__PURE__ */ function() {
      function GoalAddSupportingWorkRequest2(supporting_work) {
        _classCallCheck(this, GoalAddSupportingWorkRequest2);
        this.supporting_work = supporting_work;
      }
      _createClass(GoalAddSupportingWorkRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalAddSupportingWorkRequest2();
            if (data.hasOwnProperty("supporting_work"))
              obj.supporting_work = _ApiClient.ApiClient.convertToType(data["supporting_work"], "String");
          }
          return obj;
        }
      }]);
      return GoalAddSupportingWorkRequest2;
    }();
    exports.GoalAddSupportingWorkRequest = GoalAddSupportingWorkRequest;
    GoalAddSupportingWorkRequest.prototype.supporting_work = void 0;
  }
});

// node_modules/asana/dist/model/GoalBase.js
var require_GoalBase = __commonJS({
  "node_modules/asana/dist/model/GoalBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalBase = /* @__PURE__ */ function() {
      function GoalBase2() {
        _classCallCheck(this, GoalBase2);
      }
      _createClass(GoalBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("is_workspace_level"))
              obj.is_workspace_level = _ApiClient.ApiClient.convertToType(data["is_workspace_level"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
          }
          return obj;
        }
      }]);
      return GoalBase2;
    }();
    exports.GoalBase = GoalBase;
    GoalBase.prototype.gid = void 0;
    GoalBase.prototype.resource_type = void 0;
    GoalBase.prototype.name = void 0;
    GoalBase.prototype.html_notes = void 0;
    GoalBase.prototype.notes = void 0;
    GoalBase.prototype.due_on = void 0;
    GoalBase.prototype.start_on = void 0;
    GoalBase.prototype.is_workspace_level = void 0;
    GoalBase.prototype.liked = void 0;
  }
});

// node_modules/asana/dist/model/GoalCompact.js
var require_GoalCompact = __commonJS({
  "node_modules/asana/dist/model/GoalCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalCompact = /* @__PURE__ */ function() {
      function GoalCompact2() {
        _classCallCheck(this, GoalCompact2);
      }
      _createClass(GoalCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["owner"]);
          }
          return obj;
        }
      }]);
      return GoalCompact2;
    }();
    exports.GoalCompact = GoalCompact;
    GoalCompact.prototype.gid = void 0;
    GoalCompact.prototype.resource_type = void 0;
    GoalCompact.prototype.name = void 0;
    GoalCompact.prototype.owner = void 0;
  }
});

// node_modules/asana/dist/model/TaskAddFollowersRequest.js
var require_TaskAddFollowersRequest = __commonJS({
  "node_modules/asana/dist/model/TaskAddFollowersRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskAddFollowersRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskAddFollowersRequest = /* @__PURE__ */ function() {
      function TaskAddFollowersRequest2(followers) {
        _classCallCheck(this, TaskAddFollowersRequest2);
        this.followers = followers;
      }
      _createClass(TaskAddFollowersRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskAddFollowersRequest2();
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], ["String"]);
          }
          return obj;
        }
      }]);
      return TaskAddFollowersRequest2;
    }();
    exports.TaskAddFollowersRequest = TaskAddFollowersRequest;
    TaskAddFollowersRequest.prototype.followers = void 0;
  }
});

// node_modules/asana/dist/model/GoalGidAddFollowersBody.js
var require_GoalGidAddFollowersBody = __commonJS({
  "node_modules/asana/dist/model/GoalGidAddFollowersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalGidAddFollowersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskAddFollowersRequest = require_TaskAddFollowersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalGidAddFollowersBody = /* @__PURE__ */ function() {
      function GoalGidAddFollowersBody2() {
        _classCallCheck(this, GoalGidAddFollowersBody2);
      }
      _createClass(GoalGidAddFollowersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalGidAddFollowersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskAddFollowersRequest.TaskAddFollowersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalGidAddFollowersBody2;
    }();
    exports.GoalGidAddFollowersBody = GoalGidAddFollowersBody;
    GoalGidAddFollowersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalGidAddSupportingRelationshipBody.js
var require_GoalGidAddSupportingRelationshipBody = __commonJS({
  "node_modules/asana/dist/model/GoalGidAddSupportingRelationshipBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalGidAddSupportingRelationshipBody = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalAddSupportingRelationshipRequest = require_GoalAddSupportingRelationshipRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalGidAddSupportingRelationshipBody = /* @__PURE__ */ function() {
      function GoalGidAddSupportingRelationshipBody2() {
        _classCallCheck(this, GoalGidAddSupportingRelationshipBody2);
      }
      _createClass(GoalGidAddSupportingRelationshipBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalGidAddSupportingRelationshipBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalAddSupportingRelationshipRequest.GoalAddSupportingRelationshipRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalGidAddSupportingRelationshipBody2;
    }();
    exports.GoalGidAddSupportingRelationshipBody = GoalGidAddSupportingRelationshipBody;
    GoalGidAddSupportingRelationshipBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalGidRemoveFollowersBody.js
var require_GoalGidRemoveFollowersBody = __commonJS({
  "node_modules/asana/dist/model/GoalGidRemoveFollowersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalGidRemoveFollowersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskAddFollowersRequest = require_TaskAddFollowersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalGidRemoveFollowersBody = /* @__PURE__ */ function() {
      function GoalGidRemoveFollowersBody2() {
        _classCallCheck(this, GoalGidRemoveFollowersBody2);
      }
      _createClass(GoalGidRemoveFollowersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalGidRemoveFollowersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskAddFollowersRequest.TaskAddFollowersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalGidRemoveFollowersBody2;
    }();
    exports.GoalGidRemoveFollowersBody = GoalGidRemoveFollowersBody;
    GoalGidRemoveFollowersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalRemoveSupportingRelationshipRequest.js
var require_GoalRemoveSupportingRelationshipRequest = __commonJS({
  "node_modules/asana/dist/model/GoalRemoveSupportingRelationshipRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRemoveSupportingRelationshipRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRemoveSupportingRelationshipRequest = /* @__PURE__ */ function() {
      function GoalRemoveSupportingRelationshipRequest2(supporting_resource) {
        _classCallCheck(this, GoalRemoveSupportingRelationshipRequest2);
        this.supporting_resource = supporting_resource;
      }
      _createClass(GoalRemoveSupportingRelationshipRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRemoveSupportingRelationshipRequest2();
            if (data.hasOwnProperty("supporting_resource"))
              obj.supporting_resource = _ApiClient.ApiClient.convertToType(data["supporting_resource"], "String");
          }
          return obj;
        }
      }]);
      return GoalRemoveSupportingRelationshipRequest2;
    }();
    exports.GoalRemoveSupportingRelationshipRequest = GoalRemoveSupportingRelationshipRequest;
    GoalRemoveSupportingRelationshipRequest.prototype.supporting_resource = void 0;
  }
});

// node_modules/asana/dist/model/GoalGidRemoveSupportingRelationshipBody.js
var require_GoalGidRemoveSupportingRelationshipBody = __commonJS({
  "node_modules/asana/dist/model/GoalGidRemoveSupportingRelationshipBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalGidRemoveSupportingRelationshipBody = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRemoveSupportingRelationshipRequest = require_GoalRemoveSupportingRelationshipRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalGidRemoveSupportingRelationshipBody = /* @__PURE__ */ function() {
      function GoalGidRemoveSupportingRelationshipBody2() {
        _classCallCheck(this, GoalGidRemoveSupportingRelationshipBody2);
      }
      _createClass(GoalGidRemoveSupportingRelationshipBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalGidRemoveSupportingRelationshipBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalRemoveSupportingRelationshipRequest.GoalRemoveSupportingRelationshipRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalGidRemoveSupportingRelationshipBody2;
    }();
    exports.GoalGidRemoveSupportingRelationshipBody = GoalGidRemoveSupportingRelationshipBody;
    GoalGidRemoveSupportingRelationshipBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalMetricRequest.js
var require_GoalMetricRequest = __commonJS({
  "node_modules/asana/dist/model/GoalMetricRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMetricRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMetricRequest = /* @__PURE__ */ function() {
      function GoalMetricRequest2() {
        _classCallCheck(this, GoalMetricRequest2);
      }
      _createClass(GoalMetricRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMetricRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("unit"))
              obj.unit = _ApiClient.ApiClient.convertToType(data["unit"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("initial_number_value"))
              obj.initial_number_value = _ApiClient.ApiClient.convertToType(data["initial_number_value"], "Number");
            if (data.hasOwnProperty("target_number_value"))
              obj.target_number_value = _ApiClient.ApiClient.convertToType(data["target_number_value"], "Number");
            if (data.hasOwnProperty("current_number_value"))
              obj.current_number_value = _ApiClient.ApiClient.convertToType(data["current_number_value"], "Number");
            if (data.hasOwnProperty("current_display_value"))
              obj.current_display_value = _ApiClient.ApiClient.convertToType(data["current_display_value"], "String");
            if (data.hasOwnProperty("progress_source"))
              obj.progress_source = _ApiClient.ApiClient.convertToType(data["progress_source"], "String");
          }
          return obj;
        }
      }]);
      return GoalMetricRequest2;
    }();
    exports.GoalMetricRequest = GoalMetricRequest;
    GoalMetricRequest.prototype.gid = void 0;
    GoalMetricRequest.prototype.resource_type = void 0;
    GoalMetricRequest.ResourceSubtypeEnum = {
      /**
       * value: "number"
       * @const
       */
      _number: "number"
    };
    GoalMetricRequest.prototype.resource_subtype = void 0;
    GoalMetricRequest.prototype.precision = void 0;
    GoalMetricRequest.UnitEnum = {
      /**
       * value: "none"
       * @const
       */
      none: "none",
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage"
    };
    GoalMetricRequest.prototype.unit = void 0;
    GoalMetricRequest.prototype.currency_code = void 0;
    GoalMetricRequest.prototype.initial_number_value = void 0;
    GoalMetricRequest.prototype.target_number_value = void 0;
    GoalMetricRequest.prototype.current_number_value = void 0;
    GoalMetricRequest.prototype.current_display_value = void 0;
    GoalMetricRequest.ProgressSourceEnum = {
      /**
       * value: "manual"
       * @const
       */
      manual: "manual",
      /**
       * value: "subgoal_progress"
       * @const
       */
      subgoal_progress: "subgoal_progress",
      /**
       * value: "project_task_completion"
       * @const
       */
      project_task_completion: "project_task_completion",
      /**
       * value: "project_milestone_completion"
       * @const
       */
      project_milestone_completion: "project_milestone_completion",
      /**
       * value: "external"
       * @const
       */
      external: "external"
    };
    GoalMetricRequest.prototype.progress_source = void 0;
  }
});

// node_modules/asana/dist/model/GoalGidSetMetricBody.js
var require_GoalGidSetMetricBody = __commonJS({
  "node_modules/asana/dist/model/GoalGidSetMetricBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalGidSetMetricBody = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalMetricRequest = require_GoalMetricRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalGidSetMetricBody = /* @__PURE__ */ function() {
      function GoalGidSetMetricBody2() {
        _classCallCheck(this, GoalGidSetMetricBody2);
      }
      _createClass(GoalGidSetMetricBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalGidSetMetricBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalMetricRequest.GoalMetricRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalGidSetMetricBody2;
    }();
    exports.GoalGidSetMetricBody = GoalGidSetMetricBody;
    GoalGidSetMetricBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalMetricCurrentValueRequest.js
var require_GoalMetricCurrentValueRequest = __commonJS({
  "node_modules/asana/dist/model/GoalMetricCurrentValueRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMetricCurrentValueRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMetricCurrentValueRequest = /* @__PURE__ */ function() {
      function GoalMetricCurrentValueRequest2() {
        _classCallCheck(this, GoalMetricCurrentValueRequest2);
      }
      _createClass(GoalMetricCurrentValueRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMetricCurrentValueRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("current_number_value"))
              obj.current_number_value = _ApiClient.ApiClient.convertToType(data["current_number_value"], "Number");
          }
          return obj;
        }
      }]);
      return GoalMetricCurrentValueRequest2;
    }();
    exports.GoalMetricCurrentValueRequest = GoalMetricCurrentValueRequest;
    GoalMetricCurrentValueRequest.prototype.gid = void 0;
    GoalMetricCurrentValueRequest.prototype.resource_type = void 0;
    GoalMetricCurrentValueRequest.prototype.current_number_value = void 0;
  }
});

// node_modules/asana/dist/model/GoalGidSetMetricCurrentValueBody.js
var require_GoalGidSetMetricCurrentValueBody = __commonJS({
  "node_modules/asana/dist/model/GoalGidSetMetricCurrentValueBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalGidSetMetricCurrentValueBody = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalMetricCurrentValueRequest = require_GoalMetricCurrentValueRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalGidSetMetricCurrentValueBody = /* @__PURE__ */ function() {
      function GoalGidSetMetricCurrentValueBody2() {
        _classCallCheck(this, GoalGidSetMetricCurrentValueBody2);
      }
      _createClass(GoalGidSetMetricCurrentValueBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalGidSetMetricCurrentValueBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalMetricCurrentValueRequest.GoalMetricCurrentValueRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalGidSetMetricCurrentValueBody2;
    }();
    exports.GoalGidSetMetricCurrentValueBody = GoalGidSetMetricCurrentValueBody;
    GoalGidSetMetricCurrentValueBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/MembershipCompactGoal.js
var require_MembershipCompactGoal = __commonJS({
  "node_modules/asana/dist/model/MembershipCompactGoal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipCompactGoal = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipCompactGoal = /* @__PURE__ */ function() {
      function MembershipCompactGoal2() {
        _classCallCheck(this, MembershipCompactGoal2);
      }
      _createClass(MembershipCompactGoal2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipCompactGoal2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["owner"]);
          }
          return obj;
        }
      }]);
      return MembershipCompactGoal2;
    }();
    exports.MembershipCompactGoal = MembershipCompactGoal;
    MembershipCompactGoal.prototype.gid = void 0;
    MembershipCompactGoal.prototype.resource_type = void 0;
    MembershipCompactGoal.prototype.name = void 0;
    MembershipCompactGoal.prototype.owner = void 0;
  }
});

// node_modules/asana/dist/model/MembershipCompactMember.js
var require_MembershipCompactMember = __commonJS({
  "node_modules/asana/dist/model/MembershipCompactMember.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipCompactMember = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipCompactMember = /* @__PURE__ */ function() {
      function MembershipCompactMember2() {
        _classCallCheck(this, MembershipCompactMember2);
      }
      _createClass(MembershipCompactMember2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipCompactMember2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return MembershipCompactMember2;
    }();
    exports.MembershipCompactMember = MembershipCompactMember;
    MembershipCompactMember.prototype.gid = void 0;
    MembershipCompactMember.prototype.resource_type = void 0;
    MembershipCompactMember.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/MembershipCompactParent.js
var require_MembershipCompactParent = __commonJS({
  "node_modules/asana/dist/model/MembershipCompactParent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipCompactParent = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipCompactParent = /* @__PURE__ */ function() {
      function MembershipCompactParent2() {
        _classCallCheck(this, MembershipCompactParent2);
      }
      _createClass(MembershipCompactParent2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipCompactParent2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["owner"]);
          }
          return obj;
        }
      }]);
      return MembershipCompactParent2;
    }();
    exports.MembershipCompactParent = MembershipCompactParent;
    MembershipCompactParent.prototype.gid = void 0;
    MembershipCompactParent.prototype.resource_type = void 0;
    MembershipCompactParent.prototype.name = void 0;
    MembershipCompactParent.prototype.owner = void 0;
  }
});

// node_modules/asana/dist/model/GoalMembershipBase.js
var require_GoalMembershipBase = __commonJS({
  "node_modules/asana/dist/model/GoalMembershipBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMembershipBase = void 0;
    var _ApiClient = require_ApiClient();
    var _MembershipCompactGoal = require_MembershipCompactGoal();
    var _MembershipCompactMember = require_MembershipCompactMember();
    var _MembershipCompactParent = require_MembershipCompactParent();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMembershipBase = /* @__PURE__ */ function() {
      function GoalMembershipBase2() {
        _classCallCheck(this, GoalMembershipBase2);
      }
      _createClass(GoalMembershipBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMembershipBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("member"))
              obj.member = _MembershipCompactMember.MembershipCompactMember.constructFromObject(data["member"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _MembershipCompactParent.MembershipCompactParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("role"))
              obj.role = _ApiClient.ApiClient.convertToType(data["role"], "String");
            if (data.hasOwnProperty("goal"))
              obj.goal = _MembershipCompactGoal.MembershipCompactGoal.constructFromObject(data["goal"]);
          }
          return obj;
        }
      }]);
      return GoalMembershipBase2;
    }();
    exports.GoalMembershipBase = GoalMembershipBase;
    GoalMembershipBase.prototype.gid = void 0;
    GoalMembershipBase.prototype.resource_type = void 0;
    GoalMembershipBase.prototype.resource_subtype = void 0;
    GoalMembershipBase.prototype.member = void 0;
    GoalMembershipBase.prototype.parent = void 0;
    GoalMembershipBase.RoleEnum = {
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor"
    };
    GoalMembershipBase.prototype.role = void 0;
    GoalMembershipBase.prototype.goal = void 0;
  }
});

// node_modules/asana/dist/model/GoalMembershipCompact.js
var require_GoalMembershipCompact = __commonJS({
  "node_modules/asana/dist/model/GoalMembershipCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMembershipCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _MembershipCompactGoal = require_MembershipCompactGoal();
    var _MembershipCompactMember = require_MembershipCompactMember();
    var _MembershipCompactParent = require_MembershipCompactParent();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMembershipCompact = /* @__PURE__ */ function() {
      function GoalMembershipCompact2() {
        _classCallCheck(this, GoalMembershipCompact2);
      }
      _createClass(GoalMembershipCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMembershipCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("member"))
              obj.member = _MembershipCompactMember.MembershipCompactMember.constructFromObject(data["member"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _MembershipCompactParent.MembershipCompactParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("role"))
              obj.role = _ApiClient.ApiClient.convertToType(data["role"], "String");
            if (data.hasOwnProperty("goal"))
              obj.goal = _MembershipCompactGoal.MembershipCompactGoal.constructFromObject(data["goal"]);
            if (data.hasOwnProperty("is_commenter"))
              obj.is_commenter = _ApiClient.ApiClient.convertToType(data["is_commenter"], "Boolean");
            if (data.hasOwnProperty("is_editor"))
              obj.is_editor = _ApiClient.ApiClient.convertToType(data["is_editor"], "Boolean");
          }
          return obj;
        }
      }]);
      return GoalMembershipCompact2;
    }();
    exports.GoalMembershipCompact = GoalMembershipCompact;
    GoalMembershipCompact.prototype.gid = void 0;
    GoalMembershipCompact.prototype.resource_type = void 0;
    GoalMembershipCompact.prototype.resource_subtype = void 0;
    GoalMembershipCompact.prototype.member = void 0;
    GoalMembershipCompact.prototype.parent = void 0;
    GoalMembershipCompact.RoleEnum = {
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor"
    };
    GoalMembershipCompact.prototype.role = void 0;
    GoalMembershipCompact.prototype.goal = void 0;
    GoalMembershipCompact.prototype.is_commenter = void 0;
    GoalMembershipCompact.prototype.is_editor = void 0;
  }
});

// node_modules/asana/dist/model/GoalMembershipResponseUser.js
var require_GoalMembershipResponseUser = __commonJS({
  "node_modules/asana/dist/model/GoalMembershipResponseUser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMembershipResponseUser = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMembershipResponseUser = /* @__PURE__ */ function() {
      function GoalMembershipResponseUser2() {
        _classCallCheck(this, GoalMembershipResponseUser2);
      }
      _createClass(GoalMembershipResponseUser2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMembershipResponseUser2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return GoalMembershipResponseUser2;
    }();
    exports.GoalMembershipResponseUser = GoalMembershipResponseUser;
    GoalMembershipResponseUser.prototype.gid = void 0;
    GoalMembershipResponseUser.prototype.resource_type = void 0;
    GoalMembershipResponseUser.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/GoalMembershipResponseWorkspace.js
var require_GoalMembershipResponseWorkspace = __commonJS({
  "node_modules/asana/dist/model/GoalMembershipResponseWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMembershipResponseWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMembershipResponseWorkspace = /* @__PURE__ */ function() {
      function GoalMembershipResponseWorkspace2() {
        _classCallCheck(this, GoalMembershipResponseWorkspace2);
      }
      _createClass(GoalMembershipResponseWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMembershipResponseWorkspace2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return GoalMembershipResponseWorkspace2;
    }();
    exports.GoalMembershipResponseWorkspace = GoalMembershipResponseWorkspace;
    GoalMembershipResponseWorkspace.prototype.gid = void 0;
    GoalMembershipResponseWorkspace.prototype.resource_type = void 0;
    GoalMembershipResponseWorkspace.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/GoalMembershipResponse.js
var require_GoalMembershipResponse = __commonJS({
  "node_modules/asana/dist/model/GoalMembershipResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMembershipResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalMembershipResponseUser = require_GoalMembershipResponseUser();
    var _GoalMembershipResponseWorkspace = require_GoalMembershipResponseWorkspace();
    var _MembershipCompactGoal = require_MembershipCompactGoal();
    var _MembershipCompactMember = require_MembershipCompactMember();
    var _MembershipCompactParent = require_MembershipCompactParent();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMembershipResponse = /* @__PURE__ */ function() {
      function GoalMembershipResponse2() {
        _classCallCheck(this, GoalMembershipResponse2);
      }
      _createClass(GoalMembershipResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMembershipResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("member"))
              obj.member = _MembershipCompactMember.MembershipCompactMember.constructFromObject(data["member"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _MembershipCompactParent.MembershipCompactParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("role"))
              obj.role = _ApiClient.ApiClient.convertToType(data["role"], "String");
            if (data.hasOwnProperty("goal"))
              obj.goal = _MembershipCompactGoal.MembershipCompactGoal.constructFromObject(data["goal"]);
            if (data.hasOwnProperty("user"))
              obj.user = _GoalMembershipResponseUser.GoalMembershipResponseUser.constructFromObject(data["user"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _GoalMembershipResponseWorkspace.GoalMembershipResponseWorkspace.constructFromObject(data["workspace"]);
          }
          return obj;
        }
      }]);
      return GoalMembershipResponse2;
    }();
    exports.GoalMembershipResponse = GoalMembershipResponse;
    GoalMembershipResponse.prototype.gid = void 0;
    GoalMembershipResponse.prototype.resource_type = void 0;
    GoalMembershipResponse.prototype.resource_subtype = void 0;
    GoalMembershipResponse.prototype.member = void 0;
    GoalMembershipResponse.prototype.parent = void 0;
    GoalMembershipResponse.RoleEnum = {
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor"
    };
    GoalMembershipResponse.prototype.role = void 0;
    GoalMembershipResponse.prototype.goal = void 0;
    GoalMembershipResponse.prototype.user = void 0;
    GoalMembershipResponse.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/GoalMetricBase.js
var require_GoalMetricBase = __commonJS({
  "node_modules/asana/dist/model/GoalMetricBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalMetricBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalMetricBase = /* @__PURE__ */ function() {
      function GoalMetricBase2() {
        _classCallCheck(this, GoalMetricBase2);
      }
      _createClass(GoalMetricBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalMetricBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("unit"))
              obj.unit = _ApiClient.ApiClient.convertToType(data["unit"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("initial_number_value"))
              obj.initial_number_value = _ApiClient.ApiClient.convertToType(data["initial_number_value"], "Number");
            if (data.hasOwnProperty("target_number_value"))
              obj.target_number_value = _ApiClient.ApiClient.convertToType(data["target_number_value"], "Number");
            if (data.hasOwnProperty("current_number_value"))
              obj.current_number_value = _ApiClient.ApiClient.convertToType(data["current_number_value"], "Number");
            if (data.hasOwnProperty("current_display_value"))
              obj.current_display_value = _ApiClient.ApiClient.convertToType(data["current_display_value"], "String");
            if (data.hasOwnProperty("progress_source"))
              obj.progress_source = _ApiClient.ApiClient.convertToType(data["progress_source"], "String");
          }
          return obj;
        }
      }]);
      return GoalMetricBase2;
    }();
    exports.GoalMetricBase = GoalMetricBase;
    GoalMetricBase.prototype.gid = void 0;
    GoalMetricBase.prototype.resource_type = void 0;
    GoalMetricBase.ResourceSubtypeEnum = {
      /**
       * value: "number"
       * @const
       */
      _number: "number"
    };
    GoalMetricBase.prototype.resource_subtype = void 0;
    GoalMetricBase.prototype.precision = void 0;
    GoalMetricBase.UnitEnum = {
      /**
       * value: "none"
       * @const
       */
      none: "none",
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage"
    };
    GoalMetricBase.prototype.unit = void 0;
    GoalMetricBase.prototype.currency_code = void 0;
    GoalMetricBase.prototype.initial_number_value = void 0;
    GoalMetricBase.prototype.target_number_value = void 0;
    GoalMetricBase.prototype.current_number_value = void 0;
    GoalMetricBase.prototype.current_display_value = void 0;
    GoalMetricBase.ProgressSourceEnum = {
      /**
       * value: "manual"
       * @const
       */
      manual: "manual",
      /**
       * value: "subgoal_progress"
       * @const
       */
      subgoal_progress: "subgoal_progress",
      /**
       * value: "project_task_completion"
       * @const
       */
      project_task_completion: "project_task_completion",
      /**
       * value: "project_milestone_completion"
       * @const
       */
      project_milestone_completion: "project_milestone_completion",
      /**
       * value: "external"
       * @const
       */
      external: "external"
    };
    GoalMetricBase.prototype.progress_source = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipBaseSupportedGoal.js
var require_GoalRelationshipBaseSupportedGoal = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipBaseSupportedGoal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipBaseSupportedGoal = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipBaseSupportedGoal = /* @__PURE__ */ function() {
      function GoalRelationshipBaseSupportedGoal2() {
        _classCallCheck(this, GoalRelationshipBaseSupportedGoal2);
      }
      _createClass(GoalRelationshipBaseSupportedGoal2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipBaseSupportedGoal2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["owner"]);
          }
          return obj;
        }
      }]);
      return GoalRelationshipBaseSupportedGoal2;
    }();
    exports.GoalRelationshipBaseSupportedGoal = GoalRelationshipBaseSupportedGoal;
    GoalRelationshipBaseSupportedGoal.prototype.gid = void 0;
    GoalRelationshipBaseSupportedGoal.prototype.resource_type = void 0;
    GoalRelationshipBaseSupportedGoal.prototype.name = void 0;
    GoalRelationshipBaseSupportedGoal.prototype.owner = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipBaseSupportingResource.js
var require_GoalRelationshipBaseSupportingResource = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipBaseSupportingResource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipBaseSupportingResource = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipBaseSupportingResource = /* @__PURE__ */ function() {
      function GoalRelationshipBaseSupportingResource2() {
        _classCallCheck(this, GoalRelationshipBaseSupportingResource2);
      }
      _createClass(GoalRelationshipBaseSupportingResource2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipBaseSupportingResource2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return GoalRelationshipBaseSupportingResource2;
    }();
    exports.GoalRelationshipBaseSupportingResource = GoalRelationshipBaseSupportingResource;
    GoalRelationshipBaseSupportingResource.prototype.gid = void 0;
    GoalRelationshipBaseSupportingResource.prototype.resource_type = void 0;
    GoalRelationshipBaseSupportingResource.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipBase.js
var require_GoalRelationshipBase = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipBase = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRelationshipBaseSupportedGoal = require_GoalRelationshipBaseSupportedGoal();
    var _GoalRelationshipBaseSupportingResource = require_GoalRelationshipBaseSupportingResource();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipBase = /* @__PURE__ */ function() {
      function GoalRelationshipBase2() {
        _classCallCheck(this, GoalRelationshipBase2);
      }
      _createClass(GoalRelationshipBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("supporting_resource"))
              obj.supporting_resource = _GoalRelationshipBaseSupportingResource.GoalRelationshipBaseSupportingResource.constructFromObject(data["supporting_resource"]);
            if (data.hasOwnProperty("contribution_weight"))
              obj.contribution_weight = _ApiClient.ApiClient.convertToType(data["contribution_weight"], "Number");
            if (data.hasOwnProperty("supported_goal"))
              obj.supported_goal = _GoalRelationshipBaseSupportedGoal.GoalRelationshipBaseSupportedGoal.constructFromObject(data["supported_goal"]);
          }
          return obj;
        }
      }]);
      return GoalRelationshipBase2;
    }();
    exports.GoalRelationshipBase = GoalRelationshipBase;
    GoalRelationshipBase.prototype.gid = void 0;
    GoalRelationshipBase.prototype.resource_type = void 0;
    GoalRelationshipBase.ResourceSubtypeEnum = {
      /**
       * value: "subgoal"
       * @const
       */
      subgoal: "subgoal",
      /**
       * value: "supporting_work"
       * @const
       */
      supporting_work: "supporting_work"
    };
    GoalRelationshipBase.prototype.resource_subtype = void 0;
    GoalRelationshipBase.prototype.supporting_resource = void 0;
    GoalRelationshipBase.prototype.contribution_weight = void 0;
    GoalRelationshipBase.prototype.supported_goal = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipCompact.js
var require_GoalRelationshipCompact = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRelationshipBaseSupportingResource = require_GoalRelationshipBaseSupportingResource();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipCompact = /* @__PURE__ */ function() {
      function GoalRelationshipCompact2() {
        _classCallCheck(this, GoalRelationshipCompact2);
      }
      _createClass(GoalRelationshipCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("supporting_resource"))
              obj.supporting_resource = _GoalRelationshipBaseSupportingResource.GoalRelationshipBaseSupportingResource.constructFromObject(data["supporting_resource"]);
            if (data.hasOwnProperty("contribution_weight"))
              obj.contribution_weight = _ApiClient.ApiClient.convertToType(data["contribution_weight"], "Number");
          }
          return obj;
        }
      }]);
      return GoalRelationshipCompact2;
    }();
    exports.GoalRelationshipCompact = GoalRelationshipCompact;
    GoalRelationshipCompact.prototype.gid = void 0;
    GoalRelationshipCompact.prototype.resource_type = void 0;
    GoalRelationshipCompact.ResourceSubtypeEnum = {
      /**
       * value: "subgoal"
       * @const
       */
      subgoal: "subgoal",
      /**
       * value: "supporting_work"
       * @const
       */
      supporting_work: "supporting_work"
    };
    GoalRelationshipCompact.prototype.resource_subtype = void 0;
    GoalRelationshipCompact.prototype.supporting_resource = void 0;
    GoalRelationshipCompact.prototype.contribution_weight = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipRequest.js
var require_GoalRelationshipRequest = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRelationshipBaseSupportedGoal = require_GoalRelationshipBaseSupportedGoal();
    var _GoalRelationshipBaseSupportingResource = require_GoalRelationshipBaseSupportingResource();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipRequest = /* @__PURE__ */ function() {
      function GoalRelationshipRequest2() {
        _classCallCheck(this, GoalRelationshipRequest2);
      }
      _createClass(GoalRelationshipRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("supporting_resource"))
              obj.supporting_resource = _GoalRelationshipBaseSupportingResource.GoalRelationshipBaseSupportingResource.constructFromObject(data["supporting_resource"]);
            if (data.hasOwnProperty("contribution_weight"))
              obj.contribution_weight = _ApiClient.ApiClient.convertToType(data["contribution_weight"], "Number");
            if (data.hasOwnProperty("supported_goal"))
              obj.supported_goal = _GoalRelationshipBaseSupportedGoal.GoalRelationshipBaseSupportedGoal.constructFromObject(data["supported_goal"]);
          }
          return obj;
        }
      }]);
      return GoalRelationshipRequest2;
    }();
    exports.GoalRelationshipRequest = GoalRelationshipRequest;
    GoalRelationshipRequest.prototype.gid = void 0;
    GoalRelationshipRequest.prototype.resource_type = void 0;
    GoalRelationshipRequest.ResourceSubtypeEnum = {
      /**
       * value: "subgoal"
       * @const
       */
      subgoal: "subgoal",
      /**
       * value: "supporting_work"
       * @const
       */
      supporting_work: "supporting_work"
    };
    GoalRelationshipRequest.prototype.resource_subtype = void 0;
    GoalRelationshipRequest.prototype.supporting_resource = void 0;
    GoalRelationshipRequest.prototype.contribution_weight = void 0;
    GoalRelationshipRequest.prototype.supported_goal = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipResponse.js
var require_GoalRelationshipResponse = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRelationshipBaseSupportedGoal = require_GoalRelationshipBaseSupportedGoal();
    var _GoalRelationshipBaseSupportingResource = require_GoalRelationshipBaseSupportingResource();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipResponse = /* @__PURE__ */ function() {
      function GoalRelationshipResponse2() {
        _classCallCheck(this, GoalRelationshipResponse2);
      }
      _createClass(GoalRelationshipResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("supporting_resource"))
              obj.supporting_resource = _GoalRelationshipBaseSupportingResource.GoalRelationshipBaseSupportingResource.constructFromObject(data["supporting_resource"]);
            if (data.hasOwnProperty("contribution_weight"))
              obj.contribution_weight = _ApiClient.ApiClient.convertToType(data["contribution_weight"], "Number");
            if (data.hasOwnProperty("supported_goal"))
              obj.supported_goal = _GoalRelationshipBaseSupportedGoal.GoalRelationshipBaseSupportedGoal.constructFromObject(data["supported_goal"]);
          }
          return obj;
        }
      }]);
      return GoalRelationshipResponse2;
    }();
    exports.GoalRelationshipResponse = GoalRelationshipResponse;
    GoalRelationshipResponse.prototype.gid = void 0;
    GoalRelationshipResponse.prototype.resource_type = void 0;
    GoalRelationshipResponse.ResourceSubtypeEnum = {
      /**
       * value: "subgoal"
       * @const
       */
      subgoal: "subgoal",
      /**
       * value: "supporting_work"
       * @const
       */
      supporting_work: "supporting_work"
    };
    GoalRelationshipResponse.prototype.resource_subtype = void 0;
    GoalRelationshipResponse.prototype.supporting_resource = void 0;
    GoalRelationshipResponse.prototype.contribution_weight = void 0;
    GoalRelationshipResponse.prototype.supported_goal = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipResponseArray.js
var require_GoalRelationshipResponseArray = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRelationshipResponse = require_GoalRelationshipResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipResponseArray = /* @__PURE__ */ function() {
      function GoalRelationshipResponseArray2(data) {
        _classCallCheck(this, GoalRelationshipResponseArray2);
        this.data = data;
      }
      _createClass(GoalRelationshipResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_GoalRelationshipResponse.GoalRelationshipResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return GoalRelationshipResponseArray2;
    }();
    exports.GoalRelationshipResponseArray = GoalRelationshipResponseArray;
    GoalRelationshipResponseArray.prototype.data = void 0;
    GoalRelationshipResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipResponseData.js
var require_GoalRelationshipResponseData = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRelationshipResponse = require_GoalRelationshipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipResponseData = /* @__PURE__ */ function() {
      function GoalRelationshipResponseData2(data) {
        _classCallCheck(this, GoalRelationshipResponseData2);
        this.data = data;
      }
      _createClass(GoalRelationshipResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalRelationshipResponse.GoalRelationshipResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalRelationshipResponseData2;
    }();
    exports.GoalRelationshipResponseData = GoalRelationshipResponseData;
    GoalRelationshipResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalRelationshipsGoalRelationshipGidBody.js
var require_GoalRelationshipsGoalRelationshipGidBody = __commonJS({
  "node_modules/asana/dist/model/GoalRelationshipsGoalRelationshipGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipsGoalRelationshipGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRelationshipRequest = require_GoalRelationshipRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipsGoalRelationshipGidBody = /* @__PURE__ */ function() {
      function GoalRelationshipsGoalRelationshipGidBody2() {
        _classCallCheck(this, GoalRelationshipsGoalRelationshipGidBody2);
      }
      _createClass(GoalRelationshipsGoalRelationshipGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRelationshipsGoalRelationshipGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalRelationshipRequest.GoalRelationshipRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalRelationshipsGoalRelationshipGidBody2;
    }();
    exports.GoalRelationshipsGoalRelationshipGidBody = GoalRelationshipsGoalRelationshipGidBody;
    GoalRelationshipsGoalRelationshipGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalRemoveSubgoalRequest.js
var require_GoalRemoveSubgoalRequest = __commonJS({
  "node_modules/asana/dist/model/GoalRemoveSubgoalRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRemoveSubgoalRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRemoveSubgoalRequest = /* @__PURE__ */ function() {
      function GoalRemoveSubgoalRequest2(subgoal) {
        _classCallCheck(this, GoalRemoveSubgoalRequest2);
        this.subgoal = subgoal;
      }
      _createClass(GoalRemoveSubgoalRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRemoveSubgoalRequest2();
            if (data.hasOwnProperty("subgoal"))
              obj.subgoal = _ApiClient.ApiClient.convertToType(data["subgoal"], "String");
          }
          return obj;
        }
      }]);
      return GoalRemoveSubgoalRequest2;
    }();
    exports.GoalRemoveSubgoalRequest = GoalRemoveSubgoalRequest;
    GoalRemoveSubgoalRequest.prototype.subgoal = void 0;
  }
});

// node_modules/asana/dist/model/GoalRequest.js
var require_GoalRequest = __commonJS({
  "node_modules/asana/dist/model/GoalRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRequest = /* @__PURE__ */ function() {
      function GoalRequest2() {
        _classCallCheck(this, GoalRequest2);
      }
      _createClass(GoalRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("is_workspace_level"))
              obj.is_workspace_level = _ApiClient.ApiClient.convertToType(data["is_workspace_level"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
            if (data.hasOwnProperty("time_period"))
              obj.time_period = _ApiClient.ApiClient.convertToType(data["time_period"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], "String");
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], ["String"]);
          }
          return obj;
        }
      }]);
      return GoalRequest2;
    }();
    exports.GoalRequest = GoalRequest;
    GoalRequest.prototype.gid = void 0;
    GoalRequest.prototype.resource_type = void 0;
    GoalRequest.prototype.name = void 0;
    GoalRequest.prototype.html_notes = void 0;
    GoalRequest.prototype.notes = void 0;
    GoalRequest.prototype.due_on = void 0;
    GoalRequest.prototype.start_on = void 0;
    GoalRequest.prototype.is_workspace_level = void 0;
    GoalRequest.prototype.liked = void 0;
    GoalRequest.prototype.team = void 0;
    GoalRequest.prototype.workspace = void 0;
    GoalRequest.prototype.time_period = void 0;
    GoalRequest.prototype.owner = void 0;
    GoalRequest.prototype.followers = void 0;
  }
});

// node_modules/asana/dist/model/GoalRequestBase.js
var require_GoalRequestBase = __commonJS({
  "node_modules/asana/dist/model/GoalRequestBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRequestBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRequestBase = /* @__PURE__ */ function() {
      function GoalRequestBase2() {
        _classCallCheck(this, GoalRequestBase2);
      }
      _createClass(GoalRequestBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalRequestBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("is_workspace_level"))
              obj.is_workspace_level = _ApiClient.ApiClient.convertToType(data["is_workspace_level"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
            if (data.hasOwnProperty("time_period"))
              obj.time_period = _ApiClient.ApiClient.convertToType(data["time_period"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], "String");
          }
          return obj;
        }
      }]);
      return GoalRequestBase2;
    }();
    exports.GoalRequestBase = GoalRequestBase;
    GoalRequestBase.prototype.gid = void 0;
    GoalRequestBase.prototype.resource_type = void 0;
    GoalRequestBase.prototype.name = void 0;
    GoalRequestBase.prototype.html_notes = void 0;
    GoalRequestBase.prototype.notes = void 0;
    GoalRequestBase.prototype.due_on = void 0;
    GoalRequestBase.prototype.start_on = void 0;
    GoalRequestBase.prototype.is_workspace_level = void 0;
    GoalRequestBase.prototype.liked = void 0;
    GoalRequestBase.prototype.team = void 0;
    GoalRequestBase.prototype.workspace = void 0;
    GoalRequestBase.prototype.time_period = void 0;
    GoalRequestBase.prototype.owner = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseCurrentStatusUpdate.js
var require_GoalResponseCurrentStatusUpdate = __commonJS({
  "node_modules/asana/dist/model/GoalResponseCurrentStatusUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseCurrentStatusUpdate = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseCurrentStatusUpdate = /* @__PURE__ */ function() {
      function GoalResponseCurrentStatusUpdate2() {
        _classCallCheck(this, GoalResponseCurrentStatusUpdate2);
      }
      _createClass(GoalResponseCurrentStatusUpdate2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseCurrentStatusUpdate2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
          }
          return obj;
        }
      }]);
      return GoalResponseCurrentStatusUpdate2;
    }();
    exports.GoalResponseCurrentStatusUpdate = GoalResponseCurrentStatusUpdate;
    GoalResponseCurrentStatusUpdate.prototype.gid = void 0;
    GoalResponseCurrentStatusUpdate.prototype.resource_type = void 0;
    GoalResponseCurrentStatusUpdate.prototype.title = void 0;
    GoalResponseCurrentStatusUpdate.ResourceSubtypeEnum = {
      /**
       * value: "project_status_update"
       * @const
       */
      project_status_update: "project_status_update",
      /**
       * value: "portfolio_status_update"
       * @const
       */
      portfolio_status_update: "portfolio_status_update",
      /**
       * value: "goal_status_update"
       * @const
       */
      goal_status_update: "goal_status_update"
    };
    GoalResponseCurrentStatusUpdate.prototype.resource_subtype = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseLikes.js
var require_GoalResponseLikes = __commonJS({
  "node_modules/asana/dist/model/GoalResponseLikes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseLikes = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseLikes = /* @__PURE__ */ function() {
      function GoalResponseLikes2() {
        _classCallCheck(this, GoalResponseLikes2);
      }
      _createClass(GoalResponseLikes2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseLikes2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
          }
          return obj;
        }
      }]);
      return GoalResponseLikes2;
    }();
    exports.GoalResponseLikes = GoalResponseLikes;
    GoalResponseLikes.prototype.gid = void 0;
    GoalResponseLikes.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseMetric.js
var require_GoalResponseMetric = __commonJS({
  "node_modules/asana/dist/model/GoalResponseMetric.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseMetric = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseMetric = /* @__PURE__ */ function() {
      function GoalResponseMetric2() {
        _classCallCheck(this, GoalResponseMetric2);
      }
      _createClass(GoalResponseMetric2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseMetric2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("unit"))
              obj.unit = _ApiClient.ApiClient.convertToType(data["unit"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("initial_number_value"))
              obj.initial_number_value = _ApiClient.ApiClient.convertToType(data["initial_number_value"], "Number");
            if (data.hasOwnProperty("target_number_value"))
              obj.target_number_value = _ApiClient.ApiClient.convertToType(data["target_number_value"], "Number");
            if (data.hasOwnProperty("current_number_value"))
              obj.current_number_value = _ApiClient.ApiClient.convertToType(data["current_number_value"], "Number");
            if (data.hasOwnProperty("current_display_value"))
              obj.current_display_value = _ApiClient.ApiClient.convertToType(data["current_display_value"], "String");
            if (data.hasOwnProperty("progress_source"))
              obj.progress_source = _ApiClient.ApiClient.convertToType(data["progress_source"], "String");
            if (data.hasOwnProperty("can_manage"))
              obj.can_manage = _ApiClient.ApiClient.convertToType(data["can_manage"], "Boolean");
          }
          return obj;
        }
      }]);
      return GoalResponseMetric2;
    }();
    exports.GoalResponseMetric = GoalResponseMetric;
    GoalResponseMetric.prototype.gid = void 0;
    GoalResponseMetric.prototype.resource_type = void 0;
    GoalResponseMetric.ResourceSubtypeEnum = {
      /**
       * value: "number"
       * @const
       */
      _number: "number"
    };
    GoalResponseMetric.prototype.resource_subtype = void 0;
    GoalResponseMetric.prototype.precision = void 0;
    GoalResponseMetric.UnitEnum = {
      /**
       * value: "none"
       * @const
       */
      none: "none",
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage"
    };
    GoalResponseMetric.prototype.unit = void 0;
    GoalResponseMetric.prototype.currency_code = void 0;
    GoalResponseMetric.prototype.initial_number_value = void 0;
    GoalResponseMetric.prototype.target_number_value = void 0;
    GoalResponseMetric.prototype.current_number_value = void 0;
    GoalResponseMetric.prototype.current_display_value = void 0;
    GoalResponseMetric.ProgressSourceEnum = {
      /**
       * value: "manual"
       * @const
       */
      manual: "manual",
      /**
       * value: "subgoal_progress"
       * @const
       */
      subgoal_progress: "subgoal_progress",
      /**
       * value: "project_task_completion"
       * @const
       */
      project_task_completion: "project_task_completion",
      /**
       * value: "project_milestone_completion"
       * @const
       */
      project_milestone_completion: "project_milestone_completion",
      /**
       * value: "external"
       * @const
       */
      external: "external"
    };
    GoalResponseMetric.prototype.progress_source = void 0;
    GoalResponseMetric.prototype.can_manage = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseTeam.js
var require_GoalResponseTeam = __commonJS({
  "node_modules/asana/dist/model/GoalResponseTeam.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseTeam = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseTeam = /* @__PURE__ */ function() {
      function GoalResponseTeam2() {
        _classCallCheck(this, GoalResponseTeam2);
      }
      _createClass(GoalResponseTeam2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseTeam2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return GoalResponseTeam2;
    }();
    exports.GoalResponseTeam = GoalResponseTeam;
    GoalResponseTeam.prototype.gid = void 0;
    GoalResponseTeam.prototype.resource_type = void 0;
    GoalResponseTeam.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseTimePeriod.js
var require_GoalResponseTimePeriod = __commonJS({
  "node_modules/asana/dist/model/GoalResponseTimePeriod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseTimePeriod = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseTimePeriod = /* @__PURE__ */ function() {
      function GoalResponseTimePeriod2() {
        _classCallCheck(this, GoalResponseTimePeriod2);
      }
      _createClass(GoalResponseTimePeriod2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseTimePeriod2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("end_on"))
              obj.end_on = _ApiClient.ApiClient.convertToType(data["end_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("period"))
              obj.period = _ApiClient.ApiClient.convertToType(data["period"], "String");
            if (data.hasOwnProperty("display_name"))
              obj.display_name = _ApiClient.ApiClient.convertToType(data["display_name"], "String");
          }
          return obj;
        }
      }]);
      return GoalResponseTimePeriod2;
    }();
    exports.GoalResponseTimePeriod = GoalResponseTimePeriod;
    GoalResponseTimePeriod.prototype.gid = void 0;
    GoalResponseTimePeriod.prototype.resource_type = void 0;
    GoalResponseTimePeriod.prototype.end_on = void 0;
    GoalResponseTimePeriod.prototype.start_on = void 0;
    GoalResponseTimePeriod.PeriodEnum = {
      /**
       * value: "FY"
       * @const
       */
      FY: "FY",
      /**
       * value: "H1"
       * @const
       */
      H1: "H1",
      /**
       * value: "H2"
       * @const
       */
      H2: "H2",
      /**
       * value: "Q1"
       * @const
       */
      Q1: "Q1",
      /**
       * value: "Q2"
       * @const
       */
      Q2: "Q2",
      /**
       * value: "Q3"
       * @const
       */
      Q3: "Q3",
      /**
       * value: "Q4"
       * @const
       */
      Q4: "Q4"
    };
    GoalResponseTimePeriod.prototype.period = void 0;
    GoalResponseTimePeriod.prototype.display_name = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseWorkspace.js
var require_GoalResponseWorkspace = __commonJS({
  "node_modules/asana/dist/model/GoalResponseWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseWorkspace = /* @__PURE__ */ function() {
      function GoalResponseWorkspace2() {
        _classCallCheck(this, GoalResponseWorkspace2);
      }
      _createClass(GoalResponseWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseWorkspace2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return GoalResponseWorkspace2;
    }();
    exports.GoalResponseWorkspace = GoalResponseWorkspace;
    GoalResponseWorkspace.prototype.gid = void 0;
    GoalResponseWorkspace.prototype.resource_type = void 0;
    GoalResponseWorkspace.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponse.js
var require_GoalResponse = __commonJS({
  "node_modules/asana/dist/model/GoalResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseCurrentStatusUpdate = require_GoalResponseCurrentStatusUpdate();
    var _GoalResponseLikes = require_GoalResponseLikes();
    var _GoalResponseMetric = require_GoalResponseMetric();
    var _GoalResponseTeam = require_GoalResponseTeam();
    var _GoalResponseTimePeriod = require_GoalResponseTimePeriod();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponse = /* @__PURE__ */ function() {
      function GoalResponse2() {
        _classCallCheck(this, GoalResponse2);
      }
      _createClass(GoalResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("is_workspace_level"))
              obj.is_workspace_level = _ApiClient.ApiClient.convertToType(data["is_workspace_level"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("likes"))
              obj.likes = _ApiClient.ApiClient.convertToType(data["likes"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("num_likes"))
              obj.num_likes = _ApiClient.ApiClient.convertToType(data["num_likes"], "Number");
            if (data.hasOwnProperty("team"))
              obj.team = _GoalResponseTeam.GoalResponseTeam.constructFromObject(data["team"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["workspace"]);
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("time_period"))
              obj.time_period = _GoalResponseTimePeriod.GoalResponseTimePeriod.constructFromObject(data["time_period"]);
            if (data.hasOwnProperty("metric"))
              obj.metric = _GoalResponseMetric.GoalResponseMetric.constructFromObject(data["metric"]);
            if (data.hasOwnProperty("owner"))
              obj.owner = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["owner"]);
            if (data.hasOwnProperty("current_status_update"))
              obj.current_status_update = _GoalResponseCurrentStatusUpdate.GoalResponseCurrentStatusUpdate.constructFromObject(data["current_status_update"]);
            if (data.hasOwnProperty("status"))
              obj.status = _ApiClient.ApiClient.convertToType(data["status"], "String");
          }
          return obj;
        }
      }]);
      return GoalResponse2;
    }();
    exports.GoalResponse = GoalResponse;
    GoalResponse.prototype.gid = void 0;
    GoalResponse.prototype.resource_type = void 0;
    GoalResponse.prototype.name = void 0;
    GoalResponse.prototype.html_notes = void 0;
    GoalResponse.prototype.notes = void 0;
    GoalResponse.prototype.due_on = void 0;
    GoalResponse.prototype.start_on = void 0;
    GoalResponse.prototype.is_workspace_level = void 0;
    GoalResponse.prototype.liked = void 0;
    GoalResponse.prototype.likes = void 0;
    GoalResponse.prototype.num_likes = void 0;
    GoalResponse.prototype.team = void 0;
    GoalResponse.prototype.workspace = void 0;
    GoalResponse.prototype.followers = void 0;
    GoalResponse.prototype.time_period = void 0;
    GoalResponse.prototype.metric = void 0;
    GoalResponse.prototype.owner = void 0;
    GoalResponse.prototype.current_status_update = void 0;
    GoalResponse.prototype.status = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseArray.js
var require_GoalResponseArray = __commonJS({
  "node_modules/asana/dist/model/GoalResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponse = require_GoalResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseArray = /* @__PURE__ */ function() {
      function GoalResponseArray2(data) {
        _classCallCheck(this, GoalResponseArray2);
        this.data = data;
      }
      _createClass(GoalResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_GoalResponse.GoalResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return GoalResponseArray2;
    }();
    exports.GoalResponseArray = GoalResponseArray;
    GoalResponseArray.prototype.data = void 0;
    GoalResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/GoalResponseData.js
var require_GoalResponseData = __commonJS({
  "node_modules/asana/dist/model/GoalResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponse = require_GoalResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalResponseData = /* @__PURE__ */ function() {
      function GoalResponseData2(data) {
        _classCallCheck(this, GoalResponseData2);
        this.data = data;
      }
      _createClass(GoalResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalResponse.GoalResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalResponseData2;
    }();
    exports.GoalResponseData = GoalResponseData;
    GoalResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalUpdateRequest.js
var require_GoalUpdateRequest = __commonJS({
  "node_modules/asana/dist/model/GoalUpdateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalUpdateRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalUpdateRequest = /* @__PURE__ */ function() {
      function GoalUpdateRequest2() {
        _classCallCheck(this, GoalUpdateRequest2);
      }
      _createClass(GoalUpdateRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalUpdateRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("is_workspace_level"))
              obj.is_workspace_level = _ApiClient.ApiClient.convertToType(data["is_workspace_level"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
            if (data.hasOwnProperty("time_period"))
              obj.time_period = _ApiClient.ApiClient.convertToType(data["time_period"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], "String");
            if (data.hasOwnProperty("status"))
              obj.status = _ApiClient.ApiClient.convertToType(data["status"], "String");
          }
          return obj;
        }
      }]);
      return GoalUpdateRequest2;
    }();
    exports.GoalUpdateRequest = GoalUpdateRequest;
    GoalUpdateRequest.prototype.gid = void 0;
    GoalUpdateRequest.prototype.resource_type = void 0;
    GoalUpdateRequest.prototype.name = void 0;
    GoalUpdateRequest.prototype.html_notes = void 0;
    GoalUpdateRequest.prototype.notes = void 0;
    GoalUpdateRequest.prototype.due_on = void 0;
    GoalUpdateRequest.prototype.start_on = void 0;
    GoalUpdateRequest.prototype.is_workspace_level = void 0;
    GoalUpdateRequest.prototype.liked = void 0;
    GoalUpdateRequest.prototype.team = void 0;
    GoalUpdateRequest.prototype.workspace = void 0;
    GoalUpdateRequest.prototype.time_period = void 0;
    GoalUpdateRequest.prototype.owner = void 0;
    GoalUpdateRequest.prototype.status = void 0;
  }
});

// node_modules/asana/dist/model/GoalsBody.js
var require_GoalsBody = __commonJS({
  "node_modules/asana/dist/model/GoalsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalRequest = require_GoalRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalsBody = /* @__PURE__ */ function() {
      function GoalsBody2() {
        _classCallCheck(this, GoalsBody2);
      }
      _createClass(GoalsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalRequest.GoalRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalsBody2;
    }();
    exports.GoalsBody = GoalsBody;
    GoalsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/GoalsGoalGidBody.js
var require_GoalsGoalGidBody = __commonJS({
  "node_modules/asana/dist/model/GoalsGoalGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalsGoalGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalUpdateRequest = require_GoalUpdateRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalsGoalGidBody = /* @__PURE__ */ function() {
      function GoalsGoalGidBody2() {
        _classCallCheck(this, GoalsGoalGidBody2);
      }
      _createClass(GoalsGoalGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GoalsGoalGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _GoalUpdateRequest.GoalUpdateRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return GoalsGoalGidBody2;
    }();
    exports.GoalsGoalGidBody = GoalsGoalGidBody;
    GoalsGoalGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/InlineResponse412Errors.js
var require_InlineResponse412Errors = __commonJS({
  "node_modules/asana/dist/model/InlineResponse412Errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InlineResponse412Errors = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var InlineResponse412Errors = /* @__PURE__ */ function() {
      function InlineResponse412Errors2() {
        _classCallCheck(this, InlineResponse412Errors2);
      }
      _createClass(InlineResponse412Errors2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new InlineResponse412Errors2();
            if (data.hasOwnProperty("message"))
              obj.message = _ApiClient.ApiClient.convertToType(data["message"], "String");
          }
          return obj;
        }
      }]);
      return InlineResponse412Errors2;
    }();
    exports.InlineResponse412Errors = InlineResponse412Errors;
    InlineResponse412Errors.prototype.message = void 0;
  }
});

// node_modules/asana/dist/model/InlineResponse412.js
var require_InlineResponse412 = __commonJS({
  "node_modules/asana/dist/model/InlineResponse412.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InlineResponse412 = void 0;
    var _ApiClient = require_ApiClient();
    var _InlineResponse412Errors = require_InlineResponse412Errors();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var InlineResponse412 = /* @__PURE__ */ function() {
      function InlineResponse4122() {
        _classCallCheck(this, InlineResponse4122);
      }
      _createClass(InlineResponse4122, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new InlineResponse4122();
            if (data.hasOwnProperty("errors"))
              obj.errors = _ApiClient.ApiClient.convertToType(data["errors"], [_InlineResponse412Errors.InlineResponse412Errors]);
            if (data.hasOwnProperty("sync"))
              obj.sync = _ApiClient.ApiClient.convertToType(data["sync"], "String");
          }
          return obj;
        }
      }]);
      return InlineResponse4122;
    }();
    exports.InlineResponse412 = InlineResponse412;
    InlineResponse412.prototype.errors = void 0;
    InlineResponse412.prototype.sync = void 0;
  }
});

// node_modules/asana/dist/model/JobBaseNewProject.js
var require_JobBaseNewProject = __commonJS({
  "node_modules/asana/dist/model/JobBaseNewProject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobBaseNewProject = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobBaseNewProject = /* @__PURE__ */ function() {
      function JobBaseNewProject2() {
        _classCallCheck(this, JobBaseNewProject2);
      }
      _createClass(JobBaseNewProject2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new JobBaseNewProject2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return JobBaseNewProject2;
    }();
    exports.JobBaseNewProject = JobBaseNewProject;
    JobBaseNewProject.prototype.gid = void 0;
    JobBaseNewProject.prototype.resource_type = void 0;
    JobBaseNewProject.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/JobBaseNewProjectTemplate.js
var require_JobBaseNewProjectTemplate = __commonJS({
  "node_modules/asana/dist/model/JobBaseNewProjectTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobBaseNewProjectTemplate = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobBaseNewProjectTemplate = /* @__PURE__ */ function() {
      function JobBaseNewProjectTemplate2() {
        _classCallCheck(this, JobBaseNewProjectTemplate2);
      }
      _createClass(JobBaseNewProjectTemplate2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new JobBaseNewProjectTemplate2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return JobBaseNewProjectTemplate2;
    }();
    exports.JobBaseNewProjectTemplate = JobBaseNewProjectTemplate;
    JobBaseNewProjectTemplate.prototype.gid = void 0;
    JobBaseNewProjectTemplate.prototype.resource_type = void 0;
    JobBaseNewProjectTemplate.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/JobBaseNewTask.js
var require_JobBaseNewTask = __commonJS({
  "node_modules/asana/dist/model/JobBaseNewTask.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobBaseNewTask = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobBaseNewTask = /* @__PURE__ */ function() {
      function JobBaseNewTask2() {
        _classCallCheck(this, JobBaseNewTask2);
      }
      _createClass(JobBaseNewTask2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new JobBaseNewTask2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
          }
          return obj;
        }
      }]);
      return JobBaseNewTask2;
    }();
    exports.JobBaseNewTask = JobBaseNewTask;
    JobBaseNewTask.prototype.gid = void 0;
    JobBaseNewTask.prototype.resource_type = void 0;
    JobBaseNewTask.prototype.name = void 0;
    JobBaseNewTask.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    JobBaseNewTask.prototype.resource_subtype = void 0;
    JobBaseNewTask.prototype.created_by = void 0;
  }
});

// node_modules/asana/dist/model/JobBase.js
var require_JobBase = __commonJS({
  "node_modules/asana/dist/model/JobBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobBase = void 0;
    var _ApiClient = require_ApiClient();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _JobBaseNewProjectTemplate = require_JobBaseNewProjectTemplate();
    var _JobBaseNewTask = require_JobBaseNewTask();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobBase = /* @__PURE__ */ function() {
      function JobBase2() {
        _classCallCheck(this, JobBase2);
      }
      _createClass(JobBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new JobBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("status"))
              obj.status = _ApiClient.ApiClient.convertToType(data["status"], "String");
            if (data.hasOwnProperty("new_project"))
              obj.new_project = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["new_project"]);
            if (data.hasOwnProperty("new_task"))
              obj.new_task = _JobBaseNewTask.JobBaseNewTask.constructFromObject(data["new_task"]);
            if (data.hasOwnProperty("new_project_template"))
              obj.new_project_template = _JobBaseNewProjectTemplate.JobBaseNewProjectTemplate.constructFromObject(data["new_project_template"]);
          }
          return obj;
        }
      }]);
      return JobBase2;
    }();
    exports.JobBase = JobBase;
    JobBase.prototype.gid = void 0;
    JobBase.prototype.resource_type = void 0;
    JobBase.prototype.resource_subtype = void 0;
    JobBase.StatusEnum = {
      /**
       * value: "not_started"
       * @const
       */
      not_started: "not_started",
      /**
       * value: "in_progress"
       * @const
       */
      in_progress: "in_progress",
      /**
       * value: "succeeded"
       * @const
       */
      succeeded: "succeeded",
      /**
       * value: "failed"
       * @const
       */
      failed: "failed"
    };
    JobBase.prototype.status = void 0;
    JobBase.prototype.new_project = void 0;
    JobBase.prototype.new_task = void 0;
    JobBase.prototype.new_project_template = void 0;
  }
});

// node_modules/asana/dist/model/JobCompact.js
var require_JobCompact = __commonJS({
  "node_modules/asana/dist/model/JobCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _JobBaseNewProjectTemplate = require_JobBaseNewProjectTemplate();
    var _JobBaseNewTask = require_JobBaseNewTask();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobCompact = /* @__PURE__ */ function() {
      function JobCompact2() {
        _classCallCheck(this, JobCompact2);
      }
      _createClass(JobCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new JobCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("status"))
              obj.status = _ApiClient.ApiClient.convertToType(data["status"], "String");
            if (data.hasOwnProperty("new_project"))
              obj.new_project = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["new_project"]);
            if (data.hasOwnProperty("new_task"))
              obj.new_task = _JobBaseNewTask.JobBaseNewTask.constructFromObject(data["new_task"]);
            if (data.hasOwnProperty("new_project_template"))
              obj.new_project_template = _JobBaseNewProjectTemplate.JobBaseNewProjectTemplate.constructFromObject(data["new_project_template"]);
          }
          return obj;
        }
      }]);
      return JobCompact2;
    }();
    exports.JobCompact = JobCompact;
    JobCompact.prototype.gid = void 0;
    JobCompact.prototype.resource_type = void 0;
    JobCompact.prototype.resource_subtype = void 0;
    JobCompact.StatusEnum = {
      /**
       * value: "not_started"
       * @const
       */
      not_started: "not_started",
      /**
       * value: "in_progress"
       * @const
       */
      in_progress: "in_progress",
      /**
       * value: "succeeded"
       * @const
       */
      succeeded: "succeeded",
      /**
       * value: "failed"
       * @const
       */
      failed: "failed"
    };
    JobCompact.prototype.status = void 0;
    JobCompact.prototype.new_project = void 0;
    JobCompact.prototype.new_task = void 0;
    JobCompact.prototype.new_project_template = void 0;
  }
});

// node_modules/asana/dist/model/JobResponse.js
var require_JobResponse = __commonJS({
  "node_modules/asana/dist/model/JobResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _JobBaseNewProjectTemplate = require_JobBaseNewProjectTemplate();
    var _JobBaseNewTask = require_JobBaseNewTask();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobResponse = /* @__PURE__ */ function() {
      function JobResponse2() {
        _classCallCheck(this, JobResponse2);
      }
      _createClass(JobResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new JobResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("status"))
              obj.status = _ApiClient.ApiClient.convertToType(data["status"], "String");
            if (data.hasOwnProperty("new_project"))
              obj.new_project = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["new_project"]);
            if (data.hasOwnProperty("new_task"))
              obj.new_task = _JobBaseNewTask.JobBaseNewTask.constructFromObject(data["new_task"]);
            if (data.hasOwnProperty("new_project_template"))
              obj.new_project_template = _JobBaseNewProjectTemplate.JobBaseNewProjectTemplate.constructFromObject(data["new_project_template"]);
          }
          return obj;
        }
      }]);
      return JobResponse2;
    }();
    exports.JobResponse = JobResponse;
    JobResponse.prototype.gid = void 0;
    JobResponse.prototype.resource_type = void 0;
    JobResponse.prototype.resource_subtype = void 0;
    JobResponse.StatusEnum = {
      /**
       * value: "not_started"
       * @const
       */
      not_started: "not_started",
      /**
       * value: "in_progress"
       * @const
       */
      in_progress: "in_progress",
      /**
       * value: "succeeded"
       * @const
       */
      succeeded: "succeeded",
      /**
       * value: "failed"
       * @const
       */
      failed: "failed"
    };
    JobResponse.prototype.status = void 0;
    JobResponse.prototype.new_project = void 0;
    JobResponse.prototype.new_task = void 0;
    JobResponse.prototype.new_project_template = void 0;
  }
});

// node_modules/asana/dist/model/JobResponseData.js
var require_JobResponseData = __commonJS({
  "node_modules/asana/dist/model/JobResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _JobResponse = require_JobResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobResponseData = /* @__PURE__ */ function() {
      function JobResponseData2(data) {
        _classCallCheck(this, JobResponseData2);
        this.data = data;
      }
      _createClass(JobResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new JobResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _JobResponse.JobResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return JobResponseData2;
    }();
    exports.JobResponseData = JobResponseData;
    JobResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/Like.js
var require_Like = __commonJS({
  "node_modules/asana/dist/model/Like.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Like = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var Like = /* @__PURE__ */ function() {
      function Like2() {
        _classCallCheck(this, Like2);
      }
      _createClass(Like2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Like2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
          }
          return obj;
        }
      }]);
      return Like2;
    }();
    exports.Like = Like;
    Like.prototype.gid = void 0;
    Like.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/MemberCompact.js
var require_MemberCompact = __commonJS({
  "node_modules/asana/dist/model/MemberCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MemberCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MemberCompact = /* @__PURE__ */ function() {
      function MemberCompact2() {
        _classCallCheck(this, MemberCompact2);
      }
      _createClass(MemberCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MemberCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return MemberCompact2;
    }();
    exports.MemberCompact = MemberCompact;
    MemberCompact.prototype.gid = void 0;
    MemberCompact.prototype.resource_type = void 0;
    MemberCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/MembershipCompact.js
var require_MembershipCompact = __commonJS({
  "node_modules/asana/dist/model/MembershipCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipCompact = /* @__PURE__ */ function() {
      function MembershipCompact2() {
        _classCallCheck(this, MembershipCompact2);
      }
      _createClass(MembershipCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipCompact2();
          }
          return obj;
        }
      }]);
      return MembershipCompact2;
    }();
    exports.MembershipCompact = MembershipCompact;
  }
});

// node_modules/asana/dist/model/MembershipRequest.js
var require_MembershipRequest = __commonJS({
  "node_modules/asana/dist/model/MembershipRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipRequest = /* @__PURE__ */ function() {
      function MembershipRequest2() {
        _classCallCheck(this, MembershipRequest2);
      }
      _createClass(MembershipRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipRequest2();
            if (data.hasOwnProperty("is_active"))
              obj.is_active = _ApiClient.ApiClient.convertToType(data["is_active"], "Boolean");
          }
          return obj;
        }
      }]);
      return MembershipRequest2;
    }();
    exports.MembershipRequest = MembershipRequest;
    MembershipRequest.prototype.is_active = void 0;
  }
});

// node_modules/asana/dist/model/MembershipResponse.js
var require_MembershipResponse = __commonJS({
  "node_modules/asana/dist/model/MembershipResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipResponse = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipResponse = /* @__PURE__ */ function() {
      function MembershipResponse2() {
        _classCallCheck(this, MembershipResponse2);
      }
      _createClass(MembershipResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipResponse2();
          }
          return obj;
        }
      }]);
      return MembershipResponse2;
    }();
    exports.MembershipResponse = MembershipResponse;
  }
});

// node_modules/asana/dist/model/MembershipResponseArray.js
var require_MembershipResponseArray = __commonJS({
  "node_modules/asana/dist/model/MembershipResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _MembershipResponse = require_MembershipResponse();
    var _NextPage = require_NextPage();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipResponseArray = /* @__PURE__ */ function() {
      function MembershipResponseArray2(data) {
        _classCallCheck(this, MembershipResponseArray2);
        this.data = data;
      }
      _createClass(MembershipResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_MembershipResponse.MembershipResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return MembershipResponseArray2;
    }();
    exports.MembershipResponseArray = MembershipResponseArray;
    MembershipResponseArray.prototype.data = void 0;
    MembershipResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/MembershipResponseData.js
var require_MembershipResponseData = __commonJS({
  "node_modules/asana/dist/model/MembershipResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _MembershipResponse = require_MembershipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipResponseData = /* @__PURE__ */ function() {
      function MembershipResponseData2(data) {
        _classCallCheck(this, MembershipResponseData2);
        this.data = data;
      }
      _createClass(MembershipResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _MembershipResponse.MembershipResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return MembershipResponseData2;
    }();
    exports.MembershipResponseData = MembershipResponseData;
    MembershipResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/MembershipsBody.js
var require_MembershipsBody = __commonJS({
  "node_modules/asana/dist/model/MembershipsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _CreateMembershipRequest = require_CreateMembershipRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipsBody = /* @__PURE__ */ function() {
      function MembershipsBody2() {
        _classCallCheck(this, MembershipsBody2);
      }
      _createClass(MembershipsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new MembershipsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _CreateMembershipRequest.CreateMembershipRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return MembershipsBody2;
    }();
    exports.MembershipsBody = MembershipsBody;
    MembershipsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ModifyDependenciesRequest.js
var require_ModifyDependenciesRequest = __commonJS({
  "node_modules/asana/dist/model/ModifyDependenciesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModifyDependenciesRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ModifyDependenciesRequest = /* @__PURE__ */ function() {
      function ModifyDependenciesRequest2() {
        _classCallCheck(this, ModifyDependenciesRequest2);
      }
      _createClass(ModifyDependenciesRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ModifyDependenciesRequest2();
            if (data.hasOwnProperty("dependencies"))
              obj.dependencies = _ApiClient.ApiClient.convertToType(data["dependencies"], ["String"]);
          }
          return obj;
        }
      }]);
      return ModifyDependenciesRequest2;
    }();
    exports.ModifyDependenciesRequest = ModifyDependenciesRequest;
    ModifyDependenciesRequest.prototype.dependencies = void 0;
  }
});

// node_modules/asana/dist/model/ModifyDependentsRequest.js
var require_ModifyDependentsRequest = __commonJS({
  "node_modules/asana/dist/model/ModifyDependentsRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModifyDependentsRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ModifyDependentsRequest = /* @__PURE__ */ function() {
      function ModifyDependentsRequest2() {
        _classCallCheck(this, ModifyDependentsRequest2);
      }
      _createClass(ModifyDependentsRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ModifyDependentsRequest2();
            if (data.hasOwnProperty("dependents"))
              obj.dependents = _ApiClient.ApiClient.convertToType(data["dependents"], ["String"]);
          }
          return obj;
        }
      }]);
      return ModifyDependentsRequest2;
    }();
    exports.ModifyDependentsRequest = ModifyDependentsRequest;
    ModifyDependentsRequest.prototype.dependents = void 0;
  }
});

// node_modules/asana/dist/model/OrganizationExportBase.js
var require_OrganizationExportBase = __commonJS({
  "node_modules/asana/dist/model/OrganizationExportBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OrganizationExportBase = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var OrganizationExportBase = /* @__PURE__ */ function() {
      function OrganizationExportBase2() {
        _classCallCheck(this, OrganizationExportBase2);
      }
      _createClass(OrganizationExportBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new OrganizationExportBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("download_url"))
              obj.download_url = _ApiClient.ApiClient.convertToType(data["download_url"], "String");
            if (data.hasOwnProperty("state"))
              obj.state = _ApiClient.ApiClient.convertToType(data["state"], "String");
            if (data.hasOwnProperty("organization"))
              obj.organization = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["organization"]);
          }
          return obj;
        }
      }]);
      return OrganizationExportBase2;
    }();
    exports.OrganizationExportBase = OrganizationExportBase;
    OrganizationExportBase.prototype.gid = void 0;
    OrganizationExportBase.prototype.resource_type = void 0;
    OrganizationExportBase.prototype.created_at = void 0;
    OrganizationExportBase.prototype.download_url = void 0;
    OrganizationExportBase.StateEnum = {
      /**
       * value: "pending"
       * @const
       */
      pending: "pending",
      /**
       * value: "started"
       * @const
       */
      started: "started",
      /**
       * value: "finished"
       * @const
       */
      finished: "finished",
      /**
       * value: "error"
       * @const
       */
      error: "error"
    };
    OrganizationExportBase.prototype.state = void 0;
    OrganizationExportBase.prototype.organization = void 0;
  }
});

// node_modules/asana/dist/model/OrganizationExportCompact.js
var require_OrganizationExportCompact = __commonJS({
  "node_modules/asana/dist/model/OrganizationExportCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OrganizationExportCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var OrganizationExportCompact = /* @__PURE__ */ function() {
      function OrganizationExportCompact2() {
        _classCallCheck(this, OrganizationExportCompact2);
      }
      _createClass(OrganizationExportCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new OrganizationExportCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("download_url"))
              obj.download_url = _ApiClient.ApiClient.convertToType(data["download_url"], "String");
            if (data.hasOwnProperty("state"))
              obj.state = _ApiClient.ApiClient.convertToType(data["state"], "String");
            if (data.hasOwnProperty("organization"))
              obj.organization = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["organization"]);
          }
          return obj;
        }
      }]);
      return OrganizationExportCompact2;
    }();
    exports.OrganizationExportCompact = OrganizationExportCompact;
    OrganizationExportCompact.prototype.gid = void 0;
    OrganizationExportCompact.prototype.resource_type = void 0;
    OrganizationExportCompact.prototype.created_at = void 0;
    OrganizationExportCompact.prototype.download_url = void 0;
    OrganizationExportCompact.StateEnum = {
      /**
       * value: "pending"
       * @const
       */
      pending: "pending",
      /**
       * value: "started"
       * @const
       */
      started: "started",
      /**
       * value: "finished"
       * @const
       */
      finished: "finished",
      /**
       * value: "error"
       * @const
       */
      error: "error"
    };
    OrganizationExportCompact.prototype.state = void 0;
    OrganizationExportCompact.prototype.organization = void 0;
  }
});

// node_modules/asana/dist/model/OrganizationExportRequest.js
var require_OrganizationExportRequest = __commonJS({
  "node_modules/asana/dist/model/OrganizationExportRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OrganizationExportRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var OrganizationExportRequest = /* @__PURE__ */ function() {
      function OrganizationExportRequest2() {
        _classCallCheck(this, OrganizationExportRequest2);
      }
      _createClass(OrganizationExportRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new OrganizationExportRequest2();
            if (data.hasOwnProperty("organization"))
              obj.organization = _ApiClient.ApiClient.convertToType(data["organization"], "String");
          }
          return obj;
        }
      }]);
      return OrganizationExportRequest2;
    }();
    exports.OrganizationExportRequest = OrganizationExportRequest;
    OrganizationExportRequest.prototype.organization = void 0;
  }
});

// node_modules/asana/dist/model/OrganizationExportResponse.js
var require_OrganizationExportResponse = __commonJS({
  "node_modules/asana/dist/model/OrganizationExportResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OrganizationExportResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var OrganizationExportResponse = /* @__PURE__ */ function() {
      function OrganizationExportResponse2() {
        _classCallCheck(this, OrganizationExportResponse2);
      }
      _createClass(OrganizationExportResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new OrganizationExportResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("download_url"))
              obj.download_url = _ApiClient.ApiClient.convertToType(data["download_url"], "String");
            if (data.hasOwnProperty("state"))
              obj.state = _ApiClient.ApiClient.convertToType(data["state"], "String");
            if (data.hasOwnProperty("organization"))
              obj.organization = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["organization"]);
          }
          return obj;
        }
      }]);
      return OrganizationExportResponse2;
    }();
    exports.OrganizationExportResponse = OrganizationExportResponse;
    OrganizationExportResponse.prototype.gid = void 0;
    OrganizationExportResponse.prototype.resource_type = void 0;
    OrganizationExportResponse.prototype.created_at = void 0;
    OrganizationExportResponse.prototype.download_url = void 0;
    OrganizationExportResponse.StateEnum = {
      /**
       * value: "pending"
       * @const
       */
      pending: "pending",
      /**
       * value: "started"
       * @const
       */
      started: "started",
      /**
       * value: "finished"
       * @const
       */
      finished: "finished",
      /**
       * value: "error"
       * @const
       */
      error: "error"
    };
    OrganizationExportResponse.prototype.state = void 0;
    OrganizationExportResponse.prototype.organization = void 0;
  }
});

// node_modules/asana/dist/model/OrganizationExportResponseData.js
var require_OrganizationExportResponseData = __commonJS({
  "node_modules/asana/dist/model/OrganizationExportResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OrganizationExportResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _OrganizationExportResponse = require_OrganizationExportResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var OrganizationExportResponseData = /* @__PURE__ */ function() {
      function OrganizationExportResponseData2(data) {
        _classCallCheck(this, OrganizationExportResponseData2);
        this.data = data;
      }
      _createClass(OrganizationExportResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new OrganizationExportResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _OrganizationExportResponse.OrganizationExportResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return OrganizationExportResponseData2;
    }();
    exports.OrganizationExportResponseData = OrganizationExportResponseData;
    OrganizationExportResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/OrganizationExportsBody.js
var require_OrganizationExportsBody = __commonJS({
  "node_modules/asana/dist/model/OrganizationExportsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OrganizationExportsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _OrganizationExportRequest = require_OrganizationExportRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var OrganizationExportsBody = /* @__PURE__ */ function() {
      function OrganizationExportsBody2() {
        _classCallCheck(this, OrganizationExportsBody2);
      }
      _createClass(OrganizationExportsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new OrganizationExportsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _OrganizationExportRequest.OrganizationExportRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return OrganizationExportsBody2;
    }();
    exports.OrganizationExportsBody = OrganizationExportsBody;
    OrganizationExportsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioAddItemRequest.js
var require_PortfolioAddItemRequest = __commonJS({
  "node_modules/asana/dist/model/PortfolioAddItemRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioAddItemRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioAddItemRequest = /* @__PURE__ */ function() {
      function PortfolioAddItemRequest2(item) {
        _classCallCheck(this, PortfolioAddItemRequest2);
        this.item = item;
      }
      _createClass(PortfolioAddItemRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioAddItemRequest2();
            if (data.hasOwnProperty("item"))
              obj.item = _ApiClient.ApiClient.convertToType(data["item"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioAddItemRequest2;
    }();
    exports.PortfolioAddItemRequest = PortfolioAddItemRequest;
    PortfolioAddItemRequest.prototype.item = void 0;
    PortfolioAddItemRequest.prototype.insert_before = void 0;
    PortfolioAddItemRequest.prototype.insert_after = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioBase.js
var require_PortfolioBase = __commonJS({
  "node_modules/asana/dist/model/PortfolioBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioBase = /* @__PURE__ */ function() {
      function PortfolioBase2() {
        _classCallCheck(this, PortfolioBase2);
      }
      _createClass(PortfolioBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioBase2;
    }();
    exports.PortfolioBase = PortfolioBase;
    PortfolioBase.prototype.gid = void 0;
    PortfolioBase.prototype.resource_type = void 0;
    PortfolioBase.prototype.name = void 0;
    PortfolioBase.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray"
    };
    PortfolioBase.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioCompact.js
var require_PortfolioCompact = __commonJS({
  "node_modules/asana/dist/model/PortfolioCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioCompact = /* @__PURE__ */ function() {
      function PortfolioCompact2() {
        _classCallCheck(this, PortfolioCompact2);
      }
      _createClass(PortfolioCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioCompact2;
    }();
    exports.PortfolioCompact = PortfolioCompact;
    PortfolioCompact.prototype.gid = void 0;
    PortfolioCompact.prototype.resource_type = void 0;
    PortfolioCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioGidAddCustomFieldSettingBody.js
var require_PortfolioGidAddCustomFieldSettingBody = __commonJS({
  "node_modules/asana/dist/model/PortfolioGidAddCustomFieldSettingBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioGidAddCustomFieldSettingBody = void 0;
    var _ApiClient = require_ApiClient();
    var _AddCustomFieldSettingRequest = require_AddCustomFieldSettingRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioGidAddCustomFieldSettingBody = /* @__PURE__ */ function() {
      function PortfolioGidAddCustomFieldSettingBody2() {
        _classCallCheck(this, PortfolioGidAddCustomFieldSettingBody2);
      }
      _createClass(PortfolioGidAddCustomFieldSettingBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioGidAddCustomFieldSettingBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _AddCustomFieldSettingRequest.AddCustomFieldSettingRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioGidAddCustomFieldSettingBody2;
    }();
    exports.PortfolioGidAddCustomFieldSettingBody = PortfolioGidAddCustomFieldSettingBody;
    PortfolioGidAddCustomFieldSettingBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioGidAddItemBody.js
var require_PortfolioGidAddItemBody = __commonJS({
  "node_modules/asana/dist/model/PortfolioGidAddItemBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioGidAddItemBody = void 0;
    var _ApiClient = require_ApiClient();
    var _PortfolioAddItemRequest = require_PortfolioAddItemRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioGidAddItemBody = /* @__PURE__ */ function() {
      function PortfolioGidAddItemBody2() {
        _classCallCheck(this, PortfolioGidAddItemBody2);
      }
      _createClass(PortfolioGidAddItemBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioGidAddItemBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _PortfolioAddItemRequest.PortfolioAddItemRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioGidAddItemBody2;
    }();
    exports.PortfolioGidAddItemBody = PortfolioGidAddItemBody;
    PortfolioGidAddItemBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioGidAddMembersBody.js
var require_PortfolioGidAddMembersBody = __commonJS({
  "node_modules/asana/dist/model/PortfolioGidAddMembersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioGidAddMembersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _AddMembersRequest = require_AddMembersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioGidAddMembersBody = /* @__PURE__ */ function() {
      function PortfolioGidAddMembersBody2() {
        _classCallCheck(this, PortfolioGidAddMembersBody2);
      }
      _createClass(PortfolioGidAddMembersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioGidAddMembersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _AddMembersRequest.AddMembersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioGidAddMembersBody2;
    }();
    exports.PortfolioGidAddMembersBody = PortfolioGidAddMembersBody;
    PortfolioGidAddMembersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/RemoveCustomFieldSettingRequest.js
var require_RemoveCustomFieldSettingRequest = __commonJS({
  "node_modules/asana/dist/model/RemoveCustomFieldSettingRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RemoveCustomFieldSettingRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RemoveCustomFieldSettingRequest = /* @__PURE__ */ function() {
      function RemoveCustomFieldSettingRequest2(custom_field) {
        _classCallCheck(this, RemoveCustomFieldSettingRequest2);
        this.custom_field = custom_field;
      }
      _createClass(RemoveCustomFieldSettingRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RemoveCustomFieldSettingRequest2();
            if (data.hasOwnProperty("custom_field"))
              obj.custom_field = _ApiClient.ApiClient.convertToType(data["custom_field"], "String");
          }
          return obj;
        }
      }]);
      return RemoveCustomFieldSettingRequest2;
    }();
    exports.RemoveCustomFieldSettingRequest = RemoveCustomFieldSettingRequest;
    RemoveCustomFieldSettingRequest.prototype.custom_field = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioGidRemoveCustomFieldSettingBody.js
var require_PortfolioGidRemoveCustomFieldSettingBody = __commonJS({
  "node_modules/asana/dist/model/PortfolioGidRemoveCustomFieldSettingBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioGidRemoveCustomFieldSettingBody = void 0;
    var _ApiClient = require_ApiClient();
    var _RemoveCustomFieldSettingRequest = require_RemoveCustomFieldSettingRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioGidRemoveCustomFieldSettingBody = /* @__PURE__ */ function() {
      function PortfolioGidRemoveCustomFieldSettingBody2() {
        _classCallCheck(this, PortfolioGidRemoveCustomFieldSettingBody2);
      }
      _createClass(PortfolioGidRemoveCustomFieldSettingBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioGidRemoveCustomFieldSettingBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _RemoveCustomFieldSettingRequest.RemoveCustomFieldSettingRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioGidRemoveCustomFieldSettingBody2;
    }();
    exports.PortfolioGidRemoveCustomFieldSettingBody = PortfolioGidRemoveCustomFieldSettingBody;
    PortfolioGidRemoveCustomFieldSettingBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioRemoveItemRequest.js
var require_PortfolioRemoveItemRequest = __commonJS({
  "node_modules/asana/dist/model/PortfolioRemoveItemRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioRemoveItemRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioRemoveItemRequest = /* @__PURE__ */ function() {
      function PortfolioRemoveItemRequest2(item) {
        _classCallCheck(this, PortfolioRemoveItemRequest2);
        this.item = item;
      }
      _createClass(PortfolioRemoveItemRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioRemoveItemRequest2();
            if (data.hasOwnProperty("item"))
              obj.item = _ApiClient.ApiClient.convertToType(data["item"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioRemoveItemRequest2;
    }();
    exports.PortfolioRemoveItemRequest = PortfolioRemoveItemRequest;
    PortfolioRemoveItemRequest.prototype.item = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioGidRemoveItemBody.js
var require_PortfolioGidRemoveItemBody = __commonJS({
  "node_modules/asana/dist/model/PortfolioGidRemoveItemBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioGidRemoveItemBody = void 0;
    var _ApiClient = require_ApiClient();
    var _PortfolioRemoveItemRequest = require_PortfolioRemoveItemRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioGidRemoveItemBody = /* @__PURE__ */ function() {
      function PortfolioGidRemoveItemBody2() {
        _classCallCheck(this, PortfolioGidRemoveItemBody2);
      }
      _createClass(PortfolioGidRemoveItemBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioGidRemoveItemBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _PortfolioRemoveItemRequest.PortfolioRemoveItemRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioGidRemoveItemBody2;
    }();
    exports.PortfolioGidRemoveItemBody = PortfolioGidRemoveItemBody;
    PortfolioGidRemoveItemBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/RemoveMembersRequest.js
var require_RemoveMembersRequest = __commonJS({
  "node_modules/asana/dist/model/RemoveMembersRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RemoveMembersRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RemoveMembersRequest = /* @__PURE__ */ function() {
      function RemoveMembersRequest2(members) {
        _classCallCheck(this, RemoveMembersRequest2);
        this.members = members;
      }
      _createClass(RemoveMembersRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RemoveMembersRequest2();
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], "String");
          }
          return obj;
        }
      }]);
      return RemoveMembersRequest2;
    }();
    exports.RemoveMembersRequest = RemoveMembersRequest;
    RemoveMembersRequest.prototype.members = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioGidRemoveMembersBody.js
var require_PortfolioGidRemoveMembersBody = __commonJS({
  "node_modules/asana/dist/model/PortfolioGidRemoveMembersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioGidRemoveMembersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _RemoveMembersRequest = require_RemoveMembersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioGidRemoveMembersBody = /* @__PURE__ */ function() {
      function PortfolioGidRemoveMembersBody2() {
        _classCallCheck(this, PortfolioGidRemoveMembersBody2);
      }
      _createClass(PortfolioGidRemoveMembersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioGidRemoveMembersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _RemoveMembersRequest.RemoveMembersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioGidRemoveMembersBody2;
    }();
    exports.PortfolioGidRemoveMembersBody = PortfolioGidRemoveMembersBody;
    PortfolioGidRemoveMembersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioMembershipBasePortfolio.js
var require_PortfolioMembershipBasePortfolio = __commonJS({
  "node_modules/asana/dist/model/PortfolioMembershipBasePortfolio.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioMembershipBasePortfolio = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioMembershipBasePortfolio = /* @__PURE__ */ function() {
      function PortfolioMembershipBasePortfolio2() {
        _classCallCheck(this, PortfolioMembershipBasePortfolio2);
      }
      _createClass(PortfolioMembershipBasePortfolio2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioMembershipBasePortfolio2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioMembershipBasePortfolio2;
    }();
    exports.PortfolioMembershipBasePortfolio = PortfolioMembershipBasePortfolio;
    PortfolioMembershipBasePortfolio.prototype.gid = void 0;
    PortfolioMembershipBasePortfolio.prototype.resource_type = void 0;
    PortfolioMembershipBasePortfolio.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioMembershipBase.js
var require_PortfolioMembershipBase = __commonJS({
  "node_modules/asana/dist/model/PortfolioMembershipBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioMembershipBase = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _PortfolioMembershipBasePortfolio = require_PortfolioMembershipBasePortfolio();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioMembershipBase = /* @__PURE__ */ function() {
      function PortfolioMembershipBase2() {
        _classCallCheck(this, PortfolioMembershipBase2);
      }
      _createClass(PortfolioMembershipBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioMembershipBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("portfolio"))
              obj.portfolio = _PortfolioMembershipBasePortfolio.PortfolioMembershipBasePortfolio.constructFromObject(data["portfolio"]);
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
          }
          return obj;
        }
      }]);
      return PortfolioMembershipBase2;
    }();
    exports.PortfolioMembershipBase = PortfolioMembershipBase;
    PortfolioMembershipBase.prototype.gid = void 0;
    PortfolioMembershipBase.prototype.resource_type = void 0;
    PortfolioMembershipBase.prototype.portfolio = void 0;
    PortfolioMembershipBase.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioMembershipCompact.js
var require_PortfolioMembershipCompact = __commonJS({
  "node_modules/asana/dist/model/PortfolioMembershipCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioMembershipCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _PortfolioMembershipBasePortfolio = require_PortfolioMembershipBasePortfolio();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioMembershipCompact = /* @__PURE__ */ function() {
      function PortfolioMembershipCompact2() {
        _classCallCheck(this, PortfolioMembershipCompact2);
      }
      _createClass(PortfolioMembershipCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioMembershipCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("portfolio"))
              obj.portfolio = _PortfolioMembershipBasePortfolio.PortfolioMembershipBasePortfolio.constructFromObject(data["portfolio"]);
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
          }
          return obj;
        }
      }]);
      return PortfolioMembershipCompact2;
    }();
    exports.PortfolioMembershipCompact = PortfolioMembershipCompact;
    PortfolioMembershipCompact.prototype.gid = void 0;
    PortfolioMembershipCompact.prototype.resource_type = void 0;
    PortfolioMembershipCompact.prototype.portfolio = void 0;
    PortfolioMembershipCompact.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioMembershipResponse.js
var require_PortfolioMembershipResponse = __commonJS({
  "node_modules/asana/dist/model/PortfolioMembershipResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioMembershipResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _PortfolioMembershipBasePortfolio = require_PortfolioMembershipBasePortfolio();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioMembershipResponse = /* @__PURE__ */ function() {
      function PortfolioMembershipResponse2() {
        _classCallCheck(this, PortfolioMembershipResponse2);
      }
      _createClass(PortfolioMembershipResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioMembershipResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("portfolio"))
              obj.portfolio = _PortfolioMembershipBasePortfolio.PortfolioMembershipBasePortfolio.constructFromObject(data["portfolio"]);
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
          }
          return obj;
        }
      }]);
      return PortfolioMembershipResponse2;
    }();
    exports.PortfolioMembershipResponse = PortfolioMembershipResponse;
    PortfolioMembershipResponse.prototype.gid = void 0;
    PortfolioMembershipResponse.prototype.resource_type = void 0;
    PortfolioMembershipResponse.prototype.portfolio = void 0;
    PortfolioMembershipResponse.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioMembershipResponseArray.js
var require_PortfolioMembershipResponseArray = __commonJS({
  "node_modules/asana/dist/model/PortfolioMembershipResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioMembershipResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _PortfolioMembershipResponse = require_PortfolioMembershipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioMembershipResponseArray = /* @__PURE__ */ function() {
      function PortfolioMembershipResponseArray2(data) {
        _classCallCheck(this, PortfolioMembershipResponseArray2);
        this.data = data;
      }
      _createClass(PortfolioMembershipResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioMembershipResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_PortfolioMembershipResponse.PortfolioMembershipResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return PortfolioMembershipResponseArray2;
    }();
    exports.PortfolioMembershipResponseArray = PortfolioMembershipResponseArray;
    PortfolioMembershipResponseArray.prototype.data = void 0;
    PortfolioMembershipResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioMembershipResponseData.js
var require_PortfolioMembershipResponseData = __commonJS({
  "node_modules/asana/dist/model/PortfolioMembershipResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioMembershipResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _PortfolioMembershipResponse = require_PortfolioMembershipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioMembershipResponseData = /* @__PURE__ */ function() {
      function PortfolioMembershipResponseData2(data) {
        _classCallCheck(this, PortfolioMembershipResponseData2);
        this.data = data;
      }
      _createClass(PortfolioMembershipResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioMembershipResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _PortfolioMembershipResponse.PortfolioMembershipResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioMembershipResponseData2;
    }();
    exports.PortfolioMembershipResponseData = PortfolioMembershipResponseData;
    PortfolioMembershipResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioRequest.js
var require_PortfolioRequest = __commonJS({
  "node_modules/asana/dist/model/PortfolioRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioRequest = /* @__PURE__ */ function() {
      function PortfolioRequest2() {
        _classCallCheck(this, PortfolioRequest2);
      }
      _createClass(PortfolioRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], ["String"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
          }
          return obj;
        }
      }]);
      return PortfolioRequest2;
    }();
    exports.PortfolioRequest = PortfolioRequest;
    PortfolioRequest.prototype.gid = void 0;
    PortfolioRequest.prototype.resource_type = void 0;
    PortfolioRequest.prototype.name = void 0;
    PortfolioRequest.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray"
    };
    PortfolioRequest.prototype.color = void 0;
    PortfolioRequest.prototype.members = void 0;
    PortfolioRequest.prototype.workspace = void 0;
    PortfolioRequest.prototype._public = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioResponseCurrentStatusUpdate.js
var require_PortfolioResponseCurrentStatusUpdate = __commonJS({
  "node_modules/asana/dist/model/PortfolioResponseCurrentStatusUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioResponseCurrentStatusUpdate = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioResponseCurrentStatusUpdate = /* @__PURE__ */ function() {
      function PortfolioResponseCurrentStatusUpdate2() {
        _classCallCheck(this, PortfolioResponseCurrentStatusUpdate2);
      }
      _createClass(PortfolioResponseCurrentStatusUpdate2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioResponseCurrentStatusUpdate2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioResponseCurrentStatusUpdate2;
    }();
    exports.PortfolioResponseCurrentStatusUpdate = PortfolioResponseCurrentStatusUpdate;
    PortfolioResponseCurrentStatusUpdate.prototype.gid = void 0;
    PortfolioResponseCurrentStatusUpdate.prototype.resource_type = void 0;
    PortfolioResponseCurrentStatusUpdate.prototype.title = void 0;
    PortfolioResponseCurrentStatusUpdate.ResourceSubtypeEnum = {
      /**
       * value: "project_status_update"
       * @const
       */
      project_status_update: "project_status_update",
      /**
       * value: "portfolio_status_update"
       * @const
       */
      portfolio_status_update: "portfolio_status_update",
      /**
       * value: "goal_status_update"
       * @const
       */
      goal_status_update: "goal_status_update"
    };
    PortfolioResponseCurrentStatusUpdate.prototype.resource_subtype = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioResponseCustomFieldSettings.js
var require_PortfolioResponseCustomFieldSettings = __commonJS({
  "node_modules/asana/dist/model/PortfolioResponseCustomFieldSettings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioResponseCustomFieldSettings = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldSettingResponseCustomField = require_CustomFieldSettingResponseCustomField();
    var _CustomFieldSettingResponseParent = require_CustomFieldSettingResponseParent();
    var _CustomFieldSettingResponseProject = require_CustomFieldSettingResponseProject();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioResponseCustomFieldSettings = /* @__PURE__ */ function() {
      function PortfolioResponseCustomFieldSettings2() {
        _classCallCheck(this, PortfolioResponseCustomFieldSettings2);
      }
      _createClass(PortfolioResponseCustomFieldSettings2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioResponseCustomFieldSettings2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("project"))
              obj.project = _CustomFieldSettingResponseProject.CustomFieldSettingResponseProject.constructFromObject(data["project"]);
            if (data.hasOwnProperty("is_important"))
              obj.is_important = _ApiClient.ApiClient.convertToType(data["is_important"], "Boolean");
            if (data.hasOwnProperty("parent"))
              obj.parent = _CustomFieldSettingResponseParent.CustomFieldSettingResponseParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("custom_field"))
              obj.custom_field = _CustomFieldSettingResponseCustomField.CustomFieldSettingResponseCustomField.constructFromObject(data["custom_field"]);
          }
          return obj;
        }
      }]);
      return PortfolioResponseCustomFieldSettings2;
    }();
    exports.PortfolioResponseCustomFieldSettings = PortfolioResponseCustomFieldSettings;
    PortfolioResponseCustomFieldSettings.prototype.gid = void 0;
    PortfolioResponseCustomFieldSettings.prototype.resource_type = void 0;
    PortfolioResponseCustomFieldSettings.prototype.project = void 0;
    PortfolioResponseCustomFieldSettings.prototype.is_important = void 0;
    PortfolioResponseCustomFieldSettings.prototype.parent = void 0;
    PortfolioResponseCustomFieldSettings.prototype.custom_field = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioResponseCustomFields.js
var require_PortfolioResponseCustomFields = __commonJS({
  "node_modules/asana/dist/model/PortfolioResponseCustomFields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioResponseCustomFields = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioResponseCustomFields = /* @__PURE__ */ function() {
      function PortfolioResponseCustomFields2() {
        _classCallCheck(this, PortfolioResponseCustomFields2);
      }
      _createClass(PortfolioResponseCustomFields2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioResponseCustomFields2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioResponseCustomFields2;
    }();
    exports.PortfolioResponseCustomFields = PortfolioResponseCustomFields;
    PortfolioResponseCustomFields.prototype.gid = void 0;
    PortfolioResponseCustomFields.prototype.resource_type = void 0;
    PortfolioResponseCustomFields.prototype.name = void 0;
    PortfolioResponseCustomFields.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    PortfolioResponseCustomFields.prototype.resource_subtype = void 0;
    PortfolioResponseCustomFields.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    PortfolioResponseCustomFields.prototype.type = void 0;
    PortfolioResponseCustomFields.prototype.enum_options = void 0;
    PortfolioResponseCustomFields.prototype.enabled = void 0;
    PortfolioResponseCustomFields.prototype.is_formula_field = void 0;
    PortfolioResponseCustomFields.prototype.date_value = void 0;
    PortfolioResponseCustomFields.prototype.enum_value = void 0;
    PortfolioResponseCustomFields.prototype.multi_enum_values = void 0;
    PortfolioResponseCustomFields.prototype.number_value = void 0;
    PortfolioResponseCustomFields.prototype.text_value = void 0;
    PortfolioResponseCustomFields.prototype.display_value = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioResponseWorkspace.js
var require_PortfolioResponseWorkspace = __commonJS({
  "node_modules/asana/dist/model/PortfolioResponseWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioResponseWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioResponseWorkspace = /* @__PURE__ */ function() {
      function PortfolioResponseWorkspace2() {
        _classCallCheck(this, PortfolioResponseWorkspace2);
      }
      _createClass(PortfolioResponseWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioResponseWorkspace2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return PortfolioResponseWorkspace2;
    }();
    exports.PortfolioResponseWorkspace = PortfolioResponseWorkspace;
    PortfolioResponseWorkspace.prototype.gid = void 0;
    PortfolioResponseWorkspace.prototype.resource_type = void 0;
    PortfolioResponseWorkspace.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioResponse.js
var require_PortfolioResponse = __commonJS({
  "node_modules/asana/dist/model/PortfolioResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _JobBaseNewProjectTemplate = require_JobBaseNewProjectTemplate();
    var _PortfolioResponseCurrentStatusUpdate = require_PortfolioResponseCurrentStatusUpdate();
    var _PortfolioResponseCustomFieldSettings = require_PortfolioResponseCustomFieldSettings();
    var _PortfolioResponseCustomFields = require_PortfolioResponseCustomFields();
    var _PortfolioResponseWorkspace = require_PortfolioResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioResponse = /* @__PURE__ */ function() {
      function PortfolioResponse2() {
        _classCallCheck(this, PortfolioResponse2);
      }
      _createClass(PortfolioResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("custom_field_settings"))
              obj.custom_field_settings = _ApiClient.ApiClient.convertToType(data["custom_field_settings"], [_PortfolioResponseCustomFieldSettings.PortfolioResponseCustomFieldSettings]);
            if (data.hasOwnProperty("current_status_update"))
              obj.current_status_update = _PortfolioResponseCurrentStatusUpdate.PortfolioResponseCurrentStatusUpdate.constructFromObject(data["current_status_update"]);
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("custom_fields"))
              obj.custom_fields = _ApiClient.ApiClient.convertToType(data["custom_fields"], [_PortfolioResponseCustomFields.PortfolioResponseCustomFields]);
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("owner"))
              obj.owner = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["owner"]);
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _PortfolioResponseWorkspace.PortfolioResponseWorkspace.constructFromObject(data["workspace"]);
            if (data.hasOwnProperty("permalink_url"))
              obj.permalink_url = _ApiClient.ApiClient.convertToType(data["permalink_url"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("project_templates"))
              obj.project_templates = _ApiClient.ApiClient.convertToType(data["project_templates"], [_JobBaseNewProjectTemplate.JobBaseNewProjectTemplate]);
          }
          return obj;
        }
      }]);
      return PortfolioResponse2;
    }();
    exports.PortfolioResponse = PortfolioResponse;
    PortfolioResponse.prototype.gid = void 0;
    PortfolioResponse.prototype.resource_type = void 0;
    PortfolioResponse.prototype.name = void 0;
    PortfolioResponse.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray"
    };
    PortfolioResponse.prototype.color = void 0;
    PortfolioResponse.prototype.created_at = void 0;
    PortfolioResponse.prototype.created_by = void 0;
    PortfolioResponse.prototype.custom_field_settings = void 0;
    PortfolioResponse.prototype.current_status_update = void 0;
    PortfolioResponse.prototype.due_on = void 0;
    PortfolioResponse.prototype.custom_fields = void 0;
    PortfolioResponse.prototype.members = void 0;
    PortfolioResponse.prototype.owner = void 0;
    PortfolioResponse.prototype.start_on = void 0;
    PortfolioResponse.prototype.workspace = void 0;
    PortfolioResponse.prototype.permalink_url = void 0;
    PortfolioResponse.prototype._public = void 0;
    PortfolioResponse.prototype.project_templates = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioResponseArray.js
var require_PortfolioResponseArray = __commonJS({
  "node_modules/asana/dist/model/PortfolioResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _PortfolioResponse = require_PortfolioResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioResponseArray = /* @__PURE__ */ function() {
      function PortfolioResponseArray2(data) {
        _classCallCheck(this, PortfolioResponseArray2);
        this.data = data;
      }
      _createClass(PortfolioResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_PortfolioResponse.PortfolioResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return PortfolioResponseArray2;
    }();
    exports.PortfolioResponseArray = PortfolioResponseArray;
    PortfolioResponseArray.prototype.data = void 0;
    PortfolioResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/PortfolioResponseData.js
var require_PortfolioResponseData = __commonJS({
  "node_modules/asana/dist/model/PortfolioResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _PortfolioResponse = require_PortfolioResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioResponseData = /* @__PURE__ */ function() {
      function PortfolioResponseData2(data) {
        _classCallCheck(this, PortfolioResponseData2);
        this.data = data;
      }
      _createClass(PortfolioResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfolioResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _PortfolioResponse.PortfolioResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfolioResponseData2;
    }();
    exports.PortfolioResponseData = PortfolioResponseData;
    PortfolioResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfoliosBody.js
var require_PortfoliosBody = __commonJS({
  "node_modules/asana/dist/model/PortfoliosBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfoliosBody = void 0;
    var _ApiClient = require_ApiClient();
    var _PortfolioRequest = require_PortfolioRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfoliosBody = /* @__PURE__ */ function() {
      function PortfoliosBody2() {
        _classCallCheck(this, PortfoliosBody2);
      }
      _createClass(PortfoliosBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfoliosBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _PortfolioRequest.PortfolioRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfoliosBody2;
    }();
    exports.PortfoliosBody = PortfoliosBody;
    PortfoliosBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/PortfoliosPortfolioGidBody.js
var require_PortfoliosPortfolioGidBody = __commonJS({
  "node_modules/asana/dist/model/PortfoliosPortfolioGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfoliosPortfolioGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _PortfolioRequest = require_PortfolioRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfoliosPortfolioGidBody = /* @__PURE__ */ function() {
      function PortfoliosPortfolioGidBody2() {
        _classCallCheck(this, PortfoliosPortfolioGidBody2);
      }
      _createClass(PortfoliosPortfolioGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PortfoliosPortfolioGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _PortfolioRequest.PortfolioRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return PortfoliosPortfolioGidBody2;
    }();
    exports.PortfoliosPortfolioGidBody = PortfoliosPortfolioGidBody;
    PortfoliosPortfolioGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/Preview.js
var require_Preview = __commonJS({
  "node_modules/asana/dist/model/Preview.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Preview = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var Preview = /* @__PURE__ */ function() {
      function Preview2() {
        _classCallCheck(this, Preview2);
      }
      _createClass(Preview2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Preview2();
            if (data.hasOwnProperty("fallback"))
              obj.fallback = _ApiClient.ApiClient.convertToType(data["fallback"], "String");
            if (data.hasOwnProperty("footer"))
              obj.footer = _ApiClient.ApiClient.convertToType(data["footer"], "String");
            if (data.hasOwnProperty("header"))
              obj.header = _ApiClient.ApiClient.convertToType(data["header"], "String");
            if (data.hasOwnProperty("header_link"))
              obj.header_link = _ApiClient.ApiClient.convertToType(data["header_link"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("title_link"))
              obj.title_link = _ApiClient.ApiClient.convertToType(data["title_link"], "String");
          }
          return obj;
        }
      }]);
      return Preview2;
    }();
    exports.Preview = Preview;
    Preview.prototype.fallback = void 0;
    Preview.prototype.footer = void 0;
    Preview.prototype.header = void 0;
    Preview.prototype.header_link = void 0;
    Preview.prototype.html_text = void 0;
    Preview.prototype.text = void 0;
    Preview.prototype.title = void 0;
    Preview.prototype.title_link = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBaseCurrentStatus.js
var require_ProjectBaseCurrentStatus = __commonJS({
  "node_modules/asana/dist/model/ProjectBaseCurrentStatus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBaseCurrentStatus = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBaseCurrentStatus = /* @__PURE__ */ function() {
      function ProjectBaseCurrentStatus2(text, color) {
        _classCallCheck(this, ProjectBaseCurrentStatus2);
        this.text = text;
        this.color = color;
      }
      _createClass(ProjectBaseCurrentStatus2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBaseCurrentStatus2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("author"))
              obj.author = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["author"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
          }
          return obj;
        }
      }]);
      return ProjectBaseCurrentStatus2;
    }();
    exports.ProjectBaseCurrentStatus = ProjectBaseCurrentStatus;
    ProjectBaseCurrentStatus.prototype.gid = void 0;
    ProjectBaseCurrentStatus.prototype.resource_type = void 0;
    ProjectBaseCurrentStatus.prototype.title = void 0;
    ProjectBaseCurrentStatus.prototype.text = void 0;
    ProjectBaseCurrentStatus.prototype.html_text = void 0;
    ProjectBaseCurrentStatus.ColorEnum = {
      /**
       * value: "green"
       * @const
       */
      green: "green",
      /**
       * value: "yellow"
       * @const
       */
      yellow: "yellow",
      /**
       * value: "red"
       * @const
       */
      red: "red",
      /**
       * value: "blue"
       * @const
       */
      blue: "blue"
    };
    ProjectBaseCurrentStatus.prototype.color = void 0;
    ProjectBaseCurrentStatus.prototype.author = void 0;
    ProjectBaseCurrentStatus.prototype.created_at = void 0;
    ProjectBaseCurrentStatus.prototype.created_by = void 0;
    ProjectBaseCurrentStatus.prototype.modified_at = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBaseCurrentStatusUpdate.js
var require_ProjectBaseCurrentStatusUpdate = __commonJS({
  "node_modules/asana/dist/model/ProjectBaseCurrentStatusUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBaseCurrentStatusUpdate = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBaseCurrentStatusUpdate = /* @__PURE__ */ function() {
      function ProjectBaseCurrentStatusUpdate2() {
        _classCallCheck(this, ProjectBaseCurrentStatusUpdate2);
      }
      _createClass(ProjectBaseCurrentStatusUpdate2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBaseCurrentStatusUpdate2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
          }
          return obj;
        }
      }]);
      return ProjectBaseCurrentStatusUpdate2;
    }();
    exports.ProjectBaseCurrentStatusUpdate = ProjectBaseCurrentStatusUpdate;
    ProjectBaseCurrentStatusUpdate.prototype.gid = void 0;
    ProjectBaseCurrentStatusUpdate.prototype.resource_type = void 0;
    ProjectBaseCurrentStatusUpdate.prototype.title = void 0;
    ProjectBaseCurrentStatusUpdate.ResourceSubtypeEnum = {
      /**
       * value: "project_status_update"
       * @const
       */
      project_status_update: "project_status_update",
      /**
       * value: "portfolio_status_update"
       * @const
       */
      portfolio_status_update: "portfolio_status_update",
      /**
       * value: "goal_status_update"
       * @const
       */
      goal_status_update: "goal_status_update"
    };
    ProjectBaseCurrentStatusUpdate.prototype.resource_subtype = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBase.js
var require_ProjectBase = __commonJS({
  "node_modules/asana/dist/model/ProjectBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBase = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _PortfolioResponseCustomFieldSettings = require_PortfolioResponseCustomFieldSettings();
    var _ProjectBaseCurrentStatus = require_ProjectBaseCurrentStatus();
    var _ProjectBaseCurrentStatusUpdate = require_ProjectBaseCurrentStatusUpdate();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBase = /* @__PURE__ */ function() {
      function ProjectBase2() {
        _classCallCheck(this, ProjectBase2);
      }
      _createClass(ProjectBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("archived"))
              obj.archived = _ApiClient.ApiClient.convertToType(data["archived"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("current_status"))
              obj.current_status = _ProjectBaseCurrentStatus.ProjectBaseCurrentStatus.constructFromObject(data["current_status"]);
            if (data.hasOwnProperty("current_status_update"))
              obj.current_status_update = _ProjectBaseCurrentStatusUpdate.ProjectBaseCurrentStatusUpdate.constructFromObject(data["current_status_update"]);
            if (data.hasOwnProperty("custom_field_settings"))
              obj.custom_field_settings = _ApiClient.ApiClient.convertToType(data["custom_field_settings"], [_PortfolioResponseCustomFieldSettings.PortfolioResponseCustomFieldSettings]);
            if (data.hasOwnProperty("default_view"))
              obj.default_view = _ApiClient.ApiClient.convertToType(data["default_view"], "String");
            if (data.hasOwnProperty("due_date"))
              obj.due_date = _ApiClient.ApiClient.convertToType(data["due_date"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("default_access_level"))
              obj.default_access_level = _ApiClient.ApiClient.convertToType(data["default_access_level"], "String");
          }
          return obj;
        }
      }]);
      return ProjectBase2;
    }();
    exports.ProjectBase = ProjectBase;
    ProjectBase.prototype.gid = void 0;
    ProjectBase.prototype.resource_type = void 0;
    ProjectBase.prototype.name = void 0;
    ProjectBase.prototype.archived = void 0;
    ProjectBase.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "none"
       * @const
       */
      none: "none",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    ProjectBase.prototype.color = void 0;
    ProjectBase.prototype.created_at = void 0;
    ProjectBase.prototype.current_status = void 0;
    ProjectBase.prototype.current_status_update = void 0;
    ProjectBase.prototype.custom_field_settings = void 0;
    ProjectBase.DefaultViewEnum = {
      /**
       * value: "list"
       * @const
       */
      list: "list",
      /**
       * value: "board"
       * @const
       */
      board: "board",
      /**
       * value: "calendar"
       * @const
       */
      calendar: "calendar",
      /**
       * value: "timeline"
       * @const
       */
      timeline: "timeline"
    };
    ProjectBase.prototype.default_view = void 0;
    ProjectBase.prototype.due_date = void 0;
    ProjectBase.prototype.due_on = void 0;
    ProjectBase.prototype.html_notes = void 0;
    ProjectBase.prototype.members = void 0;
    ProjectBase.prototype.modified_at = void 0;
    ProjectBase.prototype.notes = void 0;
    ProjectBase.prototype._public = void 0;
    ProjectBase.prototype.start_on = void 0;
    ProjectBase.DefaultAccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectBase.prototype.default_access_level = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBriefBase.js
var require_ProjectBriefBase = __commonJS({
  "node_modules/asana/dist/model/ProjectBriefBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefBase = /* @__PURE__ */ function() {
      function ProjectBriefBase2() {
        _classCallCheck(this, ProjectBriefBase2);
      }
      _createClass(ProjectBriefBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBriefBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
          }
          return obj;
        }
      }]);
      return ProjectBriefBase2;
    }();
    exports.ProjectBriefBase = ProjectBriefBase;
    ProjectBriefBase.prototype.gid = void 0;
    ProjectBriefBase.prototype.resource_type = void 0;
    ProjectBriefBase.prototype.title = void 0;
    ProjectBriefBase.prototype.html_text = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBriefCompact.js
var require_ProjectBriefCompact = __commonJS({
  "node_modules/asana/dist/model/ProjectBriefCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefCompact = /* @__PURE__ */ function() {
      function ProjectBriefCompact2() {
        _classCallCheck(this, ProjectBriefCompact2);
      }
      _createClass(ProjectBriefCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBriefCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
          }
          return obj;
        }
      }]);
      return ProjectBriefCompact2;
    }();
    exports.ProjectBriefCompact = ProjectBriefCompact;
    ProjectBriefCompact.prototype.gid = void 0;
    ProjectBriefCompact.prototype.resource_type = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBriefRequest.js
var require_ProjectBriefRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectBriefRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefRequest = /* @__PURE__ */ function() {
      function ProjectBriefRequest2() {
        _classCallCheck(this, ProjectBriefRequest2);
      }
      _createClass(ProjectBriefRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBriefRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
          }
          return obj;
        }
      }]);
      return ProjectBriefRequest2;
    }();
    exports.ProjectBriefRequest = ProjectBriefRequest;
    ProjectBriefRequest.prototype.gid = void 0;
    ProjectBriefRequest.prototype.resource_type = void 0;
    ProjectBriefRequest.prototype.title = void 0;
    ProjectBriefRequest.prototype.html_text = void 0;
    ProjectBriefRequest.prototype.text = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBriefResponseProject.js
var require_ProjectBriefResponseProject = __commonJS({
  "node_modules/asana/dist/model/ProjectBriefResponseProject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefResponseProject = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefResponseProject = /* @__PURE__ */ function() {
      function ProjectBriefResponseProject2() {
        _classCallCheck(this, ProjectBriefResponseProject2);
      }
      _createClass(ProjectBriefResponseProject2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBriefResponseProject2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectBriefResponseProject2;
    }();
    exports.ProjectBriefResponseProject = ProjectBriefResponseProject;
    ProjectBriefResponseProject.prototype.gid = void 0;
    ProjectBriefResponseProject.prototype.resource_type = void 0;
    ProjectBriefResponseProject.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBriefResponse.js
var require_ProjectBriefResponse = __commonJS({
  "node_modules/asana/dist/model/ProjectBriefResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectBriefResponseProject = require_ProjectBriefResponseProject();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefResponse = /* @__PURE__ */ function() {
      function ProjectBriefResponse2() {
        _classCallCheck(this, ProjectBriefResponse2);
      }
      _createClass(ProjectBriefResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBriefResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("permalink_url"))
              obj.permalink_url = _ApiClient.ApiClient.convertToType(data["permalink_url"], "String");
            if (data.hasOwnProperty("project"))
              obj.project = _ProjectBriefResponseProject.ProjectBriefResponseProject.constructFromObject(data["project"]);
          }
          return obj;
        }
      }]);
      return ProjectBriefResponse2;
    }();
    exports.ProjectBriefResponse = ProjectBriefResponse;
    ProjectBriefResponse.prototype.gid = void 0;
    ProjectBriefResponse.prototype.resource_type = void 0;
    ProjectBriefResponse.prototype.title = void 0;
    ProjectBriefResponse.prototype.html_text = void 0;
    ProjectBriefResponse.prototype.text = void 0;
    ProjectBriefResponse.prototype.permalink_url = void 0;
    ProjectBriefResponse.prototype.project = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBriefResponseData.js
var require_ProjectBriefResponseData = __commonJS({
  "node_modules/asana/dist/model/ProjectBriefResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectBriefResponse = require_ProjectBriefResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefResponseData = /* @__PURE__ */ function() {
      function ProjectBriefResponseData2(data) {
        _classCallCheck(this, ProjectBriefResponseData2);
        this.data = data;
      }
      _createClass(ProjectBriefResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBriefResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectBriefResponse.ProjectBriefResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectBriefResponseData2;
    }();
    exports.ProjectBriefResponseData = ProjectBriefResponseData;
    ProjectBriefResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectBriefsProjectBriefGidBody.js
var require_ProjectBriefsProjectBriefGidBody = __commonJS({
  "node_modules/asana/dist/model/ProjectBriefsProjectBriefGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefsProjectBriefGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectBriefRequest = require_ProjectBriefRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefsProjectBriefGidBody = /* @__PURE__ */ function() {
      function ProjectBriefsProjectBriefGidBody2() {
        _classCallCheck(this, ProjectBriefsProjectBriefGidBody2);
      }
      _createClass(ProjectBriefsProjectBriefGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectBriefsProjectBriefGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectBriefRequest.ProjectBriefRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectBriefsProjectBriefGidBody2;
    }();
    exports.ProjectBriefsProjectBriefGidBody = ProjectBriefsProjectBriefGidBody;
    ProjectBriefsProjectBriefGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectCompact.js
var require_ProjectCompact = __commonJS({
  "node_modules/asana/dist/model/ProjectCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectCompact = /* @__PURE__ */ function() {
      function ProjectCompact2() {
        _classCallCheck(this, ProjectCompact2);
      }
      _createClass(ProjectCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectCompact2;
    }();
    exports.ProjectCompact = ProjectCompact;
    ProjectCompact.prototype.gid = void 0;
    ProjectCompact.prototype.resource_type = void 0;
    ProjectCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectDuplicateRequestScheduleDates.js
var require_ProjectDuplicateRequestScheduleDates = __commonJS({
  "node_modules/asana/dist/model/ProjectDuplicateRequestScheduleDates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectDuplicateRequestScheduleDates = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectDuplicateRequestScheduleDates = /* @__PURE__ */ function() {
      function ProjectDuplicateRequestScheduleDates2(should_skip_weekends) {
        _classCallCheck(this, ProjectDuplicateRequestScheduleDates2);
        this.should_skip_weekends = should_skip_weekends;
      }
      _createClass(ProjectDuplicateRequestScheduleDates2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectDuplicateRequestScheduleDates2();
            if (data.hasOwnProperty("should_skip_weekends"))
              obj.should_skip_weekends = _ApiClient.ApiClient.convertToType(data["should_skip_weekends"], "Boolean");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
          }
          return obj;
        }
      }]);
      return ProjectDuplicateRequestScheduleDates2;
    }();
    exports.ProjectDuplicateRequestScheduleDates = ProjectDuplicateRequestScheduleDates;
    ProjectDuplicateRequestScheduleDates.prototype.should_skip_weekends = void 0;
    ProjectDuplicateRequestScheduleDates.prototype.due_on = void 0;
    ProjectDuplicateRequestScheduleDates.prototype.start_on = void 0;
  }
});

// node_modules/asana/dist/model/ProjectDuplicateRequest.js
var require_ProjectDuplicateRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectDuplicateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectDuplicateRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectDuplicateRequestScheduleDates = require_ProjectDuplicateRequestScheduleDates();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectDuplicateRequest = /* @__PURE__ */ function() {
      function ProjectDuplicateRequest2(name) {
        _classCallCheck(this, ProjectDuplicateRequest2);
        this.name = name;
      }
      _createClass(ProjectDuplicateRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectDuplicateRequest2();
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
            if (data.hasOwnProperty("include"))
              obj.include = _ApiClient.ApiClient.convertToType(data["include"], "String");
            if (data.hasOwnProperty("schedule_dates"))
              obj.schedule_dates = _ProjectDuplicateRequestScheduleDates.ProjectDuplicateRequestScheduleDates.constructFromObject(data["schedule_dates"]);
          }
          return obj;
        }
      }]);
      return ProjectDuplicateRequest2;
    }();
    exports.ProjectDuplicateRequest = ProjectDuplicateRequest;
    ProjectDuplicateRequest.prototype.name = void 0;
    ProjectDuplicateRequest.prototype.team = void 0;
    ProjectDuplicateRequest.prototype.include = void 0;
    ProjectDuplicateRequest.prototype.schedule_dates = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidAddCustomFieldSettingBody.js
var require_ProjectGidAddCustomFieldSettingBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidAddCustomFieldSettingBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidAddCustomFieldSettingBody = void 0;
    var _ApiClient = require_ApiClient();
    var _AddCustomFieldSettingRequest = require_AddCustomFieldSettingRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidAddCustomFieldSettingBody = /* @__PURE__ */ function() {
      function ProjectGidAddCustomFieldSettingBody2() {
        _classCallCheck(this, ProjectGidAddCustomFieldSettingBody2);
      }
      _createClass(ProjectGidAddCustomFieldSettingBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidAddCustomFieldSettingBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _AddCustomFieldSettingRequest.AddCustomFieldSettingRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidAddCustomFieldSettingBody2;
    }();
    exports.ProjectGidAddCustomFieldSettingBody = ProjectGidAddCustomFieldSettingBody;
    ProjectGidAddCustomFieldSettingBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidAddFollowersBody.js
var require_ProjectGidAddFollowersBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidAddFollowersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidAddFollowersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _AddFollowersRequest = require_AddFollowersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidAddFollowersBody = /* @__PURE__ */ function() {
      function ProjectGidAddFollowersBody2() {
        _classCallCheck(this, ProjectGidAddFollowersBody2);
      }
      _createClass(ProjectGidAddFollowersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidAddFollowersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _AddFollowersRequest.AddFollowersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidAddFollowersBody2;
    }();
    exports.ProjectGidAddFollowersBody = ProjectGidAddFollowersBody;
    ProjectGidAddFollowersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidAddMembersBody.js
var require_ProjectGidAddMembersBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidAddMembersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidAddMembersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _AddMembersRequest = require_AddMembersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidAddMembersBody = /* @__PURE__ */ function() {
      function ProjectGidAddMembersBody2() {
        _classCallCheck(this, ProjectGidAddMembersBody2);
      }
      _createClass(ProjectGidAddMembersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidAddMembersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _AddMembersRequest.AddMembersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidAddMembersBody2;
    }();
    exports.ProjectGidAddMembersBody = ProjectGidAddMembersBody;
    ProjectGidAddMembersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidDuplicateBody.js
var require_ProjectGidDuplicateBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidDuplicateBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidDuplicateBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectDuplicateRequest = require_ProjectDuplicateRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidDuplicateBody = /* @__PURE__ */ function() {
      function ProjectGidDuplicateBody2() {
        _classCallCheck(this, ProjectGidDuplicateBody2);
      }
      _createClass(ProjectGidDuplicateBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidDuplicateBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectDuplicateRequest.ProjectDuplicateRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidDuplicateBody2;
    }();
    exports.ProjectGidDuplicateBody = ProjectGidDuplicateBody;
    ProjectGidDuplicateBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidProjectBriefsBody.js
var require_ProjectGidProjectBriefsBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidProjectBriefsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidProjectBriefsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectBriefRequest = require_ProjectBriefRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidProjectBriefsBody = /* @__PURE__ */ function() {
      function ProjectGidProjectBriefsBody2() {
        _classCallCheck(this, ProjectGidProjectBriefsBody2);
      }
      _createClass(ProjectGidProjectBriefsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidProjectBriefsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectBriefRequest.ProjectBriefRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidProjectBriefsBody2;
    }();
    exports.ProjectGidProjectBriefsBody = ProjectGidProjectBriefsBody;
    ProjectGidProjectBriefsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectStatusRequest.js
var require_ProjectStatusRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectStatusRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectStatusRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectStatusRequest = /* @__PURE__ */ function() {
      function ProjectStatusRequest2(text, color) {
        _classCallCheck(this, ProjectStatusRequest2);
        this.text = text;
        this.color = color;
      }
      _createClass(ProjectStatusRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectStatusRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return ProjectStatusRequest2;
    }();
    exports.ProjectStatusRequest = ProjectStatusRequest;
    ProjectStatusRequest.prototype.gid = void 0;
    ProjectStatusRequest.prototype.resource_type = void 0;
    ProjectStatusRequest.prototype.title = void 0;
    ProjectStatusRequest.prototype.text = void 0;
    ProjectStatusRequest.prototype.html_text = void 0;
    ProjectStatusRequest.ColorEnum = {
      /**
       * value: "green"
       * @const
       */
      green: "green",
      /**
       * value: "yellow"
       * @const
       */
      yellow: "yellow",
      /**
       * value: "red"
       * @const
       */
      red: "red",
      /**
       * value: "blue"
       * @const
       */
      blue: "blue"
    };
    ProjectStatusRequest.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidProjectStatusesBody.js
var require_ProjectGidProjectStatusesBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidProjectStatusesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidProjectStatusesBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectStatusRequest = require_ProjectStatusRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidProjectStatusesBody = /* @__PURE__ */ function() {
      function ProjectGidProjectStatusesBody2() {
        _classCallCheck(this, ProjectGidProjectStatusesBody2);
      }
      _createClass(ProjectGidProjectStatusesBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidProjectStatusesBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectStatusRequest.ProjectStatusRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidProjectStatusesBody2;
    }();
    exports.ProjectGidProjectStatusesBody = ProjectGidProjectStatusesBody;
    ProjectGidProjectStatusesBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidRemoveCustomFieldSettingBody.js
var require_ProjectGidRemoveCustomFieldSettingBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidRemoveCustomFieldSettingBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidRemoveCustomFieldSettingBody = void 0;
    var _ApiClient = require_ApiClient();
    var _RemoveCustomFieldSettingRequest = require_RemoveCustomFieldSettingRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidRemoveCustomFieldSettingBody = /* @__PURE__ */ function() {
      function ProjectGidRemoveCustomFieldSettingBody2() {
        _classCallCheck(this, ProjectGidRemoveCustomFieldSettingBody2);
      }
      _createClass(ProjectGidRemoveCustomFieldSettingBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidRemoveCustomFieldSettingBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _RemoveCustomFieldSettingRequest.RemoveCustomFieldSettingRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidRemoveCustomFieldSettingBody2;
    }();
    exports.ProjectGidRemoveCustomFieldSettingBody = ProjectGidRemoveCustomFieldSettingBody;
    ProjectGidRemoveCustomFieldSettingBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/RemoveFollowersRequest.js
var require_RemoveFollowersRequest = __commonJS({
  "node_modules/asana/dist/model/RemoveFollowersRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RemoveFollowersRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RemoveFollowersRequest = /* @__PURE__ */ function() {
      function RemoveFollowersRequest2(followers) {
        _classCallCheck(this, RemoveFollowersRequest2);
        this.followers = followers;
      }
      _createClass(RemoveFollowersRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RemoveFollowersRequest2();
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], "String");
          }
          return obj;
        }
      }]);
      return RemoveFollowersRequest2;
    }();
    exports.RemoveFollowersRequest = RemoveFollowersRequest;
    RemoveFollowersRequest.prototype.followers = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidRemoveFollowersBody.js
var require_ProjectGidRemoveFollowersBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidRemoveFollowersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidRemoveFollowersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _RemoveFollowersRequest = require_RemoveFollowersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidRemoveFollowersBody = /* @__PURE__ */ function() {
      function ProjectGidRemoveFollowersBody2() {
        _classCallCheck(this, ProjectGidRemoveFollowersBody2);
      }
      _createClass(ProjectGidRemoveFollowersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidRemoveFollowersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _RemoveFollowersRequest.RemoveFollowersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidRemoveFollowersBody2;
    }();
    exports.ProjectGidRemoveFollowersBody = ProjectGidRemoveFollowersBody;
    ProjectGidRemoveFollowersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidRemoveMembersBody.js
var require_ProjectGidRemoveMembersBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidRemoveMembersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidRemoveMembersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _RemoveMembersRequest = require_RemoveMembersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidRemoveMembersBody = /* @__PURE__ */ function() {
      function ProjectGidRemoveMembersBody2() {
        _classCallCheck(this, ProjectGidRemoveMembersBody2);
      }
      _createClass(ProjectGidRemoveMembersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidRemoveMembersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _RemoveMembersRequest.RemoveMembersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidRemoveMembersBody2;
    }();
    exports.ProjectGidRemoveMembersBody = ProjectGidRemoveMembersBody;
    ProjectGidRemoveMembersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectSaveAsTemplateRequest.js
var require_ProjectSaveAsTemplateRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectSaveAsTemplateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectSaveAsTemplateRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectSaveAsTemplateRequest = /* @__PURE__ */ function() {
      function ProjectSaveAsTemplateRequest2(name, _public) {
        _classCallCheck(this, ProjectSaveAsTemplateRequest2);
        this.name = name;
        this._public = _public;
      }
      _createClass(ProjectSaveAsTemplateRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectSaveAsTemplateRequest2();
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
          }
          return obj;
        }
      }]);
      return ProjectSaveAsTemplateRequest2;
    }();
    exports.ProjectSaveAsTemplateRequest = ProjectSaveAsTemplateRequest;
    ProjectSaveAsTemplateRequest.prototype.name = void 0;
    ProjectSaveAsTemplateRequest.prototype.team = void 0;
    ProjectSaveAsTemplateRequest.prototype.workspace = void 0;
    ProjectSaveAsTemplateRequest.prototype._public = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidSaveAsTemplateBody.js
var require_ProjectGidSaveAsTemplateBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidSaveAsTemplateBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidSaveAsTemplateBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectSaveAsTemplateRequest = require_ProjectSaveAsTemplateRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidSaveAsTemplateBody = /* @__PURE__ */ function() {
      function ProjectGidSaveAsTemplateBody2() {
        _classCallCheck(this, ProjectGidSaveAsTemplateBody2);
      }
      _createClass(ProjectGidSaveAsTemplateBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidSaveAsTemplateBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectSaveAsTemplateRequest.ProjectSaveAsTemplateRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidSaveAsTemplateBody2;
    }();
    exports.ProjectGidSaveAsTemplateBody = ProjectGidSaveAsTemplateBody;
    ProjectGidSaveAsTemplateBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/SectionRequest.js
var require_SectionRequest = __commonJS({
  "node_modules/asana/dist/model/SectionRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionRequest = /* @__PURE__ */ function() {
      function SectionRequest2(name) {
        _classCallCheck(this, SectionRequest2);
        this.name = name;
      }
      _createClass(SectionRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionRequest2();
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
          }
          return obj;
        }
      }]);
      return SectionRequest2;
    }();
    exports.SectionRequest = SectionRequest;
    SectionRequest.prototype.name = void 0;
    SectionRequest.prototype.insert_before = void 0;
    SectionRequest.prototype.insert_after = void 0;
  }
});

// node_modules/asana/dist/model/ProjectGidSectionsBody.js
var require_ProjectGidSectionsBody = __commonJS({
  "node_modules/asana/dist/model/ProjectGidSectionsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectGidSectionsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _SectionRequest = require_SectionRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectGidSectionsBody = /* @__PURE__ */ function() {
      function ProjectGidSectionsBody2() {
        _classCallCheck(this, ProjectGidSectionsBody2);
      }
      _createClass(ProjectGidSectionsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectGidSectionsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _SectionRequest.SectionRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectGidSectionsBody2;
    }();
    exports.ProjectGidSectionsBody = ProjectGidSectionsBody;
    ProjectGidSectionsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectMembershipBase.js
var require_ProjectMembershipBase = __commonJS({
  "node_modules/asana/dist/model/ProjectMembershipBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectMembershipBase = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _MembershipCompactMember = require_MembershipCompactMember();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectMembershipBase = /* @__PURE__ */ function() {
      function ProjectMembershipBase2() {
        _classCallCheck(this, ProjectMembershipBase2);
      }
      _createClass(ProjectMembershipBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectMembershipBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("member"))
              obj.member = _MembershipCompactMember.MembershipCompactMember.constructFromObject(data["member"]);
            if (data.hasOwnProperty("access_level"))
              obj.access_level = _ApiClient.ApiClient.convertToType(data["access_level"], "String");
          }
          return obj;
        }
      }]);
      return ProjectMembershipBase2;
    }();
    exports.ProjectMembershipBase = ProjectMembershipBase;
    ProjectMembershipBase.prototype.gid = void 0;
    ProjectMembershipBase.prototype.resource_type = void 0;
    ProjectMembershipBase.prototype.user = void 0;
    ProjectMembershipBase.prototype.parent = void 0;
    ProjectMembershipBase.prototype.member = void 0;
    ProjectMembershipBase.AccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectMembershipBase.prototype.access_level = void 0;
  }
});

// node_modules/asana/dist/model/ProjectMembershipCompact.js
var require_ProjectMembershipCompact = __commonJS({
  "node_modules/asana/dist/model/ProjectMembershipCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectMembershipCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _MembershipCompactMember = require_MembershipCompactMember();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectMembershipCompact = /* @__PURE__ */ function() {
      function ProjectMembershipCompact2() {
        _classCallCheck(this, ProjectMembershipCompact2);
      }
      _createClass(ProjectMembershipCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectMembershipCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("member"))
              obj.member = _MembershipCompactMember.MembershipCompactMember.constructFromObject(data["member"]);
            if (data.hasOwnProperty("access_level"))
              obj.access_level = _ApiClient.ApiClient.convertToType(data["access_level"], "String");
          }
          return obj;
        }
      }]);
      return ProjectMembershipCompact2;
    }();
    exports.ProjectMembershipCompact = ProjectMembershipCompact;
    ProjectMembershipCompact.prototype.gid = void 0;
    ProjectMembershipCompact.prototype.resource_type = void 0;
    ProjectMembershipCompact.prototype.user = void 0;
    ProjectMembershipCompact.prototype.parent = void 0;
    ProjectMembershipCompact.prototype.member = void 0;
    ProjectMembershipCompact.AccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectMembershipCompact.prototype.access_level = void 0;
  }
});

// node_modules/asana/dist/model/ProjectMembershipCompactArray.js
var require_ProjectMembershipCompactArray = __commonJS({
  "node_modules/asana/dist/model/ProjectMembershipCompactArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectMembershipCompactArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _ProjectMembershipCompact = require_ProjectMembershipCompact();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectMembershipCompactArray = /* @__PURE__ */ function() {
      function ProjectMembershipCompactArray2(data) {
        _classCallCheck(this, ProjectMembershipCompactArray2);
        this.data = data;
      }
      _createClass(ProjectMembershipCompactArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectMembershipCompactArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_ProjectMembershipCompact.ProjectMembershipCompact]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return ProjectMembershipCompactArray2;
    }();
    exports.ProjectMembershipCompactArray = ProjectMembershipCompactArray;
    ProjectMembershipCompactArray.prototype.data = void 0;
    ProjectMembershipCompactArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/ProjectMembershipCompactResponse.js
var require_ProjectMembershipCompactResponse = __commonJS({
  "node_modules/asana/dist/model/ProjectMembershipCompactResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectMembershipCompactResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _MembershipCompactMember = require_MembershipCompactMember();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectMembershipCompactResponse = /* @__PURE__ */ function() {
      function ProjectMembershipCompactResponse2() {
        _classCallCheck(this, ProjectMembershipCompactResponse2);
      }
      _createClass(ProjectMembershipCompactResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectMembershipCompactResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("member"))
              obj.member = _MembershipCompactMember.MembershipCompactMember.constructFromObject(data["member"]);
            if (data.hasOwnProperty("access_level"))
              obj.access_level = _ApiClient.ApiClient.convertToType(data["access_level"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
          }
          return obj;
        }
      }]);
      return ProjectMembershipCompactResponse2;
    }();
    exports.ProjectMembershipCompactResponse = ProjectMembershipCompactResponse;
    ProjectMembershipCompactResponse.prototype.gid = void 0;
    ProjectMembershipCompactResponse.prototype.resource_type = void 0;
    ProjectMembershipCompactResponse.prototype.user = void 0;
    ProjectMembershipCompactResponse.prototype.parent = void 0;
    ProjectMembershipCompactResponse.prototype.member = void 0;
    ProjectMembershipCompactResponse.AccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectMembershipCompactResponse.prototype.access_level = void 0;
    ProjectMembershipCompactResponse.prototype.resource_subtype = void 0;
  }
});

// node_modules/asana/dist/model/ProjectMembershipNormalResponse.js
var require_ProjectMembershipNormalResponse = __commonJS({
  "node_modules/asana/dist/model/ProjectMembershipNormalResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectMembershipNormalResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _MembershipCompactMember = require_MembershipCompactMember();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectMembershipNormalResponse = /* @__PURE__ */ function() {
      function ProjectMembershipNormalResponse2() {
        _classCallCheck(this, ProjectMembershipNormalResponse2);
      }
      _createClass(ProjectMembershipNormalResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectMembershipNormalResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("member"))
              obj.member = _MembershipCompactMember.MembershipCompactMember.constructFromObject(data["member"]);
            if (data.hasOwnProperty("access_level"))
              obj.access_level = _ApiClient.ApiClient.convertToType(data["access_level"], "String");
            if (data.hasOwnProperty("project"))
              obj.project = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["project"]);
            if (data.hasOwnProperty("write_access"))
              obj.write_access = _ApiClient.ApiClient.convertToType(data["write_access"], "String");
          }
          return obj;
        }
      }]);
      return ProjectMembershipNormalResponse2;
    }();
    exports.ProjectMembershipNormalResponse = ProjectMembershipNormalResponse;
    ProjectMembershipNormalResponse.prototype.gid = void 0;
    ProjectMembershipNormalResponse.prototype.resource_type = void 0;
    ProjectMembershipNormalResponse.prototype.user = void 0;
    ProjectMembershipNormalResponse.prototype.parent = void 0;
    ProjectMembershipNormalResponse.prototype.member = void 0;
    ProjectMembershipNormalResponse.AccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectMembershipNormalResponse.prototype.access_level = void 0;
    ProjectMembershipNormalResponse.prototype.project = void 0;
    ProjectMembershipNormalResponse.WriteAccessEnum = {
      /**
       * value: "full_write"
       * @const
       */
      full_write: "full_write",
      /**
       * value: "comment_only"
       * @const
       */
      comment_only: "comment_only"
    };
    ProjectMembershipNormalResponse.prototype.write_access = void 0;
  }
});

// node_modules/asana/dist/model/ProjectMembershipNormalResponseData.js
var require_ProjectMembershipNormalResponseData = __commonJS({
  "node_modules/asana/dist/model/ProjectMembershipNormalResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectMembershipNormalResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectMembershipNormalResponse = require_ProjectMembershipNormalResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectMembershipNormalResponseData = /* @__PURE__ */ function() {
      function ProjectMembershipNormalResponseData2(data) {
        _classCallCheck(this, ProjectMembershipNormalResponseData2);
        this.data = data;
      }
      _createClass(ProjectMembershipNormalResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectMembershipNormalResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectMembershipNormalResponse.ProjectMembershipNormalResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectMembershipNormalResponseData2;
    }();
    exports.ProjectMembershipNormalResponseData = ProjectMembershipNormalResponseData;
    ProjectMembershipNormalResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectRequest.js
var require_ProjectRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _PortfolioResponseCustomFieldSettings = require_PortfolioResponseCustomFieldSettings();
    var _ProjectBaseCurrentStatus = require_ProjectBaseCurrentStatus();
    var _ProjectBaseCurrentStatusUpdate = require_ProjectBaseCurrentStatusUpdate();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectRequest = /* @__PURE__ */ function() {
      function ProjectRequest2() {
        _classCallCheck(this, ProjectRequest2);
      }
      _createClass(ProjectRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("archived"))
              obj.archived = _ApiClient.ApiClient.convertToType(data["archived"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("current_status"))
              obj.current_status = _ProjectBaseCurrentStatus.ProjectBaseCurrentStatus.constructFromObject(data["current_status"]);
            if (data.hasOwnProperty("current_status_update"))
              obj.current_status_update = _ProjectBaseCurrentStatusUpdate.ProjectBaseCurrentStatusUpdate.constructFromObject(data["current_status_update"]);
            if (data.hasOwnProperty("custom_field_settings"))
              obj.custom_field_settings = _ApiClient.ApiClient.convertToType(data["custom_field_settings"], [_PortfolioResponseCustomFieldSettings.PortfolioResponseCustomFieldSettings]);
            if (data.hasOwnProperty("default_view"))
              obj.default_view = _ApiClient.ApiClient.convertToType(data["default_view"], "String");
            if (data.hasOwnProperty("due_date"))
              obj.due_date = _ApiClient.ApiClient.convertToType(data["due_date"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("default_access_level"))
              obj.default_access_level = _ApiClient.ApiClient.convertToType(data["default_access_level"], "String");
            if (data.hasOwnProperty("custom_fields"))
              obj.custom_fields = _ApiClient.ApiClient.convertToType(data["custom_fields"], {
                "String": "String"
              });
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], "String");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
          }
          return obj;
        }
      }]);
      return ProjectRequest2;
    }();
    exports.ProjectRequest = ProjectRequest;
    ProjectRequest.prototype.gid = void 0;
    ProjectRequest.prototype.resource_type = void 0;
    ProjectRequest.prototype.name = void 0;
    ProjectRequest.prototype.archived = void 0;
    ProjectRequest.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "none"
       * @const
       */
      none: "none",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    ProjectRequest.prototype.color = void 0;
    ProjectRequest.prototype.created_at = void 0;
    ProjectRequest.prototype.current_status = void 0;
    ProjectRequest.prototype.current_status_update = void 0;
    ProjectRequest.prototype.custom_field_settings = void 0;
    ProjectRequest.DefaultViewEnum = {
      /**
       * value: "list"
       * @const
       */
      list: "list",
      /**
       * value: "board"
       * @const
       */
      board: "board",
      /**
       * value: "calendar"
       * @const
       */
      calendar: "calendar",
      /**
       * value: "timeline"
       * @const
       */
      timeline: "timeline"
    };
    ProjectRequest.prototype.default_view = void 0;
    ProjectRequest.prototype.due_date = void 0;
    ProjectRequest.prototype.due_on = void 0;
    ProjectRequest.prototype.html_notes = void 0;
    ProjectRequest.prototype.members = void 0;
    ProjectRequest.prototype.modified_at = void 0;
    ProjectRequest.prototype.notes = void 0;
    ProjectRequest.prototype._public = void 0;
    ProjectRequest.prototype.start_on = void 0;
    ProjectRequest.DefaultAccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectRequest.prototype.default_access_level = void 0;
    ProjectRequest.prototype.custom_fields = void 0;
    ProjectRequest.prototype.followers = void 0;
    ProjectRequest.prototype.owner = void 0;
    ProjectRequest.prototype.team = void 0;
    ProjectRequest.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponseCompletedBy.js
var require_ProjectResponseCompletedBy = __commonJS({
  "node_modules/asana/dist/model/ProjectResponseCompletedBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponseCompletedBy = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponseCompletedBy = /* @__PURE__ */ function() {
      function ProjectResponseCompletedBy2() {
        _classCallCheck(this, ProjectResponseCompletedBy2);
      }
      _createClass(ProjectResponseCompletedBy2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponseCompletedBy2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectResponseCompletedBy2;
    }();
    exports.ProjectResponseCompletedBy = ProjectResponseCompletedBy;
    ProjectResponseCompletedBy.prototype.gid = void 0;
    ProjectResponseCompletedBy.prototype.resource_type = void 0;
    ProjectResponseCompletedBy.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponseCreatedFromTemplate.js
var require_ProjectResponseCreatedFromTemplate = __commonJS({
  "node_modules/asana/dist/model/ProjectResponseCreatedFromTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponseCreatedFromTemplate = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponseCreatedFromTemplate = /* @__PURE__ */ function() {
      function ProjectResponseCreatedFromTemplate2() {
        _classCallCheck(this, ProjectResponseCreatedFromTemplate2);
      }
      _createClass(ProjectResponseCreatedFromTemplate2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponseCreatedFromTemplate2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectResponseCreatedFromTemplate2;
    }();
    exports.ProjectResponseCreatedFromTemplate = ProjectResponseCreatedFromTemplate;
    ProjectResponseCreatedFromTemplate.prototype.gid = void 0;
    ProjectResponseCreatedFromTemplate.prototype.resource_type = void 0;
    ProjectResponseCreatedFromTemplate.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponseProjectBrief.js
var require_ProjectResponseProjectBrief = __commonJS({
  "node_modules/asana/dist/model/ProjectResponseProjectBrief.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponseProjectBrief = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponseProjectBrief = /* @__PURE__ */ function() {
      function ProjectResponseProjectBrief2() {
        _classCallCheck(this, ProjectResponseProjectBrief2);
      }
      _createClass(ProjectResponseProjectBrief2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponseProjectBrief2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
          }
          return obj;
        }
      }]);
      return ProjectResponseProjectBrief2;
    }();
    exports.ProjectResponseProjectBrief = ProjectResponseProjectBrief;
    ProjectResponseProjectBrief.prototype.gid = void 0;
    ProjectResponseProjectBrief.prototype.resource_type = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponseTeam.js
var require_ProjectResponseTeam = __commonJS({
  "node_modules/asana/dist/model/ProjectResponseTeam.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponseTeam = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponseTeam = /* @__PURE__ */ function() {
      function ProjectResponseTeam2() {
        _classCallCheck(this, ProjectResponseTeam2);
      }
      _createClass(ProjectResponseTeam2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponseTeam2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectResponseTeam2;
    }();
    exports.ProjectResponseTeam = ProjectResponseTeam;
    ProjectResponseTeam.prototype.gid = void 0;
    ProjectResponseTeam.prototype.resource_type = void 0;
    ProjectResponseTeam.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponseWorkspace.js
var require_ProjectResponseWorkspace = __commonJS({
  "node_modules/asana/dist/model/ProjectResponseWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponseWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponseWorkspace = /* @__PURE__ */ function() {
      function ProjectResponseWorkspace2() {
        _classCallCheck(this, ProjectResponseWorkspace2);
      }
      _createClass(ProjectResponseWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponseWorkspace2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectResponseWorkspace2;
    }();
    exports.ProjectResponseWorkspace = ProjectResponseWorkspace;
    ProjectResponseWorkspace.prototype.gid = void 0;
    ProjectResponseWorkspace.prototype.resource_type = void 0;
    ProjectResponseWorkspace.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponse.js
var require_ProjectResponse = __commonJS({
  "node_modules/asana/dist/model/ProjectResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _PortfolioResponseCustomFieldSettings = require_PortfolioResponseCustomFieldSettings();
    var _PortfolioResponseCustomFields = require_PortfolioResponseCustomFields();
    var _ProjectBaseCurrentStatus = require_ProjectBaseCurrentStatus();
    var _ProjectBaseCurrentStatusUpdate = require_ProjectBaseCurrentStatusUpdate();
    var _ProjectResponseCompletedBy = require_ProjectResponseCompletedBy();
    var _ProjectResponseCreatedFromTemplate = require_ProjectResponseCreatedFromTemplate();
    var _ProjectResponseProjectBrief = require_ProjectResponseProjectBrief();
    var _ProjectResponseTeam = require_ProjectResponseTeam();
    var _ProjectResponseWorkspace = require_ProjectResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponse = /* @__PURE__ */ function() {
      function ProjectResponse2() {
        _classCallCheck(this, ProjectResponse2);
      }
      _createClass(ProjectResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("archived"))
              obj.archived = _ApiClient.ApiClient.convertToType(data["archived"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("current_status"))
              obj.current_status = _ProjectBaseCurrentStatus.ProjectBaseCurrentStatus.constructFromObject(data["current_status"]);
            if (data.hasOwnProperty("current_status_update"))
              obj.current_status_update = _ProjectBaseCurrentStatusUpdate.ProjectBaseCurrentStatusUpdate.constructFromObject(data["current_status_update"]);
            if (data.hasOwnProperty("custom_field_settings"))
              obj.custom_field_settings = _ApiClient.ApiClient.convertToType(data["custom_field_settings"], [_PortfolioResponseCustomFieldSettings.PortfolioResponseCustomFieldSettings]);
            if (data.hasOwnProperty("default_view"))
              obj.default_view = _ApiClient.ApiClient.convertToType(data["default_view"], "String");
            if (data.hasOwnProperty("due_date"))
              obj.due_date = _ApiClient.ApiClient.convertToType(data["due_date"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("default_access_level"))
              obj.default_access_level = _ApiClient.ApiClient.convertToType(data["default_access_level"], "String");
            if (data.hasOwnProperty("custom_fields"))
              obj.custom_fields = _ApiClient.ApiClient.convertToType(data["custom_fields"], [_PortfolioResponseCustomFields.PortfolioResponseCustomFields]);
            if (data.hasOwnProperty("completed"))
              obj.completed = _ApiClient.ApiClient.convertToType(data["completed"], "Boolean");
            if (data.hasOwnProperty("completed_at"))
              obj.completed_at = _ApiClient.ApiClient.convertToType(data["completed_at"], "Date");
            if (data.hasOwnProperty("completed_by"))
              obj.completed_by = _ProjectResponseCompletedBy.ProjectResponseCompletedBy.constructFromObject(data["completed_by"]);
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("team"))
              obj.team = _ProjectResponseTeam.ProjectResponseTeam.constructFromObject(data["team"]);
            if (data.hasOwnProperty("icon"))
              obj.icon = _ApiClient.ApiClient.convertToType(data["icon"], "String");
            if (data.hasOwnProperty("permalink_url"))
              obj.permalink_url = _ApiClient.ApiClient.convertToType(data["permalink_url"], "String");
            if (data.hasOwnProperty("project_brief"))
              obj.project_brief = _ProjectResponseProjectBrief.ProjectResponseProjectBrief.constructFromObject(data["project_brief"]);
            if (data.hasOwnProperty("created_from_template"))
              obj.created_from_template = _ProjectResponseCreatedFromTemplate.ProjectResponseCreatedFromTemplate.constructFromObject(data["created_from_template"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ProjectResponseWorkspace.ProjectResponseWorkspace.constructFromObject(data["workspace"]);
          }
          return obj;
        }
      }]);
      return ProjectResponse2;
    }();
    exports.ProjectResponse = ProjectResponse;
    ProjectResponse.prototype.gid = void 0;
    ProjectResponse.prototype.resource_type = void 0;
    ProjectResponse.prototype.name = void 0;
    ProjectResponse.prototype.archived = void 0;
    ProjectResponse.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "none"
       * @const
       */
      none: "none",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    ProjectResponse.prototype.color = void 0;
    ProjectResponse.prototype.created_at = void 0;
    ProjectResponse.prototype.current_status = void 0;
    ProjectResponse.prototype.current_status_update = void 0;
    ProjectResponse.prototype.custom_field_settings = void 0;
    ProjectResponse.DefaultViewEnum = {
      /**
       * value: "list"
       * @const
       */
      list: "list",
      /**
       * value: "board"
       * @const
       */
      board: "board",
      /**
       * value: "calendar"
       * @const
       */
      calendar: "calendar",
      /**
       * value: "timeline"
       * @const
       */
      timeline: "timeline"
    };
    ProjectResponse.prototype.default_view = void 0;
    ProjectResponse.prototype.due_date = void 0;
    ProjectResponse.prototype.due_on = void 0;
    ProjectResponse.prototype.html_notes = void 0;
    ProjectResponse.prototype.members = void 0;
    ProjectResponse.prototype.modified_at = void 0;
    ProjectResponse.prototype.notes = void 0;
    ProjectResponse.prototype._public = void 0;
    ProjectResponse.prototype.start_on = void 0;
    ProjectResponse.DefaultAccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectResponse.prototype.default_access_level = void 0;
    ProjectResponse.prototype.custom_fields = void 0;
    ProjectResponse.prototype.completed = void 0;
    ProjectResponse.prototype.completed_at = void 0;
    ProjectResponse.prototype.completed_by = void 0;
    ProjectResponse.prototype.followers = void 0;
    ProjectResponse.prototype.owner = void 0;
    ProjectResponse.prototype.team = void 0;
    ProjectResponse.IconEnum = {
      /**
       * value: "list"
       * @const
       */
      list: "list",
      /**
       * value: "board"
       * @const
       */
      board: "board",
      /**
       * value: "timeline"
       * @const
       */
      timeline: "timeline",
      /**
       * value: "calendar"
       * @const
       */
      calendar: "calendar",
      /**
       * value: "rocket"
       * @const
       */
      rocket: "rocket",
      /**
       * value: "people"
       * @const
       */
      people: "people",
      /**
       * value: "graph"
       * @const
       */
      graph: "graph",
      /**
       * value: "star"
       * @const
       */
      star: "star",
      /**
       * value: "bug"
       * @const
       */
      bug: "bug",
      /**
       * value: "light_bulb"
       * @const
       */
      light_bulb: "light_bulb",
      /**
       * value: "globe"
       * @const
       */
      globe: "globe",
      /**
       * value: "gear"
       * @const
       */
      gear: "gear",
      /**
       * value: "notebook"
       * @const
       */
      notebook: "notebook",
      /**
       * value: "computer"
       * @const
       */
      computer: "computer",
      /**
       * value: "check"
       * @const
       */
      check: "check",
      /**
       * value: "target"
       * @const
       */
      target: "target",
      /**
       * value: "html"
       * @const
       */
      html: "html",
      /**
       * value: "megaphone"
       * @const
       */
      megaphone: "megaphone",
      /**
       * value: "chat_bubbles"
       * @const
       */
      chat_bubbles: "chat_bubbles",
      /**
       * value: "briefcase"
       * @const
       */
      briefcase: "briefcase",
      /**
       * value: "page_layout"
       * @const
       */
      page_layout: "page_layout",
      /**
       * value: "mountain_flag"
       * @const
       */
      mountain_flag: "mountain_flag",
      /**
       * value: "puzzle"
       * @const
       */
      puzzle: "puzzle",
      /**
       * value: "presentation"
       * @const
       */
      presentation: "presentation",
      /**
       * value: "line_and_symbols"
       * @const
       */
      line_and_symbols: "line_and_symbols",
      /**
       * value: "speed_dial"
       * @const
       */
      speed_dial: "speed_dial",
      /**
       * value: "ribbon"
       * @const
       */
      ribbon: "ribbon",
      /**
       * value: "shoe"
       * @const
       */
      shoe: "shoe",
      /**
       * value: "shopping_basket"
       * @const
       */
      shopping_basket: "shopping_basket",
      /**
       * value: "map"
       * @const
       */
      map: "map",
      /**
       * value: "ticket"
       * @const
       */
      ticket: "ticket",
      /**
       * value: "coins"
       * @const
       */
      coins: "coins"
    };
    ProjectResponse.prototype.icon = void 0;
    ProjectResponse.prototype.permalink_url = void 0;
    ProjectResponse.prototype.project_brief = void 0;
    ProjectResponse.prototype.created_from_template = void 0;
    ProjectResponse.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponseArray.js
var require_ProjectResponseArray = __commonJS({
  "node_modules/asana/dist/model/ProjectResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _ProjectResponse = require_ProjectResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponseArray = /* @__PURE__ */ function() {
      function ProjectResponseArray2(data) {
        _classCallCheck(this, ProjectResponseArray2);
        this.data = data;
      }
      _createClass(ProjectResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_ProjectResponse.ProjectResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return ProjectResponseArray2;
    }();
    exports.ProjectResponseArray = ProjectResponseArray;
    ProjectResponseArray.prototype.data = void 0;
    ProjectResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/ProjectResponseData.js
var require_ProjectResponseData = __commonJS({
  "node_modules/asana/dist/model/ProjectResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectResponse = require_ProjectResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectResponseData = /* @__PURE__ */ function() {
      function ProjectResponseData2(data) {
        _classCallCheck(this, ProjectResponseData2);
        this.data = data;
      }
      _createClass(ProjectResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectResponse.ProjectResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectResponseData2;
    }();
    exports.ProjectResponseData = ProjectResponseData;
    ProjectResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectSectionInsertRequest.js
var require_ProjectSectionInsertRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectSectionInsertRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectSectionInsertRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectSectionInsertRequest = /* @__PURE__ */ function() {
      function ProjectSectionInsertRequest2(section) {
        _classCallCheck(this, ProjectSectionInsertRequest2);
        this.section = section;
      }
      _createClass(ProjectSectionInsertRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectSectionInsertRequest2();
            if (data.hasOwnProperty("section"))
              obj.section = _ApiClient.ApiClient.convertToType(data["section"], "String");
            if (data.hasOwnProperty("before_section"))
              obj.before_section = _ApiClient.ApiClient.convertToType(data["before_section"], "String");
            if (data.hasOwnProperty("after_section"))
              obj.after_section = _ApiClient.ApiClient.convertToType(data["after_section"], "String");
          }
          return obj;
        }
      }]);
      return ProjectSectionInsertRequest2;
    }();
    exports.ProjectSectionInsertRequest = ProjectSectionInsertRequest;
    ProjectSectionInsertRequest.prototype.section = void 0;
    ProjectSectionInsertRequest.prototype.before_section = void 0;
    ProjectSectionInsertRequest.prototype.after_section = void 0;
  }
});

// node_modules/asana/dist/model/ProjectStatusBase.js
var require_ProjectStatusBase = __commonJS({
  "node_modules/asana/dist/model/ProjectStatusBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectStatusBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectStatusBase = /* @__PURE__ */ function() {
      function ProjectStatusBase2(text, color) {
        _classCallCheck(this, ProjectStatusBase2);
        this.text = text;
        this.color = color;
      }
      _createClass(ProjectStatusBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectStatusBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return ProjectStatusBase2;
    }();
    exports.ProjectStatusBase = ProjectStatusBase;
    ProjectStatusBase.prototype.gid = void 0;
    ProjectStatusBase.prototype.resource_type = void 0;
    ProjectStatusBase.prototype.title = void 0;
    ProjectStatusBase.prototype.text = void 0;
    ProjectStatusBase.prototype.html_text = void 0;
    ProjectStatusBase.ColorEnum = {
      /**
       * value: "green"
       * @const
       */
      green: "green",
      /**
       * value: "yellow"
       * @const
       */
      yellow: "yellow",
      /**
       * value: "red"
       * @const
       */
      red: "red",
      /**
       * value: "blue"
       * @const
       */
      blue: "blue"
    };
    ProjectStatusBase.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/ProjectStatusCompact.js
var require_ProjectStatusCompact = __commonJS({
  "node_modules/asana/dist/model/ProjectStatusCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectStatusCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectStatusCompact = /* @__PURE__ */ function() {
      function ProjectStatusCompact2() {
        _classCallCheck(this, ProjectStatusCompact2);
      }
      _createClass(ProjectStatusCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectStatusCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
          }
          return obj;
        }
      }]);
      return ProjectStatusCompact2;
    }();
    exports.ProjectStatusCompact = ProjectStatusCompact;
    ProjectStatusCompact.prototype.gid = void 0;
    ProjectStatusCompact.prototype.resource_type = void 0;
    ProjectStatusCompact.prototype.title = void 0;
  }
});

// node_modules/asana/dist/model/ProjectStatusResponse.js
var require_ProjectStatusResponse = __commonJS({
  "node_modules/asana/dist/model/ProjectStatusResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectStatusResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectStatusResponse = /* @__PURE__ */ function() {
      function ProjectStatusResponse2(text, color) {
        _classCallCheck(this, ProjectStatusResponse2);
        this.text = text;
        this.color = color;
      }
      _createClass(ProjectStatusResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectStatusResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("author"))
              obj.author = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["author"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
          }
          return obj;
        }
      }]);
      return ProjectStatusResponse2;
    }();
    exports.ProjectStatusResponse = ProjectStatusResponse;
    ProjectStatusResponse.prototype.gid = void 0;
    ProjectStatusResponse.prototype.resource_type = void 0;
    ProjectStatusResponse.prototype.title = void 0;
    ProjectStatusResponse.prototype.text = void 0;
    ProjectStatusResponse.prototype.html_text = void 0;
    ProjectStatusResponse.ColorEnum = {
      /**
       * value: "green"
       * @const
       */
      green: "green",
      /**
       * value: "yellow"
       * @const
       */
      yellow: "yellow",
      /**
       * value: "red"
       * @const
       */
      red: "red",
      /**
       * value: "blue"
       * @const
       */
      blue: "blue"
    };
    ProjectStatusResponse.prototype.color = void 0;
    ProjectStatusResponse.prototype.author = void 0;
    ProjectStatusResponse.prototype.created_at = void 0;
    ProjectStatusResponse.prototype.created_by = void 0;
    ProjectStatusResponse.prototype.modified_at = void 0;
  }
});

// node_modules/asana/dist/model/ProjectStatusResponseArray.js
var require_ProjectStatusResponseArray = __commonJS({
  "node_modules/asana/dist/model/ProjectStatusResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectStatusResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _ProjectStatusResponse = require_ProjectStatusResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectStatusResponseArray = /* @__PURE__ */ function() {
      function ProjectStatusResponseArray2(data) {
        _classCallCheck(this, ProjectStatusResponseArray2);
        this.data = data;
      }
      _createClass(ProjectStatusResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectStatusResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_ProjectStatusResponse.ProjectStatusResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return ProjectStatusResponseArray2;
    }();
    exports.ProjectStatusResponseArray = ProjectStatusResponseArray;
    ProjectStatusResponseArray.prototype.data = void 0;
    ProjectStatusResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/ProjectStatusResponseData.js
var require_ProjectStatusResponseData = __commonJS({
  "node_modules/asana/dist/model/ProjectStatusResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectStatusResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectStatusResponse = require_ProjectStatusResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectStatusResponseData = /* @__PURE__ */ function() {
      function ProjectStatusResponseData2(data) {
        _classCallCheck(this, ProjectStatusResponseData2);
        this.data = data;
      }
      _createClass(ProjectStatusResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectStatusResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectStatusResponse.ProjectStatusResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectStatusResponseData2;
    }();
    exports.ProjectStatusResponseData = ProjectStatusResponseData;
    ProjectStatusResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateBaseRequestedDates.js
var require_ProjectTemplateBaseRequestedDates = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateBaseRequestedDates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateBaseRequestedDates = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateBaseRequestedDates = /* @__PURE__ */ function() {
      function ProjectTemplateBaseRequestedDates2() {
        _classCallCheck(this, ProjectTemplateBaseRequestedDates2);
      }
      _createClass(ProjectTemplateBaseRequestedDates2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateBaseRequestedDates2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
          }
          return obj;
        }
      }]);
      return ProjectTemplateBaseRequestedDates2;
    }();
    exports.ProjectTemplateBaseRequestedDates = ProjectTemplateBaseRequestedDates;
    ProjectTemplateBaseRequestedDates.prototype.gid = void 0;
    ProjectTemplateBaseRequestedDates.prototype.name = void 0;
    ProjectTemplateBaseRequestedDates.prototype.description = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateBaseRequestedRoles.js
var require_ProjectTemplateBaseRequestedRoles = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateBaseRequestedRoles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateBaseRequestedRoles = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateBaseRequestedRoles = /* @__PURE__ */ function() {
      function ProjectTemplateBaseRequestedRoles2() {
        _classCallCheck(this, ProjectTemplateBaseRequestedRoles2);
      }
      _createClass(ProjectTemplateBaseRequestedRoles2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateBaseRequestedRoles2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectTemplateBaseRequestedRoles2;
    }();
    exports.ProjectTemplateBaseRequestedRoles = ProjectTemplateBaseRequestedRoles;
    ProjectTemplateBaseRequestedRoles.prototype.gid = void 0;
    ProjectTemplateBaseRequestedRoles.prototype.resource_type = void 0;
    ProjectTemplateBaseRequestedRoles.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateBaseTeam.js
var require_ProjectTemplateBaseTeam = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateBaseTeam.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateBaseTeam = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateBaseTeam = /* @__PURE__ */ function() {
      function ProjectTemplateBaseTeam2() {
        _classCallCheck(this, ProjectTemplateBaseTeam2);
      }
      _createClass(ProjectTemplateBaseTeam2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateBaseTeam2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectTemplateBaseTeam2;
    }();
    exports.ProjectTemplateBaseTeam = ProjectTemplateBaseTeam;
    ProjectTemplateBaseTeam.prototype.gid = void 0;
    ProjectTemplateBaseTeam.prototype.resource_type = void 0;
    ProjectTemplateBaseTeam.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateBase.js
var require_ProjectTemplateBase = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateBase = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectTemplateBaseRequestedDates = require_ProjectTemplateBaseRequestedDates();
    var _ProjectTemplateBaseRequestedRoles = require_ProjectTemplateBaseRequestedRoles();
    var _ProjectTemplateBaseTeam = require_ProjectTemplateBaseTeam();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateBase = /* @__PURE__ */ function() {
      function ProjectTemplateBase2() {
        _classCallCheck(this, ProjectTemplateBase2);
      }
      _createClass(ProjectTemplateBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("html_description"))
              obj.html_description = _ApiClient.ApiClient.convertToType(data["html_description"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("team"))
              obj.team = _ProjectTemplateBaseTeam.ProjectTemplateBaseTeam.constructFromObject(data["team"]);
            if (data.hasOwnProperty("requested_dates"))
              obj.requested_dates = _ApiClient.ApiClient.convertToType(data["requested_dates"], [_ProjectTemplateBaseRequestedDates.ProjectTemplateBaseRequestedDates]);
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("requested_roles"))
              obj.requested_roles = _ApiClient.ApiClient.convertToType(data["requested_roles"], [_ProjectTemplateBaseRequestedRoles.ProjectTemplateBaseRequestedRoles]);
          }
          return obj;
        }
      }]);
      return ProjectTemplateBase2;
    }();
    exports.ProjectTemplateBase = ProjectTemplateBase;
    ProjectTemplateBase.prototype.gid = void 0;
    ProjectTemplateBase.prototype.resource_type = void 0;
    ProjectTemplateBase.prototype.name = void 0;
    ProjectTemplateBase.prototype.description = void 0;
    ProjectTemplateBase.prototype.html_description = void 0;
    ProjectTemplateBase.prototype._public = void 0;
    ProjectTemplateBase.prototype.owner = void 0;
    ProjectTemplateBase.prototype.team = void 0;
    ProjectTemplateBase.prototype.requested_dates = void 0;
    ProjectTemplateBase.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    ProjectTemplateBase.prototype.color = void 0;
    ProjectTemplateBase.prototype.requested_roles = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateCompact.js
var require_ProjectTemplateCompact = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateCompact = /* @__PURE__ */ function() {
      function ProjectTemplateCompact2() {
        _classCallCheck(this, ProjectTemplateCompact2);
      }
      _createClass(ProjectTemplateCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return ProjectTemplateCompact2;
    }();
    exports.ProjectTemplateCompact = ProjectTemplateCompact;
    ProjectTemplateCompact.prototype.gid = void 0;
    ProjectTemplateCompact.prototype.resource_type = void 0;
    ProjectTemplateCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateInstantiateProjectRequestRequestedDates.js
var require_ProjectTemplateInstantiateProjectRequestRequestedDates = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateInstantiateProjectRequestRequestedDates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateInstantiateProjectRequestRequestedDates = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateInstantiateProjectRequestRequestedDates = /* @__PURE__ */ function() {
      function ProjectTemplateInstantiateProjectRequestRequestedDates2() {
        _classCallCheck(this, ProjectTemplateInstantiateProjectRequestRequestedDates2);
      }
      _createClass(ProjectTemplateInstantiateProjectRequestRequestedDates2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateInstantiateProjectRequestRequestedDates2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("value"))
              obj.value = _ApiClient.ApiClient.convertToType(data["value"], "Date");
          }
          return obj;
        }
      }]);
      return ProjectTemplateInstantiateProjectRequestRequestedDates2;
    }();
    exports.ProjectTemplateInstantiateProjectRequestRequestedDates = ProjectTemplateInstantiateProjectRequestRequestedDates;
    ProjectTemplateInstantiateProjectRequestRequestedDates.prototype.gid = void 0;
    ProjectTemplateInstantiateProjectRequestRequestedDates.prototype.value = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateInstantiateProjectRequestRequestedRoles.js
var require_ProjectTemplateInstantiateProjectRequestRequestedRoles = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateInstantiateProjectRequestRequestedRoles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateInstantiateProjectRequestRequestedRoles = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateInstantiateProjectRequestRequestedRoles = /* @__PURE__ */ function() {
      function ProjectTemplateInstantiateProjectRequestRequestedRoles2() {
        _classCallCheck(this, ProjectTemplateInstantiateProjectRequestRequestedRoles2);
      }
      _createClass(ProjectTemplateInstantiateProjectRequestRequestedRoles2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateInstantiateProjectRequestRequestedRoles2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("value"))
              obj.value = _ApiClient.ApiClient.convertToType(data["value"], "String");
          }
          return obj;
        }
      }]);
      return ProjectTemplateInstantiateProjectRequestRequestedRoles2;
    }();
    exports.ProjectTemplateInstantiateProjectRequestRequestedRoles = ProjectTemplateInstantiateProjectRequestRequestedRoles;
    ProjectTemplateInstantiateProjectRequestRequestedRoles.prototype.gid = void 0;
    ProjectTemplateInstantiateProjectRequestRequestedRoles.prototype.value = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateInstantiateProjectRequest.js
var require_ProjectTemplateInstantiateProjectRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateInstantiateProjectRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateInstantiateProjectRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectTemplateInstantiateProjectRequestRequestedDates = require_ProjectTemplateInstantiateProjectRequestRequestedDates();
    var _ProjectTemplateInstantiateProjectRequestRequestedRoles = require_ProjectTemplateInstantiateProjectRequestRequestedRoles();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateInstantiateProjectRequest = /* @__PURE__ */ function() {
      function ProjectTemplateInstantiateProjectRequest2(name) {
        _classCallCheck(this, ProjectTemplateInstantiateProjectRequest2);
        this.name = name;
      }
      _createClass(ProjectTemplateInstantiateProjectRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateInstantiateProjectRequest2();
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("is_strict"))
              obj.is_strict = _ApiClient.ApiClient.convertToType(data["is_strict"], "Boolean");
            if (data.hasOwnProperty("requested_dates"))
              obj.requested_dates = _ApiClient.ApiClient.convertToType(data["requested_dates"], [_ProjectTemplateInstantiateProjectRequestRequestedDates.ProjectTemplateInstantiateProjectRequestRequestedDates]);
            if (data.hasOwnProperty("requested_roles"))
              obj.requested_roles = _ApiClient.ApiClient.convertToType(data["requested_roles"], [_ProjectTemplateInstantiateProjectRequestRequestedRoles.ProjectTemplateInstantiateProjectRequestRequestedRoles]);
          }
          return obj;
        }
      }]);
      return ProjectTemplateInstantiateProjectRequest2;
    }();
    exports.ProjectTemplateInstantiateProjectRequest = ProjectTemplateInstantiateProjectRequest;
    ProjectTemplateInstantiateProjectRequest.prototype.name = void 0;
    ProjectTemplateInstantiateProjectRequest.prototype.team = void 0;
    ProjectTemplateInstantiateProjectRequest.prototype._public = void 0;
    ProjectTemplateInstantiateProjectRequest.prototype.is_strict = void 0;
    ProjectTemplateInstantiateProjectRequest.prototype.requested_dates = void 0;
    ProjectTemplateInstantiateProjectRequest.prototype.requested_roles = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateGidInstantiateProjectBody.js
var require_ProjectTemplateGidInstantiateProjectBody = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateGidInstantiateProjectBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateGidInstantiateProjectBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectTemplateInstantiateProjectRequest = require_ProjectTemplateInstantiateProjectRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateGidInstantiateProjectBody = /* @__PURE__ */ function() {
      function ProjectTemplateGidInstantiateProjectBody2() {
        _classCallCheck(this, ProjectTemplateGidInstantiateProjectBody2);
      }
      _createClass(ProjectTemplateGidInstantiateProjectBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateGidInstantiateProjectBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectTemplateInstantiateProjectRequest.ProjectTemplateInstantiateProjectRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectTemplateGidInstantiateProjectBody2;
    }();
    exports.ProjectTemplateGidInstantiateProjectBody = ProjectTemplateGidInstantiateProjectBody;
    ProjectTemplateGidInstantiateProjectBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateResponse.js
var require_ProjectTemplateResponse = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectTemplateBaseRequestedDates = require_ProjectTemplateBaseRequestedDates();
    var _ProjectTemplateBaseRequestedRoles = require_ProjectTemplateBaseRequestedRoles();
    var _ProjectTemplateBaseTeam = require_ProjectTemplateBaseTeam();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateResponse = /* @__PURE__ */ function() {
      function ProjectTemplateResponse2() {
        _classCallCheck(this, ProjectTemplateResponse2);
      }
      _createClass(ProjectTemplateResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("html_description"))
              obj.html_description = _ApiClient.ApiClient.convertToType(data["html_description"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("team"))
              obj.team = _ProjectTemplateBaseTeam.ProjectTemplateBaseTeam.constructFromObject(data["team"]);
            if (data.hasOwnProperty("requested_dates"))
              obj.requested_dates = _ApiClient.ApiClient.convertToType(data["requested_dates"], [_ProjectTemplateBaseRequestedDates.ProjectTemplateBaseRequestedDates]);
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("requested_roles"))
              obj.requested_roles = _ApiClient.ApiClient.convertToType(data["requested_roles"], [_ProjectTemplateBaseRequestedRoles.ProjectTemplateBaseRequestedRoles]);
          }
          return obj;
        }
      }]);
      return ProjectTemplateResponse2;
    }();
    exports.ProjectTemplateResponse = ProjectTemplateResponse;
    ProjectTemplateResponse.prototype.gid = void 0;
    ProjectTemplateResponse.prototype.resource_type = void 0;
    ProjectTemplateResponse.prototype.name = void 0;
    ProjectTemplateResponse.prototype.description = void 0;
    ProjectTemplateResponse.prototype.html_description = void 0;
    ProjectTemplateResponse.prototype._public = void 0;
    ProjectTemplateResponse.prototype.owner = void 0;
    ProjectTemplateResponse.prototype.team = void 0;
    ProjectTemplateResponse.prototype.requested_dates = void 0;
    ProjectTemplateResponse.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    ProjectTemplateResponse.prototype.color = void 0;
    ProjectTemplateResponse.prototype.requested_roles = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateResponseArray.js
var require_ProjectTemplateResponseArray = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _ProjectTemplateResponse = require_ProjectTemplateResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateResponseArray = /* @__PURE__ */ function() {
      function ProjectTemplateResponseArray2(data) {
        _classCallCheck(this, ProjectTemplateResponseArray2);
        this.data = data;
      }
      _createClass(ProjectTemplateResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_ProjectTemplateResponse.ProjectTemplateResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return ProjectTemplateResponseArray2;
    }();
    exports.ProjectTemplateResponseArray = ProjectTemplateResponseArray;
    ProjectTemplateResponseArray.prototype.data = void 0;
    ProjectTemplateResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/ProjectTemplateResponseData.js
var require_ProjectTemplateResponseData = __commonJS({
  "node_modules/asana/dist/model/ProjectTemplateResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplateResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectTemplateResponse = require_ProjectTemplateResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplateResponseData = /* @__PURE__ */ function() {
      function ProjectTemplateResponseData2(data) {
        _classCallCheck(this, ProjectTemplateResponseData2);
        this.data = data;
      }
      _createClass(ProjectTemplateResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectTemplateResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectTemplateResponse.ProjectTemplateResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectTemplateResponseData2;
    }();
    exports.ProjectTemplateResponseData = ProjectTemplateResponseData;
    ProjectTemplateResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectUpdateRequest.js
var require_ProjectUpdateRequest = __commonJS({
  "node_modules/asana/dist/model/ProjectUpdateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectUpdateRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _PortfolioResponseCustomFieldSettings = require_PortfolioResponseCustomFieldSettings();
    var _ProjectBaseCurrentStatus = require_ProjectBaseCurrentStatus();
    var _ProjectBaseCurrentStatusUpdate = require_ProjectBaseCurrentStatusUpdate();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectUpdateRequest = /* @__PURE__ */ function() {
      function ProjectUpdateRequest2() {
        _classCallCheck(this, ProjectUpdateRequest2);
      }
      _createClass(ProjectUpdateRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectUpdateRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("archived"))
              obj.archived = _ApiClient.ApiClient.convertToType(data["archived"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("current_status"))
              obj.current_status = _ProjectBaseCurrentStatus.ProjectBaseCurrentStatus.constructFromObject(data["current_status"]);
            if (data.hasOwnProperty("current_status_update"))
              obj.current_status_update = _ProjectBaseCurrentStatusUpdate.ProjectBaseCurrentStatusUpdate.constructFromObject(data["current_status_update"]);
            if (data.hasOwnProperty("custom_field_settings"))
              obj.custom_field_settings = _ApiClient.ApiClient.convertToType(data["custom_field_settings"], [_PortfolioResponseCustomFieldSettings.PortfolioResponseCustomFieldSettings]);
            if (data.hasOwnProperty("default_view"))
              obj.default_view = _ApiClient.ApiClient.convertToType(data["default_view"], "String");
            if (data.hasOwnProperty("due_date"))
              obj.due_date = _ApiClient.ApiClient.convertToType(data["due_date"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("members"))
              obj.members = _ApiClient.ApiClient.convertToType(data["members"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("public"))
              obj._public = _ApiClient.ApiClient.convertToType(data["public"], "Boolean");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("default_access_level"))
              obj.default_access_level = _ApiClient.ApiClient.convertToType(data["default_access_level"], "String");
            if (data.hasOwnProperty("custom_fields"))
              obj.custom_fields = _ApiClient.ApiClient.convertToType(data["custom_fields"], {
                "String": "String"
              });
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], "String");
            if (data.hasOwnProperty("team"))
              obj.team = _ApiClient.ApiClient.convertToType(data["team"], "String");
          }
          return obj;
        }
      }]);
      return ProjectUpdateRequest2;
    }();
    exports.ProjectUpdateRequest = ProjectUpdateRequest;
    ProjectUpdateRequest.prototype.gid = void 0;
    ProjectUpdateRequest.prototype.resource_type = void 0;
    ProjectUpdateRequest.prototype.name = void 0;
    ProjectUpdateRequest.prototype.archived = void 0;
    ProjectUpdateRequest.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "none"
       * @const
       */
      none: "none",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    ProjectUpdateRequest.prototype.color = void 0;
    ProjectUpdateRequest.prototype.created_at = void 0;
    ProjectUpdateRequest.prototype.current_status = void 0;
    ProjectUpdateRequest.prototype.current_status_update = void 0;
    ProjectUpdateRequest.prototype.custom_field_settings = void 0;
    ProjectUpdateRequest.DefaultViewEnum = {
      /**
       * value: "list"
       * @const
       */
      list: "list",
      /**
       * value: "board"
       * @const
       */
      board: "board",
      /**
       * value: "calendar"
       * @const
       */
      calendar: "calendar",
      /**
       * value: "timeline"
       * @const
       */
      timeline: "timeline"
    };
    ProjectUpdateRequest.prototype.default_view = void 0;
    ProjectUpdateRequest.prototype.due_date = void 0;
    ProjectUpdateRequest.prototype.due_on = void 0;
    ProjectUpdateRequest.prototype.html_notes = void 0;
    ProjectUpdateRequest.prototype.members = void 0;
    ProjectUpdateRequest.prototype.modified_at = void 0;
    ProjectUpdateRequest.prototype.notes = void 0;
    ProjectUpdateRequest.prototype._public = void 0;
    ProjectUpdateRequest.prototype.start_on = void 0;
    ProjectUpdateRequest.DefaultAccessLevelEnum = {
      /**
       * value: "admin"
       * @const
       */
      admin: "admin",
      /**
       * value: "editor"
       * @const
       */
      editor: "editor",
      /**
       * value: "commenter"
       * @const
       */
      commenter: "commenter",
      /**
       * value: "viewer"
       * @const
       */
      viewer: "viewer"
    };
    ProjectUpdateRequest.prototype.default_access_level = void 0;
    ProjectUpdateRequest.prototype.custom_fields = void 0;
    ProjectUpdateRequest.prototype.followers = void 0;
    ProjectUpdateRequest.prototype.owner = void 0;
    ProjectUpdateRequest.prototype.team = void 0;
  }
});

// node_modules/asana/dist/model/ProjectsBody.js
var require_ProjectsBody = __commonJS({
  "node_modules/asana/dist/model/ProjectsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectRequest = require_ProjectRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectsBody = /* @__PURE__ */ function() {
      function ProjectsBody2() {
        _classCallCheck(this, ProjectsBody2);
      }
      _createClass(ProjectsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectRequest.ProjectRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectsBody2;
    }();
    exports.ProjectsBody = ProjectsBody;
    ProjectsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/ProjectsProjectGidBody.js
var require_ProjectsProjectGidBody = __commonJS({
  "node_modules/asana/dist/model/ProjectsProjectGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectsProjectGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectUpdateRequest = require_ProjectUpdateRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectsProjectGidBody = /* @__PURE__ */ function() {
      function ProjectsProjectGidBody2() {
        _classCallCheck(this, ProjectsProjectGidBody2);
      }
      _createClass(ProjectsProjectGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ProjectsProjectGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectUpdateRequest.ProjectUpdateRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return ProjectsProjectGidBody2;
    }();
    exports.ProjectsProjectGidBody = ProjectsProjectGidBody;
    ProjectsProjectGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/RequestedRoleRequest.js
var require_RequestedRoleRequest = __commonJS({
  "node_modules/asana/dist/model/RequestedRoleRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RequestedRoleRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RequestedRoleRequest = /* @__PURE__ */ function() {
      function RequestedRoleRequest2() {
        _classCallCheck(this, RequestedRoleRequest2);
      }
      _createClass(RequestedRoleRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RequestedRoleRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("value"))
              obj.value = _ApiClient.ApiClient.convertToType(data["value"], "String");
          }
          return obj;
        }
      }]);
      return RequestedRoleRequest2;
    }();
    exports.RequestedRoleRequest = RequestedRoleRequest;
    RequestedRoleRequest.prototype.gid = void 0;
    RequestedRoleRequest.prototype.value = void 0;
  }
});

// node_modules/asana/dist/model/RuleTriggerRequest.js
var require_RuleTriggerRequest = __commonJS({
  "node_modules/asana/dist/model/RuleTriggerRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RuleTriggerRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RuleTriggerRequest = /* @__PURE__ */ function() {
      function RuleTriggerRequest2(resource, action_data) {
        _classCallCheck(this, RuleTriggerRequest2);
        this.resource = resource;
        this.action_data = action_data;
      }
      _createClass(RuleTriggerRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RuleTriggerRequest2();
            if (data.hasOwnProperty("resource"))
              obj.resource = _ApiClient.ApiClient.convertToType(data["resource"], "String");
            if (data.hasOwnProperty("action_data"))
              obj.action_data = _ApiClient.ApiClient.convertToType(data["action_data"], {
                "String": Object
              });
          }
          return obj;
        }
      }]);
      return RuleTriggerRequest2;
    }();
    exports.RuleTriggerRequest = RuleTriggerRequest;
    RuleTriggerRequest.prototype.resource = void 0;
    RuleTriggerRequest.prototype.action_data = void 0;
  }
});

// node_modules/asana/dist/model/RuleTriggerGidRunBody.js
var require_RuleTriggerGidRunBody = __commonJS({
  "node_modules/asana/dist/model/RuleTriggerGidRunBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RuleTriggerGidRunBody = void 0;
    var _ApiClient = require_ApiClient();
    var _RuleTriggerRequest = require_RuleTriggerRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RuleTriggerGidRunBody = /* @__PURE__ */ function() {
      function RuleTriggerGidRunBody2() {
        _classCallCheck(this, RuleTriggerGidRunBody2);
      }
      _createClass(RuleTriggerGidRunBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RuleTriggerGidRunBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _RuleTriggerRequest.RuleTriggerRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return RuleTriggerGidRunBody2;
    }();
    exports.RuleTriggerGidRunBody = RuleTriggerGidRunBody;
    RuleTriggerGidRunBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/RuleTriggerResponse.js
var require_RuleTriggerResponse = __commonJS({
  "node_modules/asana/dist/model/RuleTriggerResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RuleTriggerResponse = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RuleTriggerResponse = /* @__PURE__ */ function() {
      function RuleTriggerResponse2() {
        _classCallCheck(this, RuleTriggerResponse2);
      }
      _createClass(RuleTriggerResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RuleTriggerResponse2();
            if (data.hasOwnProperty("message"))
              obj.message = _ApiClient.ApiClient.convertToType(data["message"], "String");
          }
          return obj;
        }
      }]);
      return RuleTriggerResponse2;
    }();
    exports.RuleTriggerResponse = RuleTriggerResponse;
    RuleTriggerResponse.prototype.message = void 0;
  }
});

// node_modules/asana/dist/model/RuleTriggerResponseData.js
var require_RuleTriggerResponseData = __commonJS({
  "node_modules/asana/dist/model/RuleTriggerResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RuleTriggerResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _RuleTriggerResponse = require_RuleTriggerResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RuleTriggerResponseData = /* @__PURE__ */ function() {
      function RuleTriggerResponseData2(data) {
        _classCallCheck(this, RuleTriggerResponseData2);
        this.data = data;
      }
      _createClass(RuleTriggerResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new RuleTriggerResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _RuleTriggerResponse.RuleTriggerResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return RuleTriggerResponseData2;
    }();
    exports.RuleTriggerResponseData = RuleTriggerResponseData;
    RuleTriggerResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/SectionBase.js
var require_SectionBase = __commonJS({
  "node_modules/asana/dist/model/SectionBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionBase = /* @__PURE__ */ function() {
      function SectionBase2() {
        _classCallCheck(this, SectionBase2);
      }
      _createClass(SectionBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return SectionBase2;
    }();
    exports.SectionBase = SectionBase;
    SectionBase.prototype.gid = void 0;
    SectionBase.prototype.resource_type = void 0;
    SectionBase.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/SectionCompact.js
var require_SectionCompact = __commonJS({
  "node_modules/asana/dist/model/SectionCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionCompact = /* @__PURE__ */ function() {
      function SectionCompact2() {
        _classCallCheck(this, SectionCompact2);
      }
      _createClass(SectionCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return SectionCompact2;
    }();
    exports.SectionCompact = SectionCompact;
    SectionCompact.prototype.gid = void 0;
    SectionCompact.prototype.resource_type = void 0;
    SectionCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/SectionTaskInsertRequest.js
var require_SectionTaskInsertRequest = __commonJS({
  "node_modules/asana/dist/model/SectionTaskInsertRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionTaskInsertRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionTaskInsertRequest = /* @__PURE__ */ function() {
      function SectionTaskInsertRequest2(task) {
        _classCallCheck(this, SectionTaskInsertRequest2);
        this.task = task;
      }
      _createClass(SectionTaskInsertRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionTaskInsertRequest2();
            if (data.hasOwnProperty("task"))
              obj.task = _ApiClient.ApiClient.convertToType(data["task"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
          }
          return obj;
        }
      }]);
      return SectionTaskInsertRequest2;
    }();
    exports.SectionTaskInsertRequest = SectionTaskInsertRequest;
    SectionTaskInsertRequest.prototype.task = void 0;
    SectionTaskInsertRequest.prototype.insert_before = void 0;
    SectionTaskInsertRequest.prototype.insert_after = void 0;
  }
});

// node_modules/asana/dist/model/SectionGidAddTaskBody.js
var require_SectionGidAddTaskBody = __commonJS({
  "node_modules/asana/dist/model/SectionGidAddTaskBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionGidAddTaskBody = void 0;
    var _ApiClient = require_ApiClient();
    var _SectionTaskInsertRequest = require_SectionTaskInsertRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionGidAddTaskBody = /* @__PURE__ */ function() {
      function SectionGidAddTaskBody2() {
        _classCallCheck(this, SectionGidAddTaskBody2);
      }
      _createClass(SectionGidAddTaskBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionGidAddTaskBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _SectionTaskInsertRequest.SectionTaskInsertRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return SectionGidAddTaskBody2;
    }();
    exports.SectionGidAddTaskBody = SectionGidAddTaskBody;
    SectionGidAddTaskBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/SectionResponse.js
var require_SectionResponse = __commonJS({
  "node_modules/asana/dist/model/SectionResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _JobBaseNewProject = require_JobBaseNewProject();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionResponse = /* @__PURE__ */ function() {
      function SectionResponse2() {
        _classCallCheck(this, SectionResponse2);
      }
      _createClass(SectionResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("project"))
              obj.project = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["project"]);
            if (data.hasOwnProperty("projects"))
              obj.projects = _ApiClient.ApiClient.convertToType(data["projects"], [_JobBaseNewProject.JobBaseNewProject]);
          }
          return obj;
        }
      }]);
      return SectionResponse2;
    }();
    exports.SectionResponse = SectionResponse;
    SectionResponse.prototype.gid = void 0;
    SectionResponse.prototype.resource_type = void 0;
    SectionResponse.prototype.name = void 0;
    SectionResponse.prototype.created_at = void 0;
    SectionResponse.prototype.project = void 0;
    SectionResponse.prototype.projects = void 0;
  }
});

// node_modules/asana/dist/model/SectionResponseArray.js
var require_SectionResponseArray = __commonJS({
  "node_modules/asana/dist/model/SectionResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _SectionResponse = require_SectionResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionResponseArray = /* @__PURE__ */ function() {
      function SectionResponseArray2(data) {
        _classCallCheck(this, SectionResponseArray2);
        this.data = data;
      }
      _createClass(SectionResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_SectionResponse.SectionResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return SectionResponseArray2;
    }();
    exports.SectionResponseArray = SectionResponseArray;
    SectionResponseArray.prototype.data = void 0;
    SectionResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/SectionResponseData.js
var require_SectionResponseData = __commonJS({
  "node_modules/asana/dist/model/SectionResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _SectionResponse = require_SectionResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionResponseData = /* @__PURE__ */ function() {
      function SectionResponseData2(data) {
        _classCallCheck(this, SectionResponseData2);
        this.data = data;
      }
      _createClass(SectionResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _SectionResponse.SectionResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return SectionResponseData2;
    }();
    exports.SectionResponseData = SectionResponseData;
    SectionResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/SectionsInsertBody.js
var require_SectionsInsertBody = __commonJS({
  "node_modules/asana/dist/model/SectionsInsertBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionsInsertBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectSectionInsertRequest = require_ProjectSectionInsertRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionsInsertBody = /* @__PURE__ */ function() {
      function SectionsInsertBody2() {
        _classCallCheck(this, SectionsInsertBody2);
      }
      _createClass(SectionsInsertBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionsInsertBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectSectionInsertRequest.ProjectSectionInsertRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return SectionsInsertBody2;
    }();
    exports.SectionsInsertBody = SectionsInsertBody;
    SectionsInsertBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/SectionsSectionGidBody.js
var require_SectionsSectionGidBody = __commonJS({
  "node_modules/asana/dist/model/SectionsSectionGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionsSectionGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _SectionRequest = require_SectionRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionsSectionGidBody = /* @__PURE__ */ function() {
      function SectionsSectionGidBody2() {
        _classCallCheck(this, SectionsSectionGidBody2);
      }
      _createClass(SectionsSectionGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SectionsSectionGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _SectionRequest.SectionRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return SectionsSectionGidBody2;
    }();
    exports.SectionsSectionGidBody = SectionsSectionGidBody;
    SectionsSectionGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdateBase.js
var require_StatusUpdateBase = __commonJS({
  "node_modules/asana/dist/model/StatusUpdateBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdateBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdateBase = /* @__PURE__ */ function() {
      function StatusUpdateBase2(text, status_type) {
        _classCallCheck(this, StatusUpdateBase2);
        this.text = text;
        this.status_type = status_type;
      }
      _createClass(StatusUpdateBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdateBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("status_type"))
              obj.status_type = _ApiClient.ApiClient.convertToType(data["status_type"], "String");
          }
          return obj;
        }
      }]);
      return StatusUpdateBase2;
    }();
    exports.StatusUpdateBase = StatusUpdateBase;
    StatusUpdateBase.prototype.gid = void 0;
    StatusUpdateBase.prototype.resource_type = void 0;
    StatusUpdateBase.prototype.title = void 0;
    StatusUpdateBase.ResourceSubtypeEnum = {
      /**
       * value: "project_status_update"
       * @const
       */
      project_status_update: "project_status_update",
      /**
       * value: "portfolio_status_update"
       * @const
       */
      portfolio_status_update: "portfolio_status_update",
      /**
       * value: "goal_status_update"
       * @const
       */
      goal_status_update: "goal_status_update"
    };
    StatusUpdateBase.prototype.resource_subtype = void 0;
    StatusUpdateBase.prototype.text = void 0;
    StatusUpdateBase.prototype.html_text = void 0;
    StatusUpdateBase.StatusTypeEnum = {
      /**
       * value: "on_track"
       * @const
       */
      on_track: "on_track",
      /**
       * value: "at_risk"
       * @const
       */
      at_risk: "at_risk",
      /**
       * value: "off_track"
       * @const
       */
      off_track: "off_track",
      /**
       * value: "on_hold"
       * @const
       */
      on_hold: "on_hold",
      /**
       * value: "complete"
       * @const
       */
      complete: "complete",
      /**
       * value: "achieved"
       * @const
       */
      achieved: "achieved",
      /**
       * value: "partial"
       * @const
       */
      partial: "partial",
      /**
       * value: "missed"
       * @const
       */
      missed: "missed",
      /**
       * value: "dropped"
       * @const
       */
      dropped: "dropped"
    };
    StatusUpdateBase.prototype.status_type = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdateCompact.js
var require_StatusUpdateCompact = __commonJS({
  "node_modules/asana/dist/model/StatusUpdateCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdateCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdateCompact = /* @__PURE__ */ function() {
      function StatusUpdateCompact2() {
        _classCallCheck(this, StatusUpdateCompact2);
      }
      _createClass(StatusUpdateCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdateCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
          }
          return obj;
        }
      }]);
      return StatusUpdateCompact2;
    }();
    exports.StatusUpdateCompact = StatusUpdateCompact;
    StatusUpdateCompact.prototype.gid = void 0;
    StatusUpdateCompact.prototype.resource_type = void 0;
    StatusUpdateCompact.prototype.title = void 0;
    StatusUpdateCompact.ResourceSubtypeEnum = {
      /**
       * value: "project_status_update"
       * @const
       */
      project_status_update: "project_status_update",
      /**
       * value: "portfolio_status_update"
       * @const
       */
      portfolio_status_update: "portfolio_status_update",
      /**
       * value: "goal_status_update"
       * @const
       */
      goal_status_update: "goal_status_update"
    };
    StatusUpdateCompact.prototype.resource_subtype = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdateRequest.js
var require_StatusUpdateRequest = __commonJS({
  "node_modules/asana/dist/model/StatusUpdateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdateRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdateRequest = /* @__PURE__ */ function() {
      function StatusUpdateRequest2(text, status_type, parent) {
        _classCallCheck(this, StatusUpdateRequest2);
        this.text = text;
        this.status_type = status_type;
        this.parent = parent;
      }
      _createClass(StatusUpdateRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdateRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("status_type"))
              obj.status_type = _ApiClient.ApiClient.convertToType(data["status_type"], "String");
            if (data.hasOwnProperty("parent"))
              obj.parent = _ApiClient.ApiClient.convertToType(data["parent"], "String");
          }
          return obj;
        }
      }]);
      return StatusUpdateRequest2;
    }();
    exports.StatusUpdateRequest = StatusUpdateRequest;
    StatusUpdateRequest.prototype.gid = void 0;
    StatusUpdateRequest.prototype.resource_type = void 0;
    StatusUpdateRequest.prototype.title = void 0;
    StatusUpdateRequest.ResourceSubtypeEnum = {
      /**
       * value: "project_status_update"
       * @const
       */
      project_status_update: "project_status_update",
      /**
       * value: "portfolio_status_update"
       * @const
       */
      portfolio_status_update: "portfolio_status_update",
      /**
       * value: "goal_status_update"
       * @const
       */
      goal_status_update: "goal_status_update"
    };
    StatusUpdateRequest.prototype.resource_subtype = void 0;
    StatusUpdateRequest.prototype.text = void 0;
    StatusUpdateRequest.prototype.html_text = void 0;
    StatusUpdateRequest.StatusTypeEnum = {
      /**
       * value: "on_track"
       * @const
       */
      on_track: "on_track",
      /**
       * value: "at_risk"
       * @const
       */
      at_risk: "at_risk",
      /**
       * value: "off_track"
       * @const
       */
      off_track: "off_track",
      /**
       * value: "on_hold"
       * @const
       */
      on_hold: "on_hold",
      /**
       * value: "complete"
       * @const
       */
      complete: "complete",
      /**
       * value: "achieved"
       * @const
       */
      achieved: "achieved",
      /**
       * value: "partial"
       * @const
       */
      partial: "partial",
      /**
       * value: "missed"
       * @const
       */
      missed: "missed",
      /**
       * value: "dropped"
       * @const
       */
      dropped: "dropped"
    };
    StatusUpdateRequest.prototype.status_type = void 0;
    StatusUpdateRequest.prototype.parent = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdateResponseParent.js
var require_StatusUpdateResponseParent = __commonJS({
  "node_modules/asana/dist/model/StatusUpdateResponseParent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdateResponseParent = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdateResponseParent = /* @__PURE__ */ function() {
      function StatusUpdateResponseParent2() {
        _classCallCheck(this, StatusUpdateResponseParent2);
      }
      _createClass(StatusUpdateResponseParent2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdateResponseParent2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return StatusUpdateResponseParent2;
    }();
    exports.StatusUpdateResponseParent = StatusUpdateResponseParent;
    StatusUpdateResponseParent.prototype.gid = void 0;
    StatusUpdateResponseParent.prototype.resource_type = void 0;
    StatusUpdateResponseParent.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdateResponse.js
var require_StatusUpdateResponse = __commonJS({
  "node_modules/asana/dist/model/StatusUpdateResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdateResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseLikes = require_GoalResponseLikes();
    var _StatusUpdateResponseParent = require_StatusUpdateResponseParent();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdateResponse = /* @__PURE__ */ function() {
      function StatusUpdateResponse2(text, status_type) {
        _classCallCheck(this, StatusUpdateResponse2);
        this.text = text;
        this.status_type = status_type;
      }
      _createClass(StatusUpdateResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdateResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("status_type"))
              obj.status_type = _ApiClient.ApiClient.convertToType(data["status_type"], "String");
            if (data.hasOwnProperty("author"))
              obj.author = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["author"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("hearted"))
              obj.hearted = _ApiClient.ApiClient.convertToType(data["hearted"], "Boolean");
            if (data.hasOwnProperty("hearts"))
              obj.hearts = _ApiClient.ApiClient.convertToType(data["hearts"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("likes"))
              obj.likes = _ApiClient.ApiClient.convertToType(data["likes"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("num_hearts"))
              obj.num_hearts = _ApiClient.ApiClient.convertToType(data["num_hearts"], "Number");
            if (data.hasOwnProperty("num_likes"))
              obj.num_likes = _ApiClient.ApiClient.convertToType(data["num_likes"], "Number");
            if (data.hasOwnProperty("parent"))
              obj.parent = _StatusUpdateResponseParent.StatusUpdateResponseParent.constructFromObject(data["parent"]);
          }
          return obj;
        }
      }]);
      return StatusUpdateResponse2;
    }();
    exports.StatusUpdateResponse = StatusUpdateResponse;
    StatusUpdateResponse.prototype.gid = void 0;
    StatusUpdateResponse.prototype.resource_type = void 0;
    StatusUpdateResponse.prototype.title = void 0;
    StatusUpdateResponse.ResourceSubtypeEnum = {
      /**
       * value: "project_status_update"
       * @const
       */
      project_status_update: "project_status_update",
      /**
       * value: "portfolio_status_update"
       * @const
       */
      portfolio_status_update: "portfolio_status_update",
      /**
       * value: "goal_status_update"
       * @const
       */
      goal_status_update: "goal_status_update"
    };
    StatusUpdateResponse.prototype.resource_subtype = void 0;
    StatusUpdateResponse.prototype.text = void 0;
    StatusUpdateResponse.prototype.html_text = void 0;
    StatusUpdateResponse.StatusTypeEnum = {
      /**
       * value: "on_track"
       * @const
       */
      on_track: "on_track",
      /**
       * value: "at_risk"
       * @const
       */
      at_risk: "at_risk",
      /**
       * value: "off_track"
       * @const
       */
      off_track: "off_track",
      /**
       * value: "on_hold"
       * @const
       */
      on_hold: "on_hold",
      /**
       * value: "complete"
       * @const
       */
      complete: "complete",
      /**
       * value: "achieved"
       * @const
       */
      achieved: "achieved",
      /**
       * value: "partial"
       * @const
       */
      partial: "partial",
      /**
       * value: "missed"
       * @const
       */
      missed: "missed",
      /**
       * value: "dropped"
       * @const
       */
      dropped: "dropped"
    };
    StatusUpdateResponse.prototype.status_type = void 0;
    StatusUpdateResponse.prototype.author = void 0;
    StatusUpdateResponse.prototype.created_at = void 0;
    StatusUpdateResponse.prototype.created_by = void 0;
    StatusUpdateResponse.prototype.hearted = void 0;
    StatusUpdateResponse.prototype.hearts = void 0;
    StatusUpdateResponse.prototype.liked = void 0;
    StatusUpdateResponse.prototype.likes = void 0;
    StatusUpdateResponse.prototype.modified_at = void 0;
    StatusUpdateResponse.prototype.num_hearts = void 0;
    StatusUpdateResponse.prototype.num_likes = void 0;
    StatusUpdateResponse.prototype.parent = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdateResponseArray.js
var require_StatusUpdateResponseArray = __commonJS({
  "node_modules/asana/dist/model/StatusUpdateResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdateResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _StatusUpdateResponse = require_StatusUpdateResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdateResponseArray = /* @__PURE__ */ function() {
      function StatusUpdateResponseArray2(data) {
        _classCallCheck(this, StatusUpdateResponseArray2);
        this.data = data;
      }
      _createClass(StatusUpdateResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdateResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_StatusUpdateResponse.StatusUpdateResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return StatusUpdateResponseArray2;
    }();
    exports.StatusUpdateResponseArray = StatusUpdateResponseArray;
    StatusUpdateResponseArray.prototype.data = void 0;
    StatusUpdateResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdateResponseData.js
var require_StatusUpdateResponseData = __commonJS({
  "node_modules/asana/dist/model/StatusUpdateResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdateResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _StatusUpdateResponse = require_StatusUpdateResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdateResponseData = /* @__PURE__ */ function() {
      function StatusUpdateResponseData2(data) {
        _classCallCheck(this, StatusUpdateResponseData2);
        this.data = data;
      }
      _createClass(StatusUpdateResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdateResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _StatusUpdateResponse.StatusUpdateResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return StatusUpdateResponseData2;
    }();
    exports.StatusUpdateResponseData = StatusUpdateResponseData;
    StatusUpdateResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/StatusUpdatesBody.js
var require_StatusUpdatesBody = __commonJS({
  "node_modules/asana/dist/model/StatusUpdatesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdatesBody = void 0;
    var _ApiClient = require_ApiClient();
    var _StatusUpdateRequest = require_StatusUpdateRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdatesBody = /* @__PURE__ */ function() {
      function StatusUpdatesBody2() {
        _classCallCheck(this, StatusUpdatesBody2);
      }
      _createClass(StatusUpdatesBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StatusUpdatesBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _StatusUpdateRequest.StatusUpdateRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return StatusUpdatesBody2;
    }();
    exports.StatusUpdatesBody = StatusUpdatesBody;
    StatusUpdatesBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/StoryRequest.js
var require_StoryRequest = __commonJS({
  "node_modules/asana/dist/model/StoryRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryRequest = /* @__PURE__ */ function() {
      function StoryRequest2() {
        _classCallCheck(this, StoryRequest2);
      }
      _createClass(StoryRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("is_pinned"))
              obj.is_pinned = _ApiClient.ApiClient.convertToType(data["is_pinned"], "Boolean");
            if (data.hasOwnProperty("sticker_name"))
              obj.sticker_name = _ApiClient.ApiClient.convertToType(data["sticker_name"], "String");
          }
          return obj;
        }
      }]);
      return StoryRequest2;
    }();
    exports.StoryRequest = StoryRequest;
    StoryRequest.prototype.gid = void 0;
    StoryRequest.prototype.resource_type = void 0;
    StoryRequest.prototype.created_at = void 0;
    StoryRequest.prototype.resource_subtype = void 0;
    StoryRequest.prototype.text = void 0;
    StoryRequest.prototype.html_text = void 0;
    StoryRequest.prototype.is_pinned = void 0;
    StoryRequest.StickerNameEnum = {
      /**
       * value: "green_checkmark"
       * @const
       */
      green_checkmark: "green_checkmark",
      /**
       * value: "people_dancing"
       * @const
       */
      people_dancing: "people_dancing",
      /**
       * value: "dancing_unicorn"
       * @const
       */
      dancing_unicorn: "dancing_unicorn",
      /**
       * value: "heart"
       * @const
       */
      heart: "heart",
      /**
       * value: "party_popper"
       * @const
       */
      party_popper: "party_popper",
      /**
       * value: "people_waving_flags"
       * @const
       */
      people_waving_flags: "people_waving_flags",
      /**
       * value: "splashing_narwhal"
       * @const
       */
      splashing_narwhal: "splashing_narwhal",
      /**
       * value: "trophy"
       * @const
       */
      trophy: "trophy",
      /**
       * value: "yeti_riding_unicorn"
       * @const
       */
      yeti_riding_unicorn: "yeti_riding_unicorn",
      /**
       * value: "celebrating_people"
       * @const
       */
      celebrating_people: "celebrating_people",
      /**
       * value: "determined_climbers"
       * @const
       */
      determined_climbers: "determined_climbers",
      /**
       * value: "phoenix_spreading_love"
       * @const
       */
      phoenix_spreading_love: "phoenix_spreading_love"
    };
    StoryRequest.prototype.sticker_name = void 0;
  }
});

// node_modules/asana/dist/model/StoriesStoryGidBody.js
var require_StoriesStoryGidBody = __commonJS({
  "node_modules/asana/dist/model/StoriesStoryGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoriesStoryGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _StoryRequest = require_StoryRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoriesStoryGidBody = /* @__PURE__ */ function() {
      function StoriesStoryGidBody2() {
        _classCallCheck(this, StoriesStoryGidBody2);
      }
      _createClass(StoriesStoryGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoriesStoryGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _StoryRequest.StoryRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return StoriesStoryGidBody2;
    }();
    exports.StoriesStoryGidBody = StoriesStoryGidBody;
    StoriesStoryGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/StoryBase.js
var require_StoryBase = __commonJS({
  "node_modules/asana/dist/model/StoryBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryBase = /* @__PURE__ */ function() {
      function StoryBase2() {
        _classCallCheck(this, StoryBase2);
      }
      _createClass(StoryBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("is_pinned"))
              obj.is_pinned = _ApiClient.ApiClient.convertToType(data["is_pinned"], "Boolean");
            if (data.hasOwnProperty("sticker_name"))
              obj.sticker_name = _ApiClient.ApiClient.convertToType(data["sticker_name"], "String");
          }
          return obj;
        }
      }]);
      return StoryBase2;
    }();
    exports.StoryBase = StoryBase;
    StoryBase.prototype.gid = void 0;
    StoryBase.prototype.resource_type = void 0;
    StoryBase.prototype.created_at = void 0;
    StoryBase.prototype.resource_subtype = void 0;
    StoryBase.prototype.text = void 0;
    StoryBase.prototype.html_text = void 0;
    StoryBase.prototype.is_pinned = void 0;
    StoryBase.StickerNameEnum = {
      /**
       * value: "green_checkmark"
       * @const
       */
      green_checkmark: "green_checkmark",
      /**
       * value: "people_dancing"
       * @const
       */
      people_dancing: "people_dancing",
      /**
       * value: "dancing_unicorn"
       * @const
       */
      dancing_unicorn: "dancing_unicorn",
      /**
       * value: "heart"
       * @const
       */
      heart: "heart",
      /**
       * value: "party_popper"
       * @const
       */
      party_popper: "party_popper",
      /**
       * value: "people_waving_flags"
       * @const
       */
      people_waving_flags: "people_waving_flags",
      /**
       * value: "splashing_narwhal"
       * @const
       */
      splashing_narwhal: "splashing_narwhal",
      /**
       * value: "trophy"
       * @const
       */
      trophy: "trophy",
      /**
       * value: "yeti_riding_unicorn"
       * @const
       */
      yeti_riding_unicorn: "yeti_riding_unicorn",
      /**
       * value: "celebrating_people"
       * @const
       */
      celebrating_people: "celebrating_people",
      /**
       * value: "determined_climbers"
       * @const
       */
      determined_climbers: "determined_climbers",
      /**
       * value: "phoenix_spreading_love"
       * @const
       */
      phoenix_spreading_love: "phoenix_spreading_love"
    };
    StoryBase.prototype.sticker_name = void 0;
  }
});

// node_modules/asana/dist/model/StoryCompact.js
var require_StoryCompact = __commonJS({
  "node_modules/asana/dist/model/StoryCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryCompact = /* @__PURE__ */ function() {
      function StoryCompact2() {
        _classCallCheck(this, StoryCompact2);
      }
      _createClass(StoryCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
          }
          return obj;
        }
      }]);
      return StoryCompact2;
    }();
    exports.StoryCompact = StoryCompact;
    StoryCompact.prototype.gid = void 0;
    StoryCompact.prototype.resource_type = void 0;
    StoryCompact.prototype.created_at = void 0;
    StoryCompact.prototype.created_by = void 0;
    StoryCompact.prototype.resource_subtype = void 0;
    StoryCompact.prototype.text = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseAssignee.js
var require_StoryResponseAssignee = __commonJS({
  "node_modules/asana/dist/model/StoryResponseAssignee.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseAssignee = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseAssignee = /* @__PURE__ */ function() {
      function StoryResponseAssignee2() {
        _classCallCheck(this, StoryResponseAssignee2);
      }
      _createClass(StoryResponseAssignee2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseAssignee2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponseAssignee2;
    }();
    exports.StoryResponseAssignee = StoryResponseAssignee;
    StoryResponseAssignee.prototype.gid = void 0;
    StoryResponseAssignee.prototype.resource_type = void 0;
    StoryResponseAssignee.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseCustomField.js
var require_StoryResponseCustomField = __commonJS({
  "node_modules/asana/dist/model/StoryResponseCustomField.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseCustomField = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseCustomField = /* @__PURE__ */ function() {
      function StoryResponseCustomField2() {
        _classCallCheck(this, StoryResponseCustomField2);
      }
      _createClass(StoryResponseCustomField2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseCustomField2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponseCustomField2;
    }();
    exports.StoryResponseCustomField = StoryResponseCustomField;
    StoryResponseCustomField.prototype.gid = void 0;
    StoryResponseCustomField.prototype.resource_type = void 0;
    StoryResponseCustomField.prototype.name = void 0;
    StoryResponseCustomField.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    StoryResponseCustomField.prototype.resource_subtype = void 0;
    StoryResponseCustomField.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    StoryResponseCustomField.prototype.type = void 0;
    StoryResponseCustomField.prototype.enum_options = void 0;
    StoryResponseCustomField.prototype.enabled = void 0;
    StoryResponseCustomField.prototype.is_formula_field = void 0;
    StoryResponseCustomField.prototype.date_value = void 0;
    StoryResponseCustomField.prototype.enum_value = void 0;
    StoryResponseCustomField.prototype.multi_enum_values = void 0;
    StoryResponseCustomField.prototype.number_value = void 0;
    StoryResponseCustomField.prototype.text_value = void 0;
    StoryResponseCustomField.prototype.display_value = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseOldDates.js
var require_StoryResponseOldDates = __commonJS({
  "node_modules/asana/dist/model/StoryResponseOldDates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseOldDates = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseOldDates = /* @__PURE__ */ function() {
      function StoryResponseOldDates2() {
        _classCallCheck(this, StoryResponseOldDates2);
      }
      _createClass(StoryResponseOldDates2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseOldDates2();
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("due_at"))
              obj.due_at = _ApiClient.ApiClient.convertToType(data["due_at"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
          }
          return obj;
        }
      }]);
      return StoryResponseOldDates2;
    }();
    exports.StoryResponseOldDates = StoryResponseOldDates;
    StoryResponseOldDates.prototype.start_on = void 0;
    StoryResponseOldDates.prototype.due_at = void 0;
    StoryResponseOldDates.prototype.due_on = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseOldEnumValue.js
var require_StoryResponseOldEnumValue = __commonJS({
  "node_modules/asana/dist/model/StoryResponseOldEnumValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseOldEnumValue = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseOldEnumValue = /* @__PURE__ */ function() {
      function StoryResponseOldEnumValue2() {
        _classCallCheck(this, StoryResponseOldEnumValue2);
      }
      _createClass(StoryResponseOldEnumValue2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseOldEnumValue2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponseOldEnumValue2;
    }();
    exports.StoryResponseOldEnumValue = StoryResponseOldEnumValue;
    StoryResponseOldEnumValue.prototype.gid = void 0;
    StoryResponseOldEnumValue.prototype.resource_type = void 0;
    StoryResponseOldEnumValue.prototype.name = void 0;
    StoryResponseOldEnumValue.prototype.enabled = void 0;
    StoryResponseOldEnumValue.prototype.color = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseOldSection.js
var require_StoryResponseOldSection = __commonJS({
  "node_modules/asana/dist/model/StoryResponseOldSection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseOldSection = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseOldSection = /* @__PURE__ */ function() {
      function StoryResponseOldSection2() {
        _classCallCheck(this, StoryResponseOldSection2);
      }
      _createClass(StoryResponseOldSection2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseOldSection2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponseOldSection2;
    }();
    exports.StoryResponseOldSection = StoryResponseOldSection;
    StoryResponseOldSection.prototype.gid = void 0;
    StoryResponseOldSection.prototype.resource_type = void 0;
    StoryResponseOldSection.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponsePreviews.js
var require_StoryResponsePreviews = __commonJS({
  "node_modules/asana/dist/model/StoryResponsePreviews.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponsePreviews = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponsePreviews = /* @__PURE__ */ function() {
      function StoryResponsePreviews2() {
        _classCallCheck(this, StoryResponsePreviews2);
      }
      _createClass(StoryResponsePreviews2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponsePreviews2();
            if (data.hasOwnProperty("fallback"))
              obj.fallback = _ApiClient.ApiClient.convertToType(data["fallback"], "String");
            if (data.hasOwnProperty("footer"))
              obj.footer = _ApiClient.ApiClient.convertToType(data["footer"], "String");
            if (data.hasOwnProperty("header"))
              obj.header = _ApiClient.ApiClient.convertToType(data["header"], "String");
            if (data.hasOwnProperty("header_link"))
              obj.header_link = _ApiClient.ApiClient.convertToType(data["header_link"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("title"))
              obj.title = _ApiClient.ApiClient.convertToType(data["title"], "String");
            if (data.hasOwnProperty("title_link"))
              obj.title_link = _ApiClient.ApiClient.convertToType(data["title_link"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponsePreviews2;
    }();
    exports.StoryResponsePreviews = StoryResponsePreviews;
    StoryResponsePreviews.prototype.fallback = void 0;
    StoryResponsePreviews.prototype.footer = void 0;
    StoryResponsePreviews.prototype.header = void 0;
    StoryResponsePreviews.prototype.header_link = void 0;
    StoryResponsePreviews.prototype.html_text = void 0;
    StoryResponsePreviews.prototype.text = void 0;
    StoryResponsePreviews.prototype.title = void 0;
    StoryResponsePreviews.prototype.title_link = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseProject.js
var require_StoryResponseProject = __commonJS({
  "node_modules/asana/dist/model/StoryResponseProject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseProject = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseProject = /* @__PURE__ */ function() {
      function StoryResponseProject2() {
        _classCallCheck(this, StoryResponseProject2);
      }
      _createClass(StoryResponseProject2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseProject2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponseProject2;
    }();
    exports.StoryResponseProject = StoryResponseProject;
    StoryResponseProject.prototype.gid = void 0;
    StoryResponseProject.prototype.resource_type = void 0;
    StoryResponseProject.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseStory.js
var require_StoryResponseStory = __commonJS({
  "node_modules/asana/dist/model/StoryResponseStory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseStory = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseStory = /* @__PURE__ */ function() {
      function StoryResponseStory2() {
        _classCallCheck(this, StoryResponseStory2);
      }
      _createClass(StoryResponseStory2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseStory2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponseStory2;
    }();
    exports.StoryResponseStory = StoryResponseStory;
    StoryResponseStory.prototype.gid = void 0;
    StoryResponseStory.prototype.resource_type = void 0;
    StoryResponseStory.prototype.created_at = void 0;
    StoryResponseStory.prototype.created_by = void 0;
    StoryResponseStory.prototype.resource_subtype = void 0;
    StoryResponseStory.prototype.text = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseTag.js
var require_StoryResponseTag = __commonJS({
  "node_modules/asana/dist/model/StoryResponseTag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseTag = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseTag = /* @__PURE__ */ function() {
      function StoryResponseTag2() {
        _classCallCheck(this, StoryResponseTag2);
      }
      _createClass(StoryResponseTag2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseTag2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return StoryResponseTag2;
    }();
    exports.StoryResponseTag = StoryResponseTag;
    StoryResponseTag.prototype.gid = void 0;
    StoryResponseTag.prototype.resource_type = void 0;
    StoryResponseTag.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseTarget.js
var require_StoryResponseTarget = __commonJS({
  "node_modules/asana/dist/model/StoryResponseTarget.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseTarget = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseTarget = /* @__PURE__ */ function() {
      function StoryResponseTarget2() {
        _classCallCheck(this, StoryResponseTarget2);
      }
      _createClass(StoryResponseTarget2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseTarget2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
          }
          return obj;
        }
      }]);
      return StoryResponseTarget2;
    }();
    exports.StoryResponseTarget = StoryResponseTarget;
    StoryResponseTarget.prototype.gid = void 0;
    StoryResponseTarget.prototype.resource_type = void 0;
    StoryResponseTarget.prototype.name = void 0;
    StoryResponseTarget.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    StoryResponseTarget.prototype.resource_subtype = void 0;
    StoryResponseTarget.prototype.created_by = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseTask.js
var require_StoryResponseTask = __commonJS({
  "node_modules/asana/dist/model/StoryResponseTask.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseTask = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseTask = /* @__PURE__ */ function() {
      function StoryResponseTask2() {
        _classCallCheck(this, StoryResponseTask2);
      }
      _createClass(StoryResponseTask2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseTask2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
          }
          return obj;
        }
      }]);
      return StoryResponseTask2;
    }();
    exports.StoryResponseTask = StoryResponseTask;
    StoryResponseTask.prototype.gid = void 0;
    StoryResponseTask.prototype.resource_type = void 0;
    StoryResponseTask.prototype.name = void 0;
    StoryResponseTask.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    StoryResponseTask.prototype.resource_subtype = void 0;
    StoryResponseTask.prototype.created_by = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponse.js
var require_StoryResponse = __commonJS({
  "node_modules/asana/dist/model/StoryResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseLikes = require_GoalResponseLikes();
    var _StoryResponseAssignee = require_StoryResponseAssignee();
    var _StoryResponseCustomField = require_StoryResponseCustomField();
    var _StoryResponseOldDates = require_StoryResponseOldDates();
    var _StoryResponseOldEnumValue = require_StoryResponseOldEnumValue();
    var _StoryResponseOldSection = require_StoryResponseOldSection();
    var _StoryResponsePreviews = require_StoryResponsePreviews();
    var _StoryResponseProject = require_StoryResponseProject();
    var _StoryResponseStory = require_StoryResponseStory();
    var _StoryResponseTag = require_StoryResponseTag();
    var _StoryResponseTarget = require_StoryResponseTarget();
    var _StoryResponseTask = require_StoryResponseTask();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponse = /* @__PURE__ */ function() {
      function StoryResponse2() {
        _classCallCheck(this, StoryResponse2);
      }
      _createClass(StoryResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("text"))
              obj.text = _ApiClient.ApiClient.convertToType(data["text"], "String");
            if (data.hasOwnProperty("html_text"))
              obj.html_text = _ApiClient.ApiClient.convertToType(data["html_text"], "String");
            if (data.hasOwnProperty("is_pinned"))
              obj.is_pinned = _ApiClient.ApiClient.convertToType(data["is_pinned"], "Boolean");
            if (data.hasOwnProperty("sticker_name"))
              obj.sticker_name = _ApiClient.ApiClient.convertToType(data["sticker_name"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("is_editable"))
              obj.is_editable = _ApiClient.ApiClient.convertToType(data["is_editable"], "Boolean");
            if (data.hasOwnProperty("is_edited"))
              obj.is_edited = _ApiClient.ApiClient.convertToType(data["is_edited"], "Boolean");
            if (data.hasOwnProperty("hearted"))
              obj.hearted = _ApiClient.ApiClient.convertToType(data["hearted"], "Boolean");
            if (data.hasOwnProperty("hearts"))
              obj.hearts = _ApiClient.ApiClient.convertToType(data["hearts"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("num_hearts"))
              obj.num_hearts = _ApiClient.ApiClient.convertToType(data["num_hearts"], "Number");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("likes"))
              obj.likes = _ApiClient.ApiClient.convertToType(data["likes"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("num_likes"))
              obj.num_likes = _ApiClient.ApiClient.convertToType(data["num_likes"], "Number");
            if (data.hasOwnProperty("previews"))
              obj.previews = _ApiClient.ApiClient.convertToType(data["previews"], [_StoryResponsePreviews.StoryResponsePreviews]);
            if (data.hasOwnProperty("old_name"))
              obj.old_name = _ApiClient.ApiClient.convertToType(data["old_name"], "String");
            if (data.hasOwnProperty("new_name"))
              obj.new_name = _ApiClient.ApiClient.convertToType(data["new_name"], "String");
            if (data.hasOwnProperty("old_dates"))
              obj.old_dates = _StoryResponseOldDates.StoryResponseOldDates.constructFromObject(data["old_dates"]);
            if (data.hasOwnProperty("new_dates"))
              obj.new_dates = _StoryResponseOldDates.StoryResponseOldDates.constructFromObject(data["new_dates"]);
            if (data.hasOwnProperty("old_resource_subtype"))
              obj.old_resource_subtype = _ApiClient.ApiClient.convertToType(data["old_resource_subtype"], "String");
            if (data.hasOwnProperty("new_resource_subtype"))
              obj.new_resource_subtype = _ApiClient.ApiClient.convertToType(data["new_resource_subtype"], "String");
            if (data.hasOwnProperty("story"))
              obj.story = _StoryResponseStory.StoryResponseStory.constructFromObject(data["story"]);
            if (data.hasOwnProperty("assignee"))
              obj.assignee = _StoryResponseAssignee.StoryResponseAssignee.constructFromObject(data["assignee"]);
            if (data.hasOwnProperty("follower"))
              obj.follower = _StoryResponseAssignee.StoryResponseAssignee.constructFromObject(data["follower"]);
            if (data.hasOwnProperty("old_section"))
              obj.old_section = _StoryResponseOldSection.StoryResponseOldSection.constructFromObject(data["old_section"]);
            if (data.hasOwnProperty("new_section"))
              obj.new_section = _StoryResponseOldSection.StoryResponseOldSection.constructFromObject(data["new_section"]);
            if (data.hasOwnProperty("task"))
              obj.task = _StoryResponseTask.StoryResponseTask.constructFromObject(data["task"]);
            if (data.hasOwnProperty("project"))
              obj.project = _StoryResponseProject.StoryResponseProject.constructFromObject(data["project"]);
            if (data.hasOwnProperty("tag"))
              obj.tag = _StoryResponseTag.StoryResponseTag.constructFromObject(data["tag"]);
            if (data.hasOwnProperty("custom_field"))
              obj.custom_field = _StoryResponseCustomField.StoryResponseCustomField.constructFromObject(data["custom_field"]);
            if (data.hasOwnProperty("old_text_value"))
              obj.old_text_value = _ApiClient.ApiClient.convertToType(data["old_text_value"], "String");
            if (data.hasOwnProperty("new_text_value"))
              obj.new_text_value = _ApiClient.ApiClient.convertToType(data["new_text_value"], "String");
            if (data.hasOwnProperty("old_number_value"))
              obj.old_number_value = _ApiClient.ApiClient.convertToType(data["old_number_value"], "Number");
            if (data.hasOwnProperty("new_number_value"))
              obj.new_number_value = _ApiClient.ApiClient.convertToType(data["new_number_value"], "Number");
            if (data.hasOwnProperty("old_enum_value"))
              obj.old_enum_value = _StoryResponseOldEnumValue.StoryResponseOldEnumValue.constructFromObject(data["old_enum_value"]);
            if (data.hasOwnProperty("new_enum_value"))
              obj.new_enum_value = _StoryResponseOldEnumValue.StoryResponseOldEnumValue.constructFromObject(data["new_enum_value"]);
            if (data.hasOwnProperty("old_date_value"))
              obj.old_date_value = _ApiClient.ApiClient.convertToType(data["old_date_value"], Object);
            if (data.hasOwnProperty("new_date_value"))
              obj.new_date_value = _ApiClient.ApiClient.convertToType(data["new_date_value"], Object);
            if (data.hasOwnProperty("old_people_value"))
              obj.old_people_value = _ApiClient.ApiClient.convertToType(data["old_people_value"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("new_people_value"))
              obj.new_people_value = _ApiClient.ApiClient.convertToType(data["new_people_value"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("old_multi_enum_values"))
              obj.old_multi_enum_values = _ApiClient.ApiClient.convertToType(data["old_multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("new_multi_enum_values"))
              obj.new_multi_enum_values = _ApiClient.ApiClient.convertToType(data["new_multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("new_approval_status"))
              obj.new_approval_status = _ApiClient.ApiClient.convertToType(data["new_approval_status"], "String");
            if (data.hasOwnProperty("old_approval_status"))
              obj.old_approval_status = _ApiClient.ApiClient.convertToType(data["old_approval_status"], "String");
            if (data.hasOwnProperty("duplicate_of"))
              obj.duplicate_of = _StoryResponseTask.StoryResponseTask.constructFromObject(data["duplicate_of"]);
            if (data.hasOwnProperty("duplicated_from"))
              obj.duplicated_from = _StoryResponseTask.StoryResponseTask.constructFromObject(data["duplicated_from"]);
            if (data.hasOwnProperty("dependency"))
              obj.dependency = _StoryResponseTask.StoryResponseTask.constructFromObject(data["dependency"]);
            if (data.hasOwnProperty("source"))
              obj.source = _ApiClient.ApiClient.convertToType(data["source"], "String");
            if (data.hasOwnProperty("target"))
              obj.target = _StoryResponseTarget.StoryResponseTarget.constructFromObject(data["target"]);
          }
          return obj;
        }
      }]);
      return StoryResponse2;
    }();
    exports.StoryResponse = StoryResponse;
    StoryResponse.prototype.gid = void 0;
    StoryResponse.prototype.resource_type = void 0;
    StoryResponse.prototype.created_at = void 0;
    StoryResponse.prototype.resource_subtype = void 0;
    StoryResponse.prototype.text = void 0;
    StoryResponse.prototype.html_text = void 0;
    StoryResponse.prototype.is_pinned = void 0;
    StoryResponse.StickerNameEnum = {
      /**
       * value: "green_checkmark"
       * @const
       */
      green_checkmark: "green_checkmark",
      /**
       * value: "people_dancing"
       * @const
       */
      people_dancing: "people_dancing",
      /**
       * value: "dancing_unicorn"
       * @const
       */
      dancing_unicorn: "dancing_unicorn",
      /**
       * value: "heart"
       * @const
       */
      heart: "heart",
      /**
       * value: "party_popper"
       * @const
       */
      party_popper: "party_popper",
      /**
       * value: "people_waving_flags"
       * @const
       */
      people_waving_flags: "people_waving_flags",
      /**
       * value: "splashing_narwhal"
       * @const
       */
      splashing_narwhal: "splashing_narwhal",
      /**
       * value: "trophy"
       * @const
       */
      trophy: "trophy",
      /**
       * value: "yeti_riding_unicorn"
       * @const
       */
      yeti_riding_unicorn: "yeti_riding_unicorn",
      /**
       * value: "celebrating_people"
       * @const
       */
      celebrating_people: "celebrating_people",
      /**
       * value: "determined_climbers"
       * @const
       */
      determined_climbers: "determined_climbers",
      /**
       * value: "phoenix_spreading_love"
       * @const
       */
      phoenix_spreading_love: "phoenix_spreading_love"
    };
    StoryResponse.prototype.sticker_name = void 0;
    StoryResponse.prototype.created_by = void 0;
    StoryResponse.TypeEnum = {
      /**
       * value: "comment"
       * @const
       */
      comment: "comment",
      /**
       * value: "system"
       * @const
       */
      system: "system"
    };
    StoryResponse.prototype.type = void 0;
    StoryResponse.prototype.is_editable = void 0;
    StoryResponse.prototype.is_edited = void 0;
    StoryResponse.prototype.hearted = void 0;
    StoryResponse.prototype.hearts = void 0;
    StoryResponse.prototype.num_hearts = void 0;
    StoryResponse.prototype.liked = void 0;
    StoryResponse.prototype.likes = void 0;
    StoryResponse.prototype.num_likes = void 0;
    StoryResponse.prototype.previews = void 0;
    StoryResponse.prototype.old_name = void 0;
    StoryResponse.prototype.new_name = void 0;
    StoryResponse.prototype.old_dates = void 0;
    StoryResponse.prototype.new_dates = void 0;
    StoryResponse.prototype.old_resource_subtype = void 0;
    StoryResponse.prototype.new_resource_subtype = void 0;
    StoryResponse.prototype.story = void 0;
    StoryResponse.prototype.assignee = void 0;
    StoryResponse.prototype.follower = void 0;
    StoryResponse.prototype.old_section = void 0;
    StoryResponse.prototype.new_section = void 0;
    StoryResponse.prototype.task = void 0;
    StoryResponse.prototype.project = void 0;
    StoryResponse.prototype.tag = void 0;
    StoryResponse.prototype.custom_field = void 0;
    StoryResponse.prototype.old_text_value = void 0;
    StoryResponse.prototype.new_text_value = void 0;
    StoryResponse.prototype.old_number_value = void 0;
    StoryResponse.prototype.new_number_value = void 0;
    StoryResponse.prototype.old_enum_value = void 0;
    StoryResponse.prototype.new_enum_value = void 0;
    StoryResponse.prototype.old_date_value = void 0;
    StoryResponse.prototype.new_date_value = void 0;
    StoryResponse.prototype.old_people_value = void 0;
    StoryResponse.prototype.new_people_value = void 0;
    StoryResponse.prototype.old_multi_enum_values = void 0;
    StoryResponse.prototype.new_multi_enum_values = void 0;
    StoryResponse.prototype.new_approval_status = void 0;
    StoryResponse.prototype.old_approval_status = void 0;
    StoryResponse.prototype.duplicate_of = void 0;
    StoryResponse.prototype.duplicated_from = void 0;
    StoryResponse.prototype.dependency = void 0;
    StoryResponse.SourceEnum = {
      /**
       * value: "web"
       * @const
       */
      web: "web",
      /**
       * value: "email"
       * @const
       */
      email: "email",
      /**
       * value: "mobile"
       * @const
       */
      mobile: "mobile",
      /**
       * value: "api"
       * @const
       */
      api: "api",
      /**
       * value: "unknown"
       * @const
       */
      unknown: "unknown"
    };
    StoryResponse.prototype.source = void 0;
    StoryResponse.prototype.target = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseArray.js
var require_StoryResponseArray = __commonJS({
  "node_modules/asana/dist/model/StoryResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _StoryResponse = require_StoryResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseArray = /* @__PURE__ */ function() {
      function StoryResponseArray2(data) {
        _classCallCheck(this, StoryResponseArray2);
        this.data = data;
      }
      _createClass(StoryResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_StoryResponse.StoryResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return StoryResponseArray2;
    }();
    exports.StoryResponseArray = StoryResponseArray;
    StoryResponseArray.prototype.data = void 0;
    StoryResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseData.js
var require_StoryResponseData = __commonJS({
  "node_modules/asana/dist/model/StoryResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _StoryResponse = require_StoryResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseData = /* @__PURE__ */ function() {
      function StoryResponseData2(data) {
        _classCallCheck(this, StoryResponseData2);
        this.data = data;
      }
      _createClass(StoryResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _StoryResponse.StoryResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return StoryResponseData2;
    }();
    exports.StoryResponseData = StoryResponseData;
    StoryResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/StoryResponseDates.js
var require_StoryResponseDates = __commonJS({
  "node_modules/asana/dist/model/StoryResponseDates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoryResponseDates = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoryResponseDates = /* @__PURE__ */ function() {
      function StoryResponseDates2() {
        _classCallCheck(this, StoryResponseDates2);
      }
      _createClass(StoryResponseDates2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new StoryResponseDates2();
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("due_at"))
              obj.due_at = _ApiClient.ApiClient.convertToType(data["due_at"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
          }
          return obj;
        }
      }]);
      return StoryResponseDates2;
    }();
    exports.StoryResponseDates = StoryResponseDates;
    StoryResponseDates.prototype.start_on = void 0;
    StoryResponseDates.prototype.due_at = void 0;
    StoryResponseDates.prototype.due_on = void 0;
  }
});

// node_modules/asana/dist/model/TagBase.js
var require_TagBase = __commonJS({
  "node_modules/asana/dist/model/TagBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagBase = /* @__PURE__ */ function() {
      function TagBase2() {
        _classCallCheck(this, TagBase2);
      }
      _createClass(TagBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TagBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
          }
          return obj;
        }
      }]);
      return TagBase2;
    }();
    exports.TagBase = TagBase;
    TagBase.prototype.gid = void 0;
    TagBase.prototype.resource_type = void 0;
    TagBase.prototype.name = void 0;
    TagBase.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    TagBase.prototype.color = void 0;
    TagBase.prototype.notes = void 0;
  }
});

// node_modules/asana/dist/model/TagCompact.js
var require_TagCompact = __commonJS({
  "node_modules/asana/dist/model/TagCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagCompact = /* @__PURE__ */ function() {
      function TagCompact2() {
        _classCallCheck(this, TagCompact2);
      }
      _createClass(TagCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TagCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TagCompact2;
    }();
    exports.TagCompact = TagCompact;
    TagCompact.prototype.gid = void 0;
    TagCompact.prototype.resource_type = void 0;
    TagCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TagRequest.js
var require_TagRequest = __commonJS({
  "node_modules/asana/dist/model/TagRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagRequest = /* @__PURE__ */ function() {
      function TagRequest2() {
        _classCallCheck(this, TagRequest2);
      }
      _createClass(TagRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TagRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], ["String"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
          }
          return obj;
        }
      }]);
      return TagRequest2;
    }();
    exports.TagRequest = TagRequest;
    TagRequest.prototype.gid = void 0;
    TagRequest.prototype.resource_type = void 0;
    TagRequest.prototype.name = void 0;
    TagRequest.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    TagRequest.prototype.color = void 0;
    TagRequest.prototype.notes = void 0;
    TagRequest.prototype.followers = void 0;
    TagRequest.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/TagResponse.js
var require_TagResponse = __commonJS({
  "node_modules/asana/dist/model/TagResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagResponse = /* @__PURE__ */ function() {
      function TagResponse2() {
        _classCallCheck(this, TagResponse2);
      }
      _createClass(TagResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TagResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("color"))
              obj.color = _ApiClient.ApiClient.convertToType(data["color"], "String");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["workspace"]);
            if (data.hasOwnProperty("permalink_url"))
              obj.permalink_url = _ApiClient.ApiClient.convertToType(data["permalink_url"], "String");
          }
          return obj;
        }
      }]);
      return TagResponse2;
    }();
    exports.TagResponse = TagResponse;
    TagResponse.prototype.gid = void 0;
    TagResponse.prototype.resource_type = void 0;
    TagResponse.prototype.name = void 0;
    TagResponse.ColorEnum = {
      /**
       * value: "dark-pink"
       * @const
       */
      dark_pink: "dark-pink",
      /**
       * value: "dark-green"
       * @const
       */
      dark_green: "dark-green",
      /**
       * value: "dark-blue"
       * @const
       */
      dark_blue: "dark-blue",
      /**
       * value: "dark-red"
       * @const
       */
      dark_red: "dark-red",
      /**
       * value: "dark-teal"
       * @const
       */
      dark_teal: "dark-teal",
      /**
       * value: "dark-brown"
       * @const
       */
      dark_brown: "dark-brown",
      /**
       * value: "dark-orange"
       * @const
       */
      dark_orange: "dark-orange",
      /**
       * value: "dark-purple"
       * @const
       */
      dark_purple: "dark-purple",
      /**
       * value: "dark-warm-gray"
       * @const
       */
      dark_warm_gray: "dark-warm-gray",
      /**
       * value: "light-pink"
       * @const
       */
      light_pink: "light-pink",
      /**
       * value: "light-green"
       * @const
       */
      light_green: "light-green",
      /**
       * value: "light-blue"
       * @const
       */
      light_blue: "light-blue",
      /**
       * value: "light-red"
       * @const
       */
      light_red: "light-red",
      /**
       * value: "light-teal"
       * @const
       */
      light_teal: "light-teal",
      /**
       * value: "light-brown"
       * @const
       */
      light_brown: "light-brown",
      /**
       * value: "light-orange"
       * @const
       */
      light_orange: "light-orange",
      /**
       * value: "light-purple"
       * @const
       */
      light_purple: "light-purple",
      /**
       * value: "light-warm-gray"
       * @const
       */
      light_warm_gray: "light-warm-gray",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    TagResponse.prototype.color = void 0;
    TagResponse.prototype.notes = void 0;
    TagResponse.prototype.created_at = void 0;
    TagResponse.prototype.followers = void 0;
    TagResponse.prototype.workspace = void 0;
    TagResponse.prototype.permalink_url = void 0;
  }
});

// node_modules/asana/dist/model/TagResponseArray.js
var require_TagResponseArray = __commonJS({
  "node_modules/asana/dist/model/TagResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _TagResponse = require_TagResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagResponseArray = /* @__PURE__ */ function() {
      function TagResponseArray2(data) {
        _classCallCheck(this, TagResponseArray2);
        this.data = data;
      }
      _createClass(TagResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TagResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_TagResponse.TagResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return TagResponseArray2;
    }();
    exports.TagResponseArray = TagResponseArray;
    TagResponseArray.prototype.data = void 0;
    TagResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/TagResponseData.js
var require_TagResponseData = __commonJS({
  "node_modules/asana/dist/model/TagResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _TagResponse = require_TagResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagResponseData = /* @__PURE__ */ function() {
      function TagResponseData2(data) {
        _classCallCheck(this, TagResponseData2);
        this.data = data;
      }
      _createClass(TagResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TagResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _TagResponse.TagResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TagResponseData2;
    }();
    exports.TagResponseData = TagResponseData;
    TagResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TagsBody.js
var require_TagsBody = __commonJS({
  "node_modules/asana/dist/model/TagsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TagRequest = require_TagRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagsBody = /* @__PURE__ */ function() {
      function TagsBody2() {
        _classCallCheck(this, TagsBody2);
      }
      _createClass(TagsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TagsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TagRequest.TagRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TagsBody2;
    }();
    exports.TagsBody = TagsBody;
    TagsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskAddProjectRequest.js
var require_TaskAddProjectRequest = __commonJS({
  "node_modules/asana/dist/model/TaskAddProjectRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskAddProjectRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskAddProjectRequest = /* @__PURE__ */ function() {
      function TaskAddProjectRequest2(project) {
        _classCallCheck(this, TaskAddProjectRequest2);
        this.project = project;
      }
      _createClass(TaskAddProjectRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskAddProjectRequest2();
            if (data.hasOwnProperty("project"))
              obj.project = _ApiClient.ApiClient.convertToType(data["project"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
            if (data.hasOwnProperty("section"))
              obj.section = _ApiClient.ApiClient.convertToType(data["section"], "String");
          }
          return obj;
        }
      }]);
      return TaskAddProjectRequest2;
    }();
    exports.TaskAddProjectRequest = TaskAddProjectRequest;
    TaskAddProjectRequest.prototype.project = void 0;
    TaskAddProjectRequest.prototype.insert_after = void 0;
    TaskAddProjectRequest.prototype.insert_before = void 0;
    TaskAddProjectRequest.prototype.section = void 0;
  }
});

// node_modules/asana/dist/model/TaskAddTagRequest.js
var require_TaskAddTagRequest = __commonJS({
  "node_modules/asana/dist/model/TaskAddTagRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskAddTagRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskAddTagRequest = /* @__PURE__ */ function() {
      function TaskAddTagRequest2(tag) {
        _classCallCheck(this, TaskAddTagRequest2);
        this.tag = tag;
      }
      _createClass(TaskAddTagRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskAddTagRequest2();
            if (data.hasOwnProperty("tag"))
              obj.tag = _ApiClient.ApiClient.convertToType(data["tag"], "String");
          }
          return obj;
        }
      }]);
      return TaskAddTagRequest2;
    }();
    exports.TaskAddTagRequest = TaskAddTagRequest;
    TaskAddTagRequest.prototype.tag = void 0;
  }
});

// node_modules/asana/dist/model/TaskBaseCompletedBy.js
var require_TaskBaseCompletedBy = __commonJS({
  "node_modules/asana/dist/model/TaskBaseCompletedBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskBaseCompletedBy = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskBaseCompletedBy = /* @__PURE__ */ function() {
      function TaskBaseCompletedBy2() {
        _classCallCheck(this, TaskBaseCompletedBy2);
      }
      _createClass(TaskBaseCompletedBy2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskBaseCompletedBy2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TaskBaseCompletedBy2;
    }();
    exports.TaskBaseCompletedBy = TaskBaseCompletedBy;
    TaskBaseCompletedBy.prototype.gid = void 0;
    TaskBaseCompletedBy.prototype.resource_type = void 0;
    TaskBaseCompletedBy.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TaskBaseDependencies.js
var require_TaskBaseDependencies = __commonJS({
  "node_modules/asana/dist/model/TaskBaseDependencies.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskBaseDependencies = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskBaseDependencies = /* @__PURE__ */ function() {
      function TaskBaseDependencies2() {
        _classCallCheck(this, TaskBaseDependencies2);
      }
      _createClass(TaskBaseDependencies2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskBaseDependencies2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
          }
          return obj;
        }
      }]);
      return TaskBaseDependencies2;
    }();
    exports.TaskBaseDependencies = TaskBaseDependencies;
    TaskBaseDependencies.prototype.gid = void 0;
    TaskBaseDependencies.prototype.resource_type = void 0;
  }
});

// node_modules/asana/dist/model/TaskBaseExternal.js
var require_TaskBaseExternal = __commonJS({
  "node_modules/asana/dist/model/TaskBaseExternal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskBaseExternal = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskBaseExternal = /* @__PURE__ */ function() {
      function TaskBaseExternal2() {
        _classCallCheck(this, TaskBaseExternal2);
      }
      _createClass(TaskBaseExternal2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskBaseExternal2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], "String");
          }
          return obj;
        }
      }]);
      return TaskBaseExternal2;
    }();
    exports.TaskBaseExternal = TaskBaseExternal;
    TaskBaseExternal.prototype.gid = void 0;
    TaskBaseExternal.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskBaseSection.js
var require_TaskBaseSection = __commonJS({
  "node_modules/asana/dist/model/TaskBaseSection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskBaseSection = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskBaseSection = /* @__PURE__ */ function() {
      function TaskBaseSection2() {
        _classCallCheck(this, TaskBaseSection2);
      }
      _createClass(TaskBaseSection2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskBaseSection2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TaskBaseSection2;
    }();
    exports.TaskBaseSection = TaskBaseSection;
    TaskBaseSection.prototype.gid = void 0;
    TaskBaseSection.prototype.resource_type = void 0;
    TaskBaseSection.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TaskBaseMemberships.js
var require_TaskBaseMemberships = __commonJS({
  "node_modules/asana/dist/model/TaskBaseMemberships.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskBaseMemberships = void 0;
    var _ApiClient = require_ApiClient();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _TaskBaseSection = require_TaskBaseSection();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskBaseMemberships = /* @__PURE__ */ function() {
      function TaskBaseMemberships2() {
        _classCallCheck(this, TaskBaseMemberships2);
      }
      _createClass(TaskBaseMemberships2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskBaseMemberships2();
            if (data.hasOwnProperty("project"))
              obj.project = _JobBaseNewProject.JobBaseNewProject.constructFromObject(data["project"]);
            if (data.hasOwnProperty("section"))
              obj.section = _TaskBaseSection.TaskBaseSection.constructFromObject(data["section"]);
          }
          return obj;
        }
      }]);
      return TaskBaseMemberships2;
    }();
    exports.TaskBaseMemberships = TaskBaseMemberships;
    TaskBaseMemberships.prototype.project = void 0;
    TaskBaseMemberships.prototype.section = void 0;
  }
});

// node_modules/asana/dist/model/TaskBase.js
var require_TaskBase = __commonJS({
  "node_modules/asana/dist/model/TaskBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskBase = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    var _GoalResponseLikes = require_GoalResponseLikes();
    var _TaskBaseCompletedBy = require_TaskBaseCompletedBy();
    var _TaskBaseDependencies = require_TaskBaseDependencies();
    var _TaskBaseExternal = require_TaskBaseExternal();
    var _TaskBaseMemberships = require_TaskBaseMemberships();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskBase = /* @__PURE__ */ function() {
      function TaskBase2() {
        _classCallCheck(this, TaskBase2);
      }
      _createClass(TaskBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("approval_status"))
              obj.approval_status = _ApiClient.ApiClient.convertToType(data["approval_status"], "String");
            if (data.hasOwnProperty("assignee_status"))
              obj.assignee_status = _ApiClient.ApiClient.convertToType(data["assignee_status"], "String");
            if (data.hasOwnProperty("completed"))
              obj.completed = _ApiClient.ApiClient.convertToType(data["completed"], "Boolean");
            if (data.hasOwnProperty("completed_at"))
              obj.completed_at = _ApiClient.ApiClient.convertToType(data["completed_at"], "Date");
            if (data.hasOwnProperty("completed_by"))
              obj.completed_by = _TaskBaseCompletedBy.TaskBaseCompletedBy.constructFromObject(data["completed_by"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("dependencies"))
              obj.dependencies = _ApiClient.ApiClient.convertToType(data["dependencies"], [_TaskBaseDependencies.TaskBaseDependencies]);
            if (data.hasOwnProperty("dependents"))
              obj.dependents = _ApiClient.ApiClient.convertToType(data["dependents"], [_TaskBaseDependencies.TaskBaseDependencies]);
            if (data.hasOwnProperty("due_at"))
              obj.due_at = _ApiClient.ApiClient.convertToType(data["due_at"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("external"))
              obj.external = _TaskBaseExternal.TaskBaseExternal.constructFromObject(data["external"]);
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("hearted"))
              obj.hearted = _ApiClient.ApiClient.convertToType(data["hearted"], "Boolean");
            if (data.hasOwnProperty("hearts"))
              obj.hearts = _ApiClient.ApiClient.convertToType(data["hearts"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("is_rendered_as_separator"))
              obj.is_rendered_as_separator = _ApiClient.ApiClient.convertToType(data["is_rendered_as_separator"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("likes"))
              obj.likes = _ApiClient.ApiClient.convertToType(data["likes"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("memberships"))
              obj.memberships = _ApiClient.ApiClient.convertToType(data["memberships"], [_TaskBaseMemberships.TaskBaseMemberships]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("num_hearts"))
              obj.num_hearts = _ApiClient.ApiClient.convertToType(data["num_hearts"], "Number");
            if (data.hasOwnProperty("num_likes"))
              obj.num_likes = _ApiClient.ApiClient.convertToType(data["num_likes"], "Number");
            if (data.hasOwnProperty("num_subtasks"))
              obj.num_subtasks = _ApiClient.ApiClient.convertToType(data["num_subtasks"], "Number");
            if (data.hasOwnProperty("start_at"))
              obj.start_at = _ApiClient.ApiClient.convertToType(data["start_at"], "Date");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("actual_time_minutes"))
              obj.actual_time_minutes = _ApiClient.ApiClient.convertToType(data["actual_time_minutes"], "Number");
          }
          return obj;
        }
      }]);
      return TaskBase2;
    }();
    exports.TaskBase = TaskBase;
    TaskBase.prototype.gid = void 0;
    TaskBase.prototype.resource_type = void 0;
    TaskBase.prototype.name = void 0;
    TaskBase.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    TaskBase.prototype.resource_subtype = void 0;
    TaskBase.prototype.created_by = void 0;
    TaskBase.ApprovalStatusEnum = {
      /**
       * value: "pending"
       * @const
       */
      pending: "pending",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "rejected"
       * @const
       */
      rejected: "rejected",
      /**
       * value: "changes_requested"
       * @const
       */
      changes_requested: "changes_requested"
    };
    TaskBase.prototype.approval_status = void 0;
    TaskBase.AssigneeStatusEnum = {
      /**
       * value: "today"
       * @const
       */
      today: "today",
      /**
       * value: "upcoming"
       * @const
       */
      upcoming: "upcoming",
      /**
       * value: "later"
       * @const
       */
      later: "later",
      /**
       * value: "new"
       * @const
       */
      _new: "new",
      /**
       * value: "inbox"
       * @const
       */
      inbox: "inbox"
    };
    TaskBase.prototype.assignee_status = void 0;
    TaskBase.prototype.completed = void 0;
    TaskBase.prototype.completed_at = void 0;
    TaskBase.prototype.completed_by = void 0;
    TaskBase.prototype.created_at = void 0;
    TaskBase.prototype.dependencies = void 0;
    TaskBase.prototype.dependents = void 0;
    TaskBase.prototype.due_at = void 0;
    TaskBase.prototype.due_on = void 0;
    TaskBase.prototype.external = void 0;
    TaskBase.prototype.html_notes = void 0;
    TaskBase.prototype.hearted = void 0;
    TaskBase.prototype.hearts = void 0;
    TaskBase.prototype.is_rendered_as_separator = void 0;
    TaskBase.prototype.liked = void 0;
    TaskBase.prototype.likes = void 0;
    TaskBase.prototype.memberships = void 0;
    TaskBase.prototype.modified_at = void 0;
    TaskBase.prototype.notes = void 0;
    TaskBase.prototype.num_hearts = void 0;
    TaskBase.prototype.num_likes = void 0;
    TaskBase.prototype.num_subtasks = void 0;
    TaskBase.prototype.start_at = void 0;
    TaskBase.prototype.start_on = void 0;
    TaskBase.prototype.actual_time_minutes = void 0;
  }
});

// node_modules/asana/dist/model/TaskCompact.js
var require_TaskCompact = __commonJS({
  "node_modules/asana/dist/model/TaskCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskCompact = /* @__PURE__ */ function() {
      function TaskCompact2() {
        _classCallCheck(this, TaskCompact2);
      }
      _createClass(TaskCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
          }
          return obj;
        }
      }]);
      return TaskCompact2;
    }();
    exports.TaskCompact = TaskCompact;
    TaskCompact.prototype.gid = void 0;
    TaskCompact.prototype.resource_type = void 0;
    TaskCompact.prototype.name = void 0;
    TaskCompact.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    TaskCompact.prototype.resource_subtype = void 0;
    TaskCompact.prototype.created_by = void 0;
  }
});

// node_modules/asana/dist/model/TaskCountResponse.js
var require_TaskCountResponse = __commonJS({
  "node_modules/asana/dist/model/TaskCountResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskCountResponse = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskCountResponse = /* @__PURE__ */ function() {
      function TaskCountResponse2() {
        _classCallCheck(this, TaskCountResponse2);
      }
      _createClass(TaskCountResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskCountResponse2();
            if (data.hasOwnProperty("num_tasks"))
              obj.num_tasks = _ApiClient.ApiClient.convertToType(data["num_tasks"], "Number");
            if (data.hasOwnProperty("num_incomplete_tasks"))
              obj.num_incomplete_tasks = _ApiClient.ApiClient.convertToType(data["num_incomplete_tasks"], "Number");
            if (data.hasOwnProperty("num_completed_tasks"))
              obj.num_completed_tasks = _ApiClient.ApiClient.convertToType(data["num_completed_tasks"], "Number");
            if (data.hasOwnProperty("num_milestones"))
              obj.num_milestones = _ApiClient.ApiClient.convertToType(data["num_milestones"], "Number");
            if (data.hasOwnProperty("num_incomplete_milestones"))
              obj.num_incomplete_milestones = _ApiClient.ApiClient.convertToType(data["num_incomplete_milestones"], "Number");
            if (data.hasOwnProperty("num_completed_milestones"))
              obj.num_completed_milestones = _ApiClient.ApiClient.convertToType(data["num_completed_milestones"], "Number");
          }
          return obj;
        }
      }]);
      return TaskCountResponse2;
    }();
    exports.TaskCountResponse = TaskCountResponse;
    TaskCountResponse.prototype.num_tasks = void 0;
    TaskCountResponse.prototype.num_incomplete_tasks = void 0;
    TaskCountResponse.prototype.num_completed_tasks = void 0;
    TaskCountResponse.prototype.num_milestones = void 0;
    TaskCountResponse.prototype.num_incomplete_milestones = void 0;
    TaskCountResponse.prototype.num_completed_milestones = void 0;
  }
});

// node_modules/asana/dist/model/TaskCountResponseData.js
var require_TaskCountResponseData = __commonJS({
  "node_modules/asana/dist/model/TaskCountResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskCountResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskCountResponse = require_TaskCountResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskCountResponseData = /* @__PURE__ */ function() {
      function TaskCountResponseData2(data) {
        _classCallCheck(this, TaskCountResponseData2);
        this.data = data;
      }
      _createClass(TaskCountResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskCountResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskCountResponse.TaskCountResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskCountResponseData2;
    }();
    exports.TaskCountResponseData = TaskCountResponseData;
    TaskCountResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskDuplicateRequest.js
var require_TaskDuplicateRequest = __commonJS({
  "node_modules/asana/dist/model/TaskDuplicateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskDuplicateRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskDuplicateRequest = /* @__PURE__ */ function() {
      function TaskDuplicateRequest2() {
        _classCallCheck(this, TaskDuplicateRequest2);
      }
      _createClass(TaskDuplicateRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskDuplicateRequest2();
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("include"))
              obj.include = _ApiClient.ApiClient.convertToType(data["include"], "String");
          }
          return obj;
        }
      }]);
      return TaskDuplicateRequest2;
    }();
    exports.TaskDuplicateRequest = TaskDuplicateRequest;
    TaskDuplicateRequest.prototype.name = void 0;
    TaskDuplicateRequest.prototype.include = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidAddDependenciesBody.js
var require_TaskGidAddDependenciesBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidAddDependenciesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidAddDependenciesBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ModifyDependenciesRequest = require_ModifyDependenciesRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidAddDependenciesBody = /* @__PURE__ */ function() {
      function TaskGidAddDependenciesBody2() {
        _classCallCheck(this, TaskGidAddDependenciesBody2);
      }
      _createClass(TaskGidAddDependenciesBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidAddDependenciesBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ModifyDependenciesRequest.ModifyDependenciesRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidAddDependenciesBody2;
    }();
    exports.TaskGidAddDependenciesBody = TaskGidAddDependenciesBody;
    TaskGidAddDependenciesBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidAddDependentsBody.js
var require_TaskGidAddDependentsBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidAddDependentsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidAddDependentsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ModifyDependentsRequest = require_ModifyDependentsRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidAddDependentsBody = /* @__PURE__ */ function() {
      function TaskGidAddDependentsBody2() {
        _classCallCheck(this, TaskGidAddDependentsBody2);
      }
      _createClass(TaskGidAddDependentsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidAddDependentsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ModifyDependentsRequest.ModifyDependentsRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidAddDependentsBody2;
    }();
    exports.TaskGidAddDependentsBody = TaskGidAddDependentsBody;
    TaskGidAddDependentsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidAddFollowersBody.js
var require_TaskGidAddFollowersBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidAddFollowersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidAddFollowersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskAddFollowersRequest = require_TaskAddFollowersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidAddFollowersBody = /* @__PURE__ */ function() {
      function TaskGidAddFollowersBody2() {
        _classCallCheck(this, TaskGidAddFollowersBody2);
      }
      _createClass(TaskGidAddFollowersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidAddFollowersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskAddFollowersRequest.TaskAddFollowersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidAddFollowersBody2;
    }();
    exports.TaskGidAddFollowersBody = TaskGidAddFollowersBody;
    TaskGidAddFollowersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidAddProjectBody.js
var require_TaskGidAddProjectBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidAddProjectBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidAddProjectBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskAddProjectRequest = require_TaskAddProjectRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidAddProjectBody = /* @__PURE__ */ function() {
      function TaskGidAddProjectBody2() {
        _classCallCheck(this, TaskGidAddProjectBody2);
      }
      _createClass(TaskGidAddProjectBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidAddProjectBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskAddProjectRequest.TaskAddProjectRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidAddProjectBody2;
    }();
    exports.TaskGidAddProjectBody = TaskGidAddProjectBody;
    TaskGidAddProjectBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidAddTagBody.js
var require_TaskGidAddTagBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidAddTagBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidAddTagBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskAddTagRequest = require_TaskAddTagRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidAddTagBody = /* @__PURE__ */ function() {
      function TaskGidAddTagBody2() {
        _classCallCheck(this, TaskGidAddTagBody2);
      }
      _createClass(TaskGidAddTagBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidAddTagBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskAddTagRequest.TaskAddTagRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidAddTagBody2;
    }();
    exports.TaskGidAddTagBody = TaskGidAddTagBody;
    TaskGidAddTagBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidDuplicateBody.js
var require_TaskGidDuplicateBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidDuplicateBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidDuplicateBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskDuplicateRequest = require_TaskDuplicateRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidDuplicateBody = /* @__PURE__ */ function() {
      function TaskGidDuplicateBody2() {
        _classCallCheck(this, TaskGidDuplicateBody2);
      }
      _createClass(TaskGidDuplicateBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidDuplicateBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskDuplicateRequest.TaskDuplicateRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidDuplicateBody2;
    }();
    exports.TaskGidDuplicateBody = TaskGidDuplicateBody;
    TaskGidDuplicateBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidRemoveDependenciesBody.js
var require_TaskGidRemoveDependenciesBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidRemoveDependenciesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidRemoveDependenciesBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ModifyDependenciesRequest = require_ModifyDependenciesRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidRemoveDependenciesBody = /* @__PURE__ */ function() {
      function TaskGidRemoveDependenciesBody2() {
        _classCallCheck(this, TaskGidRemoveDependenciesBody2);
      }
      _createClass(TaskGidRemoveDependenciesBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidRemoveDependenciesBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ModifyDependenciesRequest.ModifyDependenciesRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidRemoveDependenciesBody2;
    }();
    exports.TaskGidRemoveDependenciesBody = TaskGidRemoveDependenciesBody;
    TaskGidRemoveDependenciesBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidRemoveDependentsBody.js
var require_TaskGidRemoveDependentsBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidRemoveDependentsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidRemoveDependentsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ModifyDependentsRequest = require_ModifyDependentsRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidRemoveDependentsBody = /* @__PURE__ */ function() {
      function TaskGidRemoveDependentsBody2() {
        _classCallCheck(this, TaskGidRemoveDependentsBody2);
      }
      _createClass(TaskGidRemoveDependentsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidRemoveDependentsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ModifyDependentsRequest.ModifyDependentsRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidRemoveDependentsBody2;
    }();
    exports.TaskGidRemoveDependentsBody = TaskGidRemoveDependentsBody;
    TaskGidRemoveDependentsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskRemoveFollowersRequest.js
var require_TaskRemoveFollowersRequest = __commonJS({
  "node_modules/asana/dist/model/TaskRemoveFollowersRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskRemoveFollowersRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskRemoveFollowersRequest = /* @__PURE__ */ function() {
      function TaskRemoveFollowersRequest2(followers) {
        _classCallCheck(this, TaskRemoveFollowersRequest2);
        this.followers = followers;
      }
      _createClass(TaskRemoveFollowersRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskRemoveFollowersRequest2();
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], ["String"]);
          }
          return obj;
        }
      }]);
      return TaskRemoveFollowersRequest2;
    }();
    exports.TaskRemoveFollowersRequest = TaskRemoveFollowersRequest;
    TaskRemoveFollowersRequest.prototype.followers = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidRemoveFollowersBody.js
var require_TaskGidRemoveFollowersBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidRemoveFollowersBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidRemoveFollowersBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskRemoveFollowersRequest = require_TaskRemoveFollowersRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidRemoveFollowersBody = /* @__PURE__ */ function() {
      function TaskGidRemoveFollowersBody2() {
        _classCallCheck(this, TaskGidRemoveFollowersBody2);
      }
      _createClass(TaskGidRemoveFollowersBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidRemoveFollowersBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskRemoveFollowersRequest.TaskRemoveFollowersRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidRemoveFollowersBody2;
    }();
    exports.TaskGidRemoveFollowersBody = TaskGidRemoveFollowersBody;
    TaskGidRemoveFollowersBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskRemoveProjectRequest.js
var require_TaskRemoveProjectRequest = __commonJS({
  "node_modules/asana/dist/model/TaskRemoveProjectRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskRemoveProjectRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskRemoveProjectRequest = /* @__PURE__ */ function() {
      function TaskRemoveProjectRequest2(project) {
        _classCallCheck(this, TaskRemoveProjectRequest2);
        this.project = project;
      }
      _createClass(TaskRemoveProjectRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskRemoveProjectRequest2();
            if (data.hasOwnProperty("project"))
              obj.project = _ApiClient.ApiClient.convertToType(data["project"], "String");
          }
          return obj;
        }
      }]);
      return TaskRemoveProjectRequest2;
    }();
    exports.TaskRemoveProjectRequest = TaskRemoveProjectRequest;
    TaskRemoveProjectRequest.prototype.project = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidRemoveProjectBody.js
var require_TaskGidRemoveProjectBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidRemoveProjectBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidRemoveProjectBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskRemoveProjectRequest = require_TaskRemoveProjectRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidRemoveProjectBody = /* @__PURE__ */ function() {
      function TaskGidRemoveProjectBody2() {
        _classCallCheck(this, TaskGidRemoveProjectBody2);
      }
      _createClass(TaskGidRemoveProjectBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidRemoveProjectBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskRemoveProjectRequest.TaskRemoveProjectRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidRemoveProjectBody2;
    }();
    exports.TaskGidRemoveProjectBody = TaskGidRemoveProjectBody;
    TaskGidRemoveProjectBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskRemoveTagRequest.js
var require_TaskRemoveTagRequest = __commonJS({
  "node_modules/asana/dist/model/TaskRemoveTagRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskRemoveTagRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskRemoveTagRequest = /* @__PURE__ */ function() {
      function TaskRemoveTagRequest2(tag) {
        _classCallCheck(this, TaskRemoveTagRequest2);
        this.tag = tag;
      }
      _createClass(TaskRemoveTagRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskRemoveTagRequest2();
            if (data.hasOwnProperty("tag"))
              obj.tag = _ApiClient.ApiClient.convertToType(data["tag"], "String");
          }
          return obj;
        }
      }]);
      return TaskRemoveTagRequest2;
    }();
    exports.TaskRemoveTagRequest = TaskRemoveTagRequest;
    TaskRemoveTagRequest.prototype.tag = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidRemoveTagBody.js
var require_TaskGidRemoveTagBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidRemoveTagBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidRemoveTagBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskRemoveTagRequest = require_TaskRemoveTagRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidRemoveTagBody = /* @__PURE__ */ function() {
      function TaskGidRemoveTagBody2() {
        _classCallCheck(this, TaskGidRemoveTagBody2);
      }
      _createClass(TaskGidRemoveTagBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidRemoveTagBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskRemoveTagRequest.TaskRemoveTagRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidRemoveTagBody2;
    }();
    exports.TaskGidRemoveTagBody = TaskGidRemoveTagBody;
    TaskGidRemoveTagBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskSetParentRequest.js
var require_TaskSetParentRequest = __commonJS({
  "node_modules/asana/dist/model/TaskSetParentRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskSetParentRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskSetParentRequest = /* @__PURE__ */ function() {
      function TaskSetParentRequest2(parent) {
        _classCallCheck(this, TaskSetParentRequest2);
        this.parent = parent;
      }
      _createClass(TaskSetParentRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskSetParentRequest2();
            if (data.hasOwnProperty("parent"))
              obj.parent = _ApiClient.ApiClient.convertToType(data["parent"], "String");
            if (data.hasOwnProperty("insert_after"))
              obj.insert_after = _ApiClient.ApiClient.convertToType(data["insert_after"], "String");
            if (data.hasOwnProperty("insert_before"))
              obj.insert_before = _ApiClient.ApiClient.convertToType(data["insert_before"], "String");
          }
          return obj;
        }
      }]);
      return TaskSetParentRequest2;
    }();
    exports.TaskSetParentRequest = TaskSetParentRequest;
    TaskSetParentRequest.prototype.parent = void 0;
    TaskSetParentRequest.prototype.insert_after = void 0;
    TaskSetParentRequest.prototype.insert_before = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidSetParentBody.js
var require_TaskGidSetParentBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidSetParentBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidSetParentBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskSetParentRequest = require_TaskSetParentRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidSetParentBody = /* @__PURE__ */ function() {
      function TaskGidSetParentBody2() {
        _classCallCheck(this, TaskGidSetParentBody2);
      }
      _createClass(TaskGidSetParentBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidSetParentBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskSetParentRequest.TaskSetParentRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidSetParentBody2;
    }();
    exports.TaskGidSetParentBody = TaskGidSetParentBody;
    TaskGidSetParentBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidStoriesBody.js
var require_TaskGidStoriesBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidStoriesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidStoriesBody = void 0;
    var _ApiClient = require_ApiClient();
    var _StoryRequest = require_StoryRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidStoriesBody = /* @__PURE__ */ function() {
      function TaskGidStoriesBody2() {
        _classCallCheck(this, TaskGidStoriesBody2);
      }
      _createClass(TaskGidStoriesBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidStoriesBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _StoryRequest.StoryRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidStoriesBody2;
    }();
    exports.TaskGidStoriesBody = TaskGidStoriesBody;
    TaskGidStoriesBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskRequest.js
var require_TaskRequest = __commonJS({
  "node_modules/asana/dist/model/TaskRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    var _GoalResponseLikes = require_GoalResponseLikes();
    var _TaskBaseCompletedBy = require_TaskBaseCompletedBy();
    var _TaskBaseDependencies = require_TaskBaseDependencies();
    var _TaskBaseExternal = require_TaskBaseExternal();
    var _TaskBaseMemberships = require_TaskBaseMemberships();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskRequest = /* @__PURE__ */ function() {
      function TaskRequest2() {
        _classCallCheck(this, TaskRequest2);
      }
      _createClass(TaskRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("approval_status"))
              obj.approval_status = _ApiClient.ApiClient.convertToType(data["approval_status"], "String");
            if (data.hasOwnProperty("assignee_status"))
              obj.assignee_status = _ApiClient.ApiClient.convertToType(data["assignee_status"], "String");
            if (data.hasOwnProperty("completed"))
              obj.completed = _ApiClient.ApiClient.convertToType(data["completed"], "Boolean");
            if (data.hasOwnProperty("completed_at"))
              obj.completed_at = _ApiClient.ApiClient.convertToType(data["completed_at"], "Date");
            if (data.hasOwnProperty("completed_by"))
              obj.completed_by = _TaskBaseCompletedBy.TaskBaseCompletedBy.constructFromObject(data["completed_by"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("dependencies"))
              obj.dependencies = _ApiClient.ApiClient.convertToType(data["dependencies"], [_TaskBaseDependencies.TaskBaseDependencies]);
            if (data.hasOwnProperty("dependents"))
              obj.dependents = _ApiClient.ApiClient.convertToType(data["dependents"], [_TaskBaseDependencies.TaskBaseDependencies]);
            if (data.hasOwnProperty("due_at"))
              obj.due_at = _ApiClient.ApiClient.convertToType(data["due_at"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("external"))
              obj.external = _TaskBaseExternal.TaskBaseExternal.constructFromObject(data["external"]);
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("hearted"))
              obj.hearted = _ApiClient.ApiClient.convertToType(data["hearted"], "Boolean");
            if (data.hasOwnProperty("hearts"))
              obj.hearts = _ApiClient.ApiClient.convertToType(data["hearts"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("is_rendered_as_separator"))
              obj.is_rendered_as_separator = _ApiClient.ApiClient.convertToType(data["is_rendered_as_separator"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("likes"))
              obj.likes = _ApiClient.ApiClient.convertToType(data["likes"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("memberships"))
              obj.memberships = _ApiClient.ApiClient.convertToType(data["memberships"], [_TaskBaseMemberships.TaskBaseMemberships]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("num_hearts"))
              obj.num_hearts = _ApiClient.ApiClient.convertToType(data["num_hearts"], "Number");
            if (data.hasOwnProperty("num_likes"))
              obj.num_likes = _ApiClient.ApiClient.convertToType(data["num_likes"], "Number");
            if (data.hasOwnProperty("num_subtasks"))
              obj.num_subtasks = _ApiClient.ApiClient.convertToType(data["num_subtasks"], "Number");
            if (data.hasOwnProperty("start_at"))
              obj.start_at = _ApiClient.ApiClient.convertToType(data["start_at"], "Date");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("actual_time_minutes"))
              obj.actual_time_minutes = _ApiClient.ApiClient.convertToType(data["actual_time_minutes"], "Number");
            if (data.hasOwnProperty("assignee"))
              obj.assignee = _ApiClient.ApiClient.convertToType(data["assignee"], "String");
            if (data.hasOwnProperty("assignee_section"))
              obj.assignee_section = _ApiClient.ApiClient.convertToType(data["assignee_section"], "String");
            if (data.hasOwnProperty("custom_fields"))
              obj.custom_fields = _ApiClient.ApiClient.convertToType(data["custom_fields"], {
                "String": "String"
              });
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], ["String"]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _ApiClient.ApiClient.convertToType(data["parent"], "String");
            if (data.hasOwnProperty("projects"))
              obj.projects = _ApiClient.ApiClient.convertToType(data["projects"], ["String"]);
            if (data.hasOwnProperty("tags"))
              obj.tags = _ApiClient.ApiClient.convertToType(data["tags"], ["String"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], "String");
          }
          return obj;
        }
      }]);
      return TaskRequest2;
    }();
    exports.TaskRequest = TaskRequest;
    TaskRequest.prototype.gid = void 0;
    TaskRequest.prototype.resource_type = void 0;
    TaskRequest.prototype.name = void 0;
    TaskRequest.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    TaskRequest.prototype.resource_subtype = void 0;
    TaskRequest.prototype.created_by = void 0;
    TaskRequest.ApprovalStatusEnum = {
      /**
       * value: "pending"
       * @const
       */
      pending: "pending",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "rejected"
       * @const
       */
      rejected: "rejected",
      /**
       * value: "changes_requested"
       * @const
       */
      changes_requested: "changes_requested"
    };
    TaskRequest.prototype.approval_status = void 0;
    TaskRequest.AssigneeStatusEnum = {
      /**
       * value: "today"
       * @const
       */
      today: "today",
      /**
       * value: "upcoming"
       * @const
       */
      upcoming: "upcoming",
      /**
       * value: "later"
       * @const
       */
      later: "later",
      /**
       * value: "new"
       * @const
       */
      _new: "new",
      /**
       * value: "inbox"
       * @const
       */
      inbox: "inbox"
    };
    TaskRequest.prototype.assignee_status = void 0;
    TaskRequest.prototype.completed = void 0;
    TaskRequest.prototype.completed_at = void 0;
    TaskRequest.prototype.completed_by = void 0;
    TaskRequest.prototype.created_at = void 0;
    TaskRequest.prototype.dependencies = void 0;
    TaskRequest.prototype.dependents = void 0;
    TaskRequest.prototype.due_at = void 0;
    TaskRequest.prototype.due_on = void 0;
    TaskRequest.prototype.external = void 0;
    TaskRequest.prototype.html_notes = void 0;
    TaskRequest.prototype.hearted = void 0;
    TaskRequest.prototype.hearts = void 0;
    TaskRequest.prototype.is_rendered_as_separator = void 0;
    TaskRequest.prototype.liked = void 0;
    TaskRequest.prototype.likes = void 0;
    TaskRequest.prototype.memberships = void 0;
    TaskRequest.prototype.modified_at = void 0;
    TaskRequest.prototype.notes = void 0;
    TaskRequest.prototype.num_hearts = void 0;
    TaskRequest.prototype.num_likes = void 0;
    TaskRequest.prototype.num_subtasks = void 0;
    TaskRequest.prototype.start_at = void 0;
    TaskRequest.prototype.start_on = void 0;
    TaskRequest.prototype.actual_time_minutes = void 0;
    TaskRequest.prototype.assignee = void 0;
    TaskRequest.prototype.assignee_section = void 0;
    TaskRequest.prototype.custom_fields = void 0;
    TaskRequest.prototype.followers = void 0;
    TaskRequest.prototype.parent = void 0;
    TaskRequest.prototype.projects = void 0;
    TaskRequest.prototype.tags = void 0;
    TaskRequest.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidSubtasksBody.js
var require_TaskGidSubtasksBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidSubtasksBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidSubtasksBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskRequest = require_TaskRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidSubtasksBody = /* @__PURE__ */ function() {
      function TaskGidSubtasksBody2() {
        _classCallCheck(this, TaskGidSubtasksBody2);
      }
      _createClass(TaskGidSubtasksBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidSubtasksBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskRequest.TaskRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidSubtasksBody2;
    }();
    exports.TaskGidSubtasksBody = TaskGidSubtasksBody;
    TaskGidSubtasksBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskGidTimeTrackingEntriesBody.js
var require_TaskGidTimeTrackingEntriesBody = __commonJS({
  "node_modules/asana/dist/model/TaskGidTimeTrackingEntriesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskGidTimeTrackingEntriesBody = void 0;
    var _ApiClient = require_ApiClient();
    var _CreateTimeTrackingEntryRequest = require_CreateTimeTrackingEntryRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskGidTimeTrackingEntriesBody = /* @__PURE__ */ function() {
      function TaskGidTimeTrackingEntriesBody2() {
        _classCallCheck(this, TaskGidTimeTrackingEntriesBody2);
      }
      _createClass(TaskGidTimeTrackingEntriesBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskGidTimeTrackingEntriesBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _CreateTimeTrackingEntryRequest.CreateTimeTrackingEntryRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskGidTimeTrackingEntriesBody2;
    }();
    exports.TaskGidTimeTrackingEntriesBody = TaskGidTimeTrackingEntriesBody;
    TaskGidTimeTrackingEntriesBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponseAssigneeSection.js
var require_TaskResponseAssigneeSection = __commonJS({
  "node_modules/asana/dist/model/TaskResponseAssigneeSection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponseAssigneeSection = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponseAssigneeSection = /* @__PURE__ */ function() {
      function TaskResponseAssigneeSection2() {
        _classCallCheck(this, TaskResponseAssigneeSection2);
      }
      _createClass(TaskResponseAssigneeSection2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponseAssigneeSection2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TaskResponseAssigneeSection2;
    }();
    exports.TaskResponseAssigneeSection = TaskResponseAssigneeSection;
    TaskResponseAssigneeSection.prototype.gid = void 0;
    TaskResponseAssigneeSection.prototype.resource_type = void 0;
    TaskResponseAssigneeSection.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponseCustomFields.js
var require_TaskResponseCustomFields = __commonJS({
  "node_modules/asana/dist/model/TaskResponseCustomFields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponseCustomFields = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponseCustomFields = /* @__PURE__ */ function() {
      function TaskResponseCustomFields2() {
        _classCallCheck(this, TaskResponseCustomFields2);
      }
      _createClass(TaskResponseCustomFields2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponseCustomFields2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("type"))
              obj.type = _ApiClient.ApiClient.convertToType(data["type"], "String");
            if (data.hasOwnProperty("enum_options"))
              obj.enum_options = _ApiClient.ApiClient.convertToType(data["enum_options"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("enabled"))
              obj.enabled = _ApiClient.ApiClient.convertToType(data["enabled"], "Boolean");
            if (data.hasOwnProperty("is_formula_field"))
              obj.is_formula_field = _ApiClient.ApiClient.convertToType(data["is_formula_field"], "Boolean");
            if (data.hasOwnProperty("date_value"))
              obj.date_value = _CustomFieldBaseDateValue.CustomFieldBaseDateValue.constructFromObject(data["date_value"]);
            if (data.hasOwnProperty("enum_value"))
              obj.enum_value = _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue.constructFromObject(data["enum_value"]);
            if (data.hasOwnProperty("multi_enum_values"))
              obj.multi_enum_values = _ApiClient.ApiClient.convertToType(data["multi_enum_values"], [_CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions]);
            if (data.hasOwnProperty("number_value"))
              obj.number_value = _ApiClient.ApiClient.convertToType(data["number_value"], "Number");
            if (data.hasOwnProperty("text_value"))
              obj.text_value = _ApiClient.ApiClient.convertToType(data["text_value"], "String");
            if (data.hasOwnProperty("display_value"))
              obj.display_value = _ApiClient.ApiClient.convertToType(data["display_value"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("precision"))
              obj.precision = _ApiClient.ApiClient.convertToType(data["precision"], "Number");
            if (data.hasOwnProperty("format"))
              obj.format = _ApiClient.ApiClient.convertToType(data["format"], "String");
            if (data.hasOwnProperty("currency_code"))
              obj.currency_code = _ApiClient.ApiClient.convertToType(data["currency_code"], "String");
            if (data.hasOwnProperty("custom_label"))
              obj.custom_label = _ApiClient.ApiClient.convertToType(data["custom_label"], "String");
            if (data.hasOwnProperty("custom_label_position"))
              obj.custom_label_position = _ApiClient.ApiClient.convertToType(data["custom_label_position"], "String");
            if (data.hasOwnProperty("is_global_to_workspace"))
              obj.is_global_to_workspace = _ApiClient.ApiClient.convertToType(data["is_global_to_workspace"], "Boolean");
            if (data.hasOwnProperty("has_notifications_enabled"))
              obj.has_notifications_enabled = _ApiClient.ApiClient.convertToType(data["has_notifications_enabled"], "Boolean");
            if (data.hasOwnProperty("asana_created_field"))
              obj.asana_created_field = _ApiClient.ApiClient.convertToType(data["asana_created_field"], "String");
            if (data.hasOwnProperty("is_value_read_only"))
              obj.is_value_read_only = _ApiClient.ApiClient.convertToType(data["is_value_read_only"], "Boolean");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("people_value"))
              obj.people_value = _ApiClient.ApiClient.convertToType(data["people_value"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
          }
          return obj;
        }
      }]);
      return TaskResponseCustomFields2;
    }();
    exports.TaskResponseCustomFields = TaskResponseCustomFields;
    TaskResponseCustomFields.prototype.gid = void 0;
    TaskResponseCustomFields.prototype.resource_type = void 0;
    TaskResponseCustomFields.prototype.name = void 0;
    TaskResponseCustomFields.ResourceSubtypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    TaskResponseCustomFields.prototype.resource_subtype = void 0;
    TaskResponseCustomFields.TypeEnum = {
      /**
       * value: "text"
       * @const
       */
      text: "text",
      /**
       * value: "enum"
       * @const
       */
      _enum: "enum",
      /**
       * value: "multi_enum"
       * @const
       */
      multi_enum: "multi_enum",
      /**
       * value: "number"
       * @const
       */
      _number: "number",
      /**
       * value: "date"
       * @const
       */
      _date: "date",
      /**
       * value: "people"
       * @const
       */
      people: "people"
    };
    TaskResponseCustomFields.prototype.type = void 0;
    TaskResponseCustomFields.prototype.enum_options = void 0;
    TaskResponseCustomFields.prototype.enabled = void 0;
    TaskResponseCustomFields.prototype.is_formula_field = void 0;
    TaskResponseCustomFields.prototype.date_value = void 0;
    TaskResponseCustomFields.prototype.enum_value = void 0;
    TaskResponseCustomFields.prototype.multi_enum_values = void 0;
    TaskResponseCustomFields.prototype.number_value = void 0;
    TaskResponseCustomFields.prototype.text_value = void 0;
    TaskResponseCustomFields.prototype.display_value = void 0;
    TaskResponseCustomFields.prototype.description = void 0;
    TaskResponseCustomFields.prototype.precision = void 0;
    TaskResponseCustomFields.FormatEnum = {
      /**
       * value: "currency"
       * @const
       */
      currency: "currency",
      /**
       * value: "identifier"
       * @const
       */
      identifier: "identifier",
      /**
       * value: "percentage"
       * @const
       */
      percentage: "percentage",
      /**
       * value: "custom"
       * @const
       */
      custom: "custom",
      /**
       * value: "duration"
       * @const
       */
      duration: "duration",
      /**
       * value: "none"
       * @const
       */
      none: "none"
    };
    TaskResponseCustomFields.prototype.format = void 0;
    TaskResponseCustomFields.prototype.currency_code = void 0;
    TaskResponseCustomFields.prototype.custom_label = void 0;
    TaskResponseCustomFields.CustomLabelPositionEnum = {
      /**
       * value: "prefix"
       * @const
       */
      prefix: "prefix",
      /**
       * value: "suffix"
       * @const
       */
      suffix: "suffix",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    TaskResponseCustomFields.prototype.custom_label_position = void 0;
    TaskResponseCustomFields.prototype.is_global_to_workspace = void 0;
    TaskResponseCustomFields.prototype.has_notifications_enabled = void 0;
    TaskResponseCustomFields.AsanaCreatedFieldEnum = {
      /**
       * value: "a_v_requirements"
       * @const
       */
      a_v_requirements: "a_v_requirements",
      /**
       * value: "account_name"
       * @const
       */
      account_name: "account_name",
      /**
       * value: "actionable"
       * @const
       */
      actionable: "actionable",
      /**
       * value: "align_shipping_link"
       * @const
       */
      align_shipping_link: "align_shipping_link",
      /**
       * value: "align_status"
       * @const
       */
      align_status: "align_status",
      /**
       * value: "allotted_time"
       * @const
       */
      allotted_time: "allotted_time",
      /**
       * value: "appointment"
       * @const
       */
      appointment: "appointment",
      /**
       * value: "approval_stage"
       * @const
       */
      approval_stage: "approval_stage",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "article_series"
       * @const
       */
      article_series: "article_series",
      /**
       * value: "board_committee"
       * @const
       */
      board_committee: "board_committee",
      /**
       * value: "browser"
       * @const
       */
      browser: "browser",
      /**
       * value: "campaign_audience"
       * @const
       */
      campaign_audience: "campaign_audience",
      /**
       * value: "campaign_project_status"
       * @const
       */
      campaign_project_status: "campaign_project_status",
      /**
       * value: "campaign_regions"
       * @const
       */
      campaign_regions: "campaign_regions",
      /**
       * value: "channel_primary"
       * @const
       */
      channel_primary: "channel_primary",
      /**
       * value: "client_topic_type"
       * @const
       */
      client_topic_type: "client_topic_type",
      /**
       * value: "complete_by"
       * @const
       */
      complete_by: "complete_by",
      /**
       * value: "contact"
       * @const
       */
      contact: "contact",
      /**
       * value: "contact_email_address"
       * @const
       */
      contact_email_address: "contact_email_address",
      /**
       * value: "content_channels"
       * @const
       */
      content_channels: "content_channels",
      /**
       * value: "content_channels_needed"
       * @const
       */
      content_channels_needed: "content_channels_needed",
      /**
       * value: "content_stage"
       * @const
       */
      content_stage: "content_stage",
      /**
       * value: "content_type"
       * @const
       */
      content_type: "content_type",
      /**
       * value: "contract"
       * @const
       */
      contract: "contract",
      /**
       * value: "contract_status"
       * @const
       */
      contract_status: "contract_status",
      /**
       * value: "cost"
       * @const
       */
      cost: "cost",
      /**
       * value: "creation_stage"
       * @const
       */
      creation_stage: "creation_stage",
      /**
       * value: "creative_channel"
       * @const
       */
      creative_channel: "creative_channel",
      /**
       * value: "creative_needed"
       * @const
       */
      creative_needed: "creative_needed",
      /**
       * value: "creative_needs"
       * @const
       */
      creative_needs: "creative_needs",
      /**
       * value: "data_sensitivity"
       * @const
       */
      data_sensitivity: "data_sensitivity",
      /**
       * value: "deal_size"
       * @const
       */
      deal_size: "deal_size",
      /**
       * value: "delivery_appt"
       * @const
       */
      delivery_appt: "delivery_appt",
      /**
       * value: "delivery_appt_date"
       * @const
       */
      delivery_appt_date: "delivery_appt_date",
      /**
       * value: "department"
       * @const
       */
      department: "department",
      /**
       * value: "department_responsible"
       * @const
       */
      department_responsible: "department_responsible",
      /**
       * value: "design_request_needed"
       * @const
       */
      design_request_needed: "design_request_needed",
      /**
       * value: "design_request_type"
       * @const
       */
      design_request_type: "design_request_type",
      /**
       * value: "discussion_category"
       * @const
       */
      discussion_category: "discussion_category",
      /**
       * value: "do_this_task"
       * @const
       */
      do_this_task: "do_this_task",
      /**
       * value: "editorial_content_status"
       * @const
       */
      editorial_content_status: "editorial_content_status",
      /**
       * value: "editorial_content_tag"
       * @const
       */
      editorial_content_tag: "editorial_content_tag",
      /**
       * value: "editorial_content_type"
       * @const
       */
      editorial_content_type: "editorial_content_type",
      /**
       * value: "effort"
       * @const
       */
      effort: "effort",
      /**
       * value: "effort_level"
       * @const
       */
      effort_level: "effort_level",
      /**
       * value: "est_completion_date"
       * @const
       */
      est_completion_date: "est_completion_date",
      /**
       * value: "estimated_time"
       * @const
       */
      estimated_time: "estimated_time",
      /**
       * value: "estimated_value"
       * @const
       */
      estimated_value: "estimated_value",
      /**
       * value: "expected_cost"
       * @const
       */
      expected_cost: "expected_cost",
      /**
       * value: "external_steps_needed"
       * @const
       */
      external_steps_needed: "external_steps_needed",
      /**
       * value: "favorite_idea"
       * @const
       */
      favorite_idea: "favorite_idea",
      /**
       * value: "feedback_type"
       * @const
       */
      feedback_type: "feedback_type",
      /**
       * value: "financial"
       * @const
       */
      financial: "financial",
      /**
       * value: "funding_amount"
       * @const
       */
      funding_amount: "funding_amount",
      /**
       * value: "grant_application_process"
       * @const
       */
      grant_application_process: "grant_application_process",
      /**
       * value: "hiring_candidate_status"
       * @const
       */
      hiring_candidate_status: "hiring_candidate_status",
      /**
       * value: "idea_status"
       * @const
       */
      idea_status: "idea_status",
      /**
       * value: "ids_link"
       * @const
       */
      ids_link: "ids_link",
      /**
       * value: "ids_patient_link"
       * @const
       */
      ids_patient_link: "ids_patient_link",
      /**
       * value: "implementation_stage"
       * @const
       */
      implementation_stage: "implementation_stage",
      /**
       * value: "insurance"
       * @const
       */
      insurance: "insurance",
      /**
       * value: "interview_area"
       * @const
       */
      interview_area: "interview_area",
      /**
       * value: "interview_question_score"
       * @const
       */
      interview_question_score: "interview_question_score",
      /**
       * value: "itero_scan_link"
       * @const
       */
      itero_scan_link: "itero_scan_link",
      /**
       * value: "job_s_applied_to"
       * @const
       */
      job_s_applied_to: "job_s_applied_to",
      /**
       * value: "lab"
       * @const
       */
      lab: "lab",
      /**
       * value: "launch_status"
       * @const
       */
      launch_status: "launch_status",
      /**
       * value: "lead_status"
       * @const
       */
      lead_status: "lead_status",
      /**
       * value: "localization_language"
       * @const
       */
      localization_language: "localization_language",
      /**
       * value: "localization_market_team"
       * @const
       */
      localization_market_team: "localization_market_team",
      /**
       * value: "localization_status"
       * @const
       */
      localization_status: "localization_status",
      /**
       * value: "meeting_minutes"
       * @const
       */
      meeting_minutes: "meeting_minutes",
      /**
       * value: "meeting_needed"
       * @const
       */
      meeting_needed: "meeting_needed",
      /**
       * value: "minutes"
       * @const
       */
      minutes: "minutes",
      /**
       * value: "mrr"
       * @const
       */
      mrr: "mrr",
      /**
       * value: "must_localize"
       * @const
       */
      must_localize: "must_localize",
      /**
       * value: "name_of_foundation"
       * @const
       */
      name_of_foundation: "name_of_foundation",
      /**
       * value: "need_to_follow_up"
       * @const
       */
      need_to_follow_up: "need_to_follow_up",
      /**
       * value: "next_appointment"
       * @const
       */
      next_appointment: "next_appointment",
      /**
       * value: "next_steps_sales"
       * @const
       */
      next_steps_sales: "next_steps_sales",
      /**
       * value: "num_people"
       * @const
       */
      num_people: "num_people",
      /**
       * value: "number_of_user_reports"
       * @const
       */
      number_of_user_reports: "number_of_user_reports",
      /**
       * value: "office_location"
       * @const
       */
      office_location: "office_location",
      /**
       * value: "onboarding_activity"
       * @const
       */
      onboarding_activity: "onboarding_activity",
      /**
       * value: "owner"
       * @const
       */
      owner: "owner",
      /**
       * value: "participants_needed"
       * @const
       */
      participants_needed: "participants_needed",
      /**
       * value: "patient_date_of_birth"
       * @const
       */
      patient_date_of_birth: "patient_date_of_birth",
      /**
       * value: "patient_email"
       * @const
       */
      patient_email: "patient_email",
      /**
       * value: "patient_phone"
       * @const
       */
      patient_phone: "patient_phone",
      /**
       * value: "patient_status"
       * @const
       */
      patient_status: "patient_status",
      /**
       * value: "phone_number"
       * @const
       */
      phone_number: "phone_number",
      /**
       * value: "planning_category"
       * @const
       */
      planning_category: "planning_category",
      /**
       * value: "point_of_contact"
       * @const
       */
      point_of_contact: "point_of_contact",
      /**
       * value: "position"
       * @const
       */
      position: "position",
      /**
       * value: "post_format"
       * @const
       */
      post_format: "post_format",
      /**
       * value: "prescription"
       * @const
       */
      prescription: "prescription",
      /**
       * value: "priority"
       * @const
       */
      priority: "priority",
      /**
       * value: "priority_level"
       * @const
       */
      priority_level: "priority_level",
      /**
       * value: "product"
       * @const
       */
      product: "product",
      /**
       * value: "product_stage"
       * @const
       */
      product_stage: "product_stage",
      /**
       * value: "progress"
       * @const
       */
      progress: "progress",
      /**
       * value: "project_size"
       * @const
       */
      project_size: "project_size",
      /**
       * value: "project_status"
       * @const
       */
      project_status: "project_status",
      /**
       * value: "proposed_budget"
       * @const
       */
      proposed_budget: "proposed_budget",
      /**
       * value: "publish_status"
       * @const
       */
      publish_status: "publish_status",
      /**
       * value: "reason_for_scan"
       * @const
       */
      reason_for_scan: "reason_for_scan",
      /**
       * value: "referral"
       * @const
       */
      referral: "referral",
      /**
       * value: "request_type"
       * @const
       */
      request_type: "request_type",
      /**
       * value: "research_status"
       * @const
       */
      research_status: "research_status",
      /**
       * value: "responsible_department"
       * @const
       */
      responsible_department: "responsible_department",
      /**
       * value: "responsible_team"
       * @const
       */
      responsible_team: "responsible_team",
      /**
       * value: "risk_assessment_status"
       * @const
       */
      risk_assessment_status: "risk_assessment_status",
      /**
       * value: "room_name"
       * @const
       */
      room_name: "room_name",
      /**
       * value: "sales_counterpart"
       * @const
       */
      sales_counterpart: "sales_counterpart",
      /**
       * value: "sentiment"
       * @const
       */
      sentiment: "sentiment",
      /**
       * value: "shipping_link"
       * @const
       */
      shipping_link: "shipping_link",
      /**
       * value: "social_channels"
       * @const
       */
      social_channels: "social_channels",
      /**
       * value: "stage"
       * @const
       */
      stage: "stage",
      /**
       * value: "status"
       * @const
       */
      status: "status",
      /**
       * value: "status_design"
       * @const
       */
      status_design: "status_design",
      /**
       * value: "status_of_initiative"
       * @const
       */
      status_of_initiative: "status_of_initiative",
      /**
       * value: "system_setup"
       * @const
       */
      system_setup: "system_setup",
      /**
       * value: "task_progress"
       * @const
       */
      task_progress: "task_progress",
      /**
       * value: "team"
       * @const
       */
      team: "team",
      /**
       * value: "team_marketing"
       * @const
       */
      team_marketing: "team_marketing",
      /**
       * value: "team_responsible"
       * @const
       */
      team_responsible: "team_responsible",
      /**
       * value: "time_it_takes_to_complete_tasks"
       * @const
       */
      time_it_takes_to_complete_tasks: "time_it_takes_to_complete_tasks",
      /**
       * value: "timeframe"
       * @const
       */
      timeframe: "timeframe",
      /**
       * value: "treatment_type"
       * @const
       */
      treatment_type: "treatment_type",
      /**
       * value: "type_work_requests_it"
       * @const
       */
      type_work_requests_it: "type_work_requests_it",
      /**
       * value: "use_agency"
       * @const
       */
      use_agency: "use_agency",
      /**
       * value: "user_name"
       * @const
       */
      user_name: "user_name",
      /**
       * value: "vendor_category"
       * @const
       */
      vendor_category: "vendor_category",
      /**
       * value: "vendor_type"
       * @const
       */
      vendor_type: "vendor_type",
      /**
       * value: "word_count"
       * @const
       */
      word_count: "word_count",
      /**
       * value: "null"
       * @const
       */
      _null: "null"
    };
    TaskResponseCustomFields.prototype.asana_created_field = void 0;
    TaskResponseCustomFields.prototype.is_value_read_only = void 0;
    TaskResponseCustomFields.prototype.created_by = void 0;
    TaskResponseCustomFields.prototype.people_value = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponseParent.js
var require_TaskResponseParent = __commonJS({
  "node_modules/asana/dist/model/TaskResponseParent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponseParent = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponseParent = /* @__PURE__ */ function() {
      function TaskResponseParent2() {
        _classCallCheck(this, TaskResponseParent2);
      }
      _createClass(TaskResponseParent2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponseParent2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
          }
          return obj;
        }
      }]);
      return TaskResponseParent2;
    }();
    exports.TaskResponseParent = TaskResponseParent;
    TaskResponseParent.prototype.gid = void 0;
    TaskResponseParent.prototype.resource_type = void 0;
    TaskResponseParent.prototype.name = void 0;
    TaskResponseParent.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    TaskResponseParent.prototype.resource_subtype = void 0;
    TaskResponseParent.prototype.created_by = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponseTags.js
var require_TaskResponseTags = __commonJS({
  "node_modules/asana/dist/model/TaskResponseTags.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponseTags = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponseTags = /* @__PURE__ */ function() {
      function TaskResponseTags2() {
        _classCallCheck(this, TaskResponseTags2);
      }
      _createClass(TaskResponseTags2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponseTags2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TaskResponseTags2;
    }();
    exports.TaskResponseTags = TaskResponseTags;
    TaskResponseTags.prototype.gid = void 0;
    TaskResponseTags.prototype.resource_type = void 0;
    TaskResponseTags.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponseWorkspace.js
var require_TaskResponseWorkspace = __commonJS({
  "node_modules/asana/dist/model/TaskResponseWorkspace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponseWorkspace = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponseWorkspace = /* @__PURE__ */ function() {
      function TaskResponseWorkspace2() {
        _classCallCheck(this, TaskResponseWorkspace2);
      }
      _createClass(TaskResponseWorkspace2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponseWorkspace2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TaskResponseWorkspace2;
    }();
    exports.TaskResponseWorkspace = TaskResponseWorkspace;
    TaskResponseWorkspace.prototype.gid = void 0;
    TaskResponseWorkspace.prototype.resource_type = void 0;
    TaskResponseWorkspace.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponse.js
var require_TaskResponse = __commonJS({
  "node_modules/asana/dist/model/TaskResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseLikes = require_GoalResponseLikes();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _TaskBaseCompletedBy = require_TaskBaseCompletedBy();
    var _TaskBaseDependencies = require_TaskBaseDependencies();
    var _TaskBaseExternal = require_TaskBaseExternal();
    var _TaskBaseMemberships = require_TaskBaseMemberships();
    var _TaskResponseAssigneeSection = require_TaskResponseAssigneeSection();
    var _TaskResponseCustomFields = require_TaskResponseCustomFields();
    var _TaskResponseParent = require_TaskResponseParent();
    var _TaskResponseTags = require_TaskResponseTags();
    var _TaskResponseWorkspace = require_TaskResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponse = /* @__PURE__ */ function() {
      function TaskResponse2() {
        _classCallCheck(this, TaskResponse2);
      }
      _createClass(TaskResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("approval_status"))
              obj.approval_status = _ApiClient.ApiClient.convertToType(data["approval_status"], "String");
            if (data.hasOwnProperty("assignee_status"))
              obj.assignee_status = _ApiClient.ApiClient.convertToType(data["assignee_status"], "String");
            if (data.hasOwnProperty("completed"))
              obj.completed = _ApiClient.ApiClient.convertToType(data["completed"], "Boolean");
            if (data.hasOwnProperty("completed_at"))
              obj.completed_at = _ApiClient.ApiClient.convertToType(data["completed_at"], "Date");
            if (data.hasOwnProperty("completed_by"))
              obj.completed_by = _TaskBaseCompletedBy.TaskBaseCompletedBy.constructFromObject(data["completed_by"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("dependencies"))
              obj.dependencies = _ApiClient.ApiClient.convertToType(data["dependencies"], [_TaskBaseDependencies.TaskBaseDependencies]);
            if (data.hasOwnProperty("dependents"))
              obj.dependents = _ApiClient.ApiClient.convertToType(data["dependents"], [_TaskBaseDependencies.TaskBaseDependencies]);
            if (data.hasOwnProperty("due_at"))
              obj.due_at = _ApiClient.ApiClient.convertToType(data["due_at"], "Date");
            if (data.hasOwnProperty("due_on"))
              obj.due_on = _ApiClient.ApiClient.convertToType(data["due_on"], "Date");
            if (data.hasOwnProperty("external"))
              obj.external = _TaskBaseExternal.TaskBaseExternal.constructFromObject(data["external"]);
            if (data.hasOwnProperty("html_notes"))
              obj.html_notes = _ApiClient.ApiClient.convertToType(data["html_notes"], "String");
            if (data.hasOwnProperty("hearted"))
              obj.hearted = _ApiClient.ApiClient.convertToType(data["hearted"], "Boolean");
            if (data.hasOwnProperty("hearts"))
              obj.hearts = _ApiClient.ApiClient.convertToType(data["hearts"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("is_rendered_as_separator"))
              obj.is_rendered_as_separator = _ApiClient.ApiClient.convertToType(data["is_rendered_as_separator"], "Boolean");
            if (data.hasOwnProperty("liked"))
              obj.liked = _ApiClient.ApiClient.convertToType(data["liked"], "Boolean");
            if (data.hasOwnProperty("likes"))
              obj.likes = _ApiClient.ApiClient.convertToType(data["likes"], [_GoalResponseLikes.GoalResponseLikes]);
            if (data.hasOwnProperty("memberships"))
              obj.memberships = _ApiClient.ApiClient.convertToType(data["memberships"], [_TaskBaseMemberships.TaskBaseMemberships]);
            if (data.hasOwnProperty("modified_at"))
              obj.modified_at = _ApiClient.ApiClient.convertToType(data["modified_at"], "Date");
            if (data.hasOwnProperty("notes"))
              obj.notes = _ApiClient.ApiClient.convertToType(data["notes"], "String");
            if (data.hasOwnProperty("num_hearts"))
              obj.num_hearts = _ApiClient.ApiClient.convertToType(data["num_hearts"], "Number");
            if (data.hasOwnProperty("num_likes"))
              obj.num_likes = _ApiClient.ApiClient.convertToType(data["num_likes"], "Number");
            if (data.hasOwnProperty("num_subtasks"))
              obj.num_subtasks = _ApiClient.ApiClient.convertToType(data["num_subtasks"], "Number");
            if (data.hasOwnProperty("start_at"))
              obj.start_at = _ApiClient.ApiClient.convertToType(data["start_at"], "Date");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "Date");
            if (data.hasOwnProperty("actual_time_minutes"))
              obj.actual_time_minutes = _ApiClient.ApiClient.convertToType(data["actual_time_minutes"], "Number");
            if (data.hasOwnProperty("assignee"))
              obj.assignee = _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy.constructFromObject(data["assignee"]);
            if (data.hasOwnProperty("assignee_section"))
              obj.assignee_section = _TaskResponseAssigneeSection.TaskResponseAssigneeSection.constructFromObject(data["assignee_section"]);
            if (data.hasOwnProperty("custom_fields"))
              obj.custom_fields = _ApiClient.ApiClient.convertToType(data["custom_fields"], [_TaskResponseCustomFields.TaskResponseCustomFields]);
            if (data.hasOwnProperty("followers"))
              obj.followers = _ApiClient.ApiClient.convertToType(data["followers"], [_CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue]);
            if (data.hasOwnProperty("parent"))
              obj.parent = _TaskResponseParent.TaskResponseParent.constructFromObject(data["parent"]);
            if (data.hasOwnProperty("projects"))
              obj.projects = _ApiClient.ApiClient.convertToType(data["projects"], [_JobBaseNewProject.JobBaseNewProject]);
            if (data.hasOwnProperty("tags"))
              obj.tags = _ApiClient.ApiClient.convertToType(data["tags"], [_TaskResponseTags.TaskResponseTags]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _TaskResponseWorkspace.TaskResponseWorkspace.constructFromObject(data["workspace"]);
            if (data.hasOwnProperty("permalink_url"))
              obj.permalink_url = _ApiClient.ApiClient.convertToType(data["permalink_url"], "String");
          }
          return obj;
        }
      }]);
      return TaskResponse2;
    }();
    exports.TaskResponse = TaskResponse;
    TaskResponse.prototype.gid = void 0;
    TaskResponse.prototype.resource_type = void 0;
    TaskResponse.prototype.name = void 0;
    TaskResponse.ResourceSubtypeEnum = {
      /**
       * value: "default_task"
       * @const
       */
      default_task: "default_task",
      /**
       * value: "milestone"
       * @const
       */
      milestone: "milestone",
      /**
       * value: "section"
       * @const
       */
      section: "section",
      /**
       * value: "approval"
       * @const
       */
      approval: "approval"
    };
    TaskResponse.prototype.resource_subtype = void 0;
    TaskResponse.prototype.created_by = void 0;
    TaskResponse.ApprovalStatusEnum = {
      /**
       * value: "pending"
       * @const
       */
      pending: "pending",
      /**
       * value: "approved"
       * @const
       */
      approved: "approved",
      /**
       * value: "rejected"
       * @const
       */
      rejected: "rejected",
      /**
       * value: "changes_requested"
       * @const
       */
      changes_requested: "changes_requested"
    };
    TaskResponse.prototype.approval_status = void 0;
    TaskResponse.AssigneeStatusEnum = {
      /**
       * value: "today"
       * @const
       */
      today: "today",
      /**
       * value: "upcoming"
       * @const
       */
      upcoming: "upcoming",
      /**
       * value: "later"
       * @const
       */
      later: "later",
      /**
       * value: "new"
       * @const
       */
      _new: "new",
      /**
       * value: "inbox"
       * @const
       */
      inbox: "inbox"
    };
    TaskResponse.prototype.assignee_status = void 0;
    TaskResponse.prototype.completed = void 0;
    TaskResponse.prototype.completed_at = void 0;
    TaskResponse.prototype.completed_by = void 0;
    TaskResponse.prototype.created_at = void 0;
    TaskResponse.prototype.dependencies = void 0;
    TaskResponse.prototype.dependents = void 0;
    TaskResponse.prototype.due_at = void 0;
    TaskResponse.prototype.due_on = void 0;
    TaskResponse.prototype.external = void 0;
    TaskResponse.prototype.html_notes = void 0;
    TaskResponse.prototype.hearted = void 0;
    TaskResponse.prototype.hearts = void 0;
    TaskResponse.prototype.is_rendered_as_separator = void 0;
    TaskResponse.prototype.liked = void 0;
    TaskResponse.prototype.likes = void 0;
    TaskResponse.prototype.memberships = void 0;
    TaskResponse.prototype.modified_at = void 0;
    TaskResponse.prototype.notes = void 0;
    TaskResponse.prototype.num_hearts = void 0;
    TaskResponse.prototype.num_likes = void 0;
    TaskResponse.prototype.num_subtasks = void 0;
    TaskResponse.prototype.start_at = void 0;
    TaskResponse.prototype.start_on = void 0;
    TaskResponse.prototype.actual_time_minutes = void 0;
    TaskResponse.prototype.assignee = void 0;
    TaskResponse.prototype.assignee_section = void 0;
    TaskResponse.prototype.custom_fields = void 0;
    TaskResponse.prototype.followers = void 0;
    TaskResponse.prototype.parent = void 0;
    TaskResponse.prototype.projects = void 0;
    TaskResponse.prototype.tags = void 0;
    TaskResponse.prototype.workspace = void 0;
    TaskResponse.prototype.permalink_url = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponseArray.js
var require_TaskResponseArray = __commonJS({
  "node_modules/asana/dist/model/TaskResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _TaskResponse = require_TaskResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponseArray = /* @__PURE__ */ function() {
      function TaskResponseArray2(data) {
        _classCallCheck(this, TaskResponseArray2);
        this.data = data;
      }
      _createClass(TaskResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_TaskResponse.TaskResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return TaskResponseArray2;
    }();
    exports.TaskResponseArray = TaskResponseArray;
    TaskResponseArray.prototype.data = void 0;
    TaskResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/TaskResponseData.js
var require_TaskResponseData = __commonJS({
  "node_modules/asana/dist/model/TaskResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TaskResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskResponse = require_TaskResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TaskResponseData = /* @__PURE__ */ function() {
      function TaskResponseData2(data) {
        _classCallCheck(this, TaskResponseData2);
        this.data = data;
      }
      _createClass(TaskResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TaskResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskResponse.TaskResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TaskResponseData2;
    }();
    exports.TaskResponseData = TaskResponseData;
    TaskResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TasksBody.js
var require_TasksBody = __commonJS({
  "node_modules/asana/dist/model/TasksBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TasksBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskRequest = require_TaskRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TasksBody = /* @__PURE__ */ function() {
      function TasksBody2() {
        _classCallCheck(this, TasksBody2);
      }
      _createClass(TasksBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TasksBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskRequest.TaskRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TasksBody2;
    }();
    exports.TasksBody = TasksBody;
    TasksBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TasksTaskGidBody.js
var require_TasksTaskGidBody = __commonJS({
  "node_modules/asana/dist/model/TasksTaskGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TasksTaskGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TaskRequest = require_TaskRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TasksTaskGidBody = /* @__PURE__ */ function() {
      function TasksTaskGidBody2() {
        _classCallCheck(this, TasksTaskGidBody2);
      }
      _createClass(TasksTaskGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TasksTaskGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TaskRequest.TaskRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TasksTaskGidBody2;
    }();
    exports.TasksTaskGidBody = TasksTaskGidBody;
    TasksTaskGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TeamAddUserRequest.js
var require_TeamAddUserRequest = __commonJS({
  "node_modules/asana/dist/model/TeamAddUserRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamAddUserRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamAddUserRequest = /* @__PURE__ */ function() {
      function TeamAddUserRequest2() {
        _classCallCheck(this, TeamAddUserRequest2);
      }
      _createClass(TeamAddUserRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamAddUserRequest2();
            if (data.hasOwnProperty("user"))
              obj.user = _ApiClient.ApiClient.convertToType(data["user"], "String");
          }
          return obj;
        }
      }]);
      return TeamAddUserRequest2;
    }();
    exports.TeamAddUserRequest = TeamAddUserRequest;
    TeamAddUserRequest.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/TeamBase.js
var require_TeamBase = __commonJS({
  "node_modules/asana/dist/model/TeamBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamBase = /* @__PURE__ */ function() {
      function TeamBase2() {
        _classCallCheck(this, TeamBase2);
      }
      _createClass(TeamBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TeamBase2;
    }();
    exports.TeamBase = TeamBase;
    TeamBase.prototype.gid = void 0;
    TeamBase.prototype.resource_type = void 0;
    TeamBase.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TeamCompact.js
var require_TeamCompact = __commonJS({
  "node_modules/asana/dist/model/TeamCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamCompact = /* @__PURE__ */ function() {
      function TeamCompact2() {
        _classCallCheck(this, TeamCompact2);
      }
      _createClass(TeamCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TeamCompact2;
    }();
    exports.TeamCompact = TeamCompact;
    TeamCompact.prototype.gid = void 0;
    TeamCompact.prototype.resource_type = void 0;
    TeamCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TeamGidAddUserBody.js
var require_TeamGidAddUserBody = __commonJS({
  "node_modules/asana/dist/model/TeamGidAddUserBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamGidAddUserBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TeamAddUserRequest = require_TeamAddUserRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamGidAddUserBody = /* @__PURE__ */ function() {
      function TeamGidAddUserBody2() {
        _classCallCheck(this, TeamGidAddUserBody2);
      }
      _createClass(TeamGidAddUserBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamGidAddUserBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TeamAddUserRequest.TeamAddUserRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TeamGidAddUserBody2;
    }();
    exports.TeamGidAddUserBody = TeamGidAddUserBody;
    TeamGidAddUserBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TeamGidProjectsBody.js
var require_TeamGidProjectsBody = __commonJS({
  "node_modules/asana/dist/model/TeamGidProjectsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamGidProjectsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectRequest = require_ProjectRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamGidProjectsBody = /* @__PURE__ */ function() {
      function TeamGidProjectsBody2() {
        _classCallCheck(this, TeamGidProjectsBody2);
      }
      _createClass(TeamGidProjectsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamGidProjectsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectRequest.ProjectRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TeamGidProjectsBody2;
    }();
    exports.TeamGidProjectsBody = TeamGidProjectsBody;
    TeamGidProjectsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TeamRemoveUserRequest.js
var require_TeamRemoveUserRequest = __commonJS({
  "node_modules/asana/dist/model/TeamRemoveUserRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamRemoveUserRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamRemoveUserRequest = /* @__PURE__ */ function() {
      function TeamRemoveUserRequest2() {
        _classCallCheck(this, TeamRemoveUserRequest2);
      }
      _createClass(TeamRemoveUserRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamRemoveUserRequest2();
            if (data.hasOwnProperty("user"))
              obj.user = _ApiClient.ApiClient.convertToType(data["user"], "String");
          }
          return obj;
        }
      }]);
      return TeamRemoveUserRequest2;
    }();
    exports.TeamRemoveUserRequest = TeamRemoveUserRequest;
    TeamRemoveUserRequest.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/TeamGidRemoveUserBody.js
var require_TeamGidRemoveUserBody = __commonJS({
  "node_modules/asana/dist/model/TeamGidRemoveUserBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamGidRemoveUserBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TeamRemoveUserRequest = require_TeamRemoveUserRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamGidRemoveUserBody = /* @__PURE__ */ function() {
      function TeamGidRemoveUserBody2() {
        _classCallCheck(this, TeamGidRemoveUserBody2);
      }
      _createClass(TeamGidRemoveUserBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamGidRemoveUserBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TeamRemoveUserRequest.TeamRemoveUserRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TeamGidRemoveUserBody2;
    }();
    exports.TeamGidRemoveUserBody = TeamGidRemoveUserBody;
    TeamGidRemoveUserBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TeamMembershipBase.js
var require_TeamMembershipBase = __commonJS({
  "node_modules/asana/dist/model/TeamMembershipBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamMembershipBase = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _ProjectTemplateBaseTeam = require_ProjectTemplateBaseTeam();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamMembershipBase = /* @__PURE__ */ function() {
      function TeamMembershipBase2() {
        _classCallCheck(this, TeamMembershipBase2);
      }
      _createClass(TeamMembershipBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamMembershipBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("team"))
              obj.team = _ProjectTemplateBaseTeam.ProjectTemplateBaseTeam.constructFromObject(data["team"]);
            if (data.hasOwnProperty("is_guest"))
              obj.is_guest = _ApiClient.ApiClient.convertToType(data["is_guest"], "Boolean");
            if (data.hasOwnProperty("is_limited_access"))
              obj.is_limited_access = _ApiClient.ApiClient.convertToType(data["is_limited_access"], "Boolean");
            if (data.hasOwnProperty("is_admin"))
              obj.is_admin = _ApiClient.ApiClient.convertToType(data["is_admin"], "Boolean");
          }
          return obj;
        }
      }]);
      return TeamMembershipBase2;
    }();
    exports.TeamMembershipBase = TeamMembershipBase;
    TeamMembershipBase.prototype.gid = void 0;
    TeamMembershipBase.prototype.resource_type = void 0;
    TeamMembershipBase.prototype.user = void 0;
    TeamMembershipBase.prototype.team = void 0;
    TeamMembershipBase.prototype.is_guest = void 0;
    TeamMembershipBase.prototype.is_limited_access = void 0;
    TeamMembershipBase.prototype.is_admin = void 0;
  }
});

// node_modules/asana/dist/model/TeamMembershipCompact.js
var require_TeamMembershipCompact = __commonJS({
  "node_modules/asana/dist/model/TeamMembershipCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamMembershipCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _ProjectTemplateBaseTeam = require_ProjectTemplateBaseTeam();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamMembershipCompact = /* @__PURE__ */ function() {
      function TeamMembershipCompact2() {
        _classCallCheck(this, TeamMembershipCompact2);
      }
      _createClass(TeamMembershipCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamMembershipCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("team"))
              obj.team = _ProjectTemplateBaseTeam.ProjectTemplateBaseTeam.constructFromObject(data["team"]);
            if (data.hasOwnProperty("is_guest"))
              obj.is_guest = _ApiClient.ApiClient.convertToType(data["is_guest"], "Boolean");
            if (data.hasOwnProperty("is_limited_access"))
              obj.is_limited_access = _ApiClient.ApiClient.convertToType(data["is_limited_access"], "Boolean");
            if (data.hasOwnProperty("is_admin"))
              obj.is_admin = _ApiClient.ApiClient.convertToType(data["is_admin"], "Boolean");
          }
          return obj;
        }
      }]);
      return TeamMembershipCompact2;
    }();
    exports.TeamMembershipCompact = TeamMembershipCompact;
    TeamMembershipCompact.prototype.gid = void 0;
    TeamMembershipCompact.prototype.resource_type = void 0;
    TeamMembershipCompact.prototype.user = void 0;
    TeamMembershipCompact.prototype.team = void 0;
    TeamMembershipCompact.prototype.is_guest = void 0;
    TeamMembershipCompact.prototype.is_limited_access = void 0;
    TeamMembershipCompact.prototype.is_admin = void 0;
  }
});

// node_modules/asana/dist/model/TeamMembershipResponse.js
var require_TeamMembershipResponse = __commonJS({
  "node_modules/asana/dist/model/TeamMembershipResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamMembershipResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _ProjectTemplateBaseTeam = require_ProjectTemplateBaseTeam();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamMembershipResponse = /* @__PURE__ */ function() {
      function TeamMembershipResponse2() {
        _classCallCheck(this, TeamMembershipResponse2);
      }
      _createClass(TeamMembershipResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamMembershipResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("team"))
              obj.team = _ProjectTemplateBaseTeam.ProjectTemplateBaseTeam.constructFromObject(data["team"]);
            if (data.hasOwnProperty("is_guest"))
              obj.is_guest = _ApiClient.ApiClient.convertToType(data["is_guest"], "Boolean");
            if (data.hasOwnProperty("is_limited_access"))
              obj.is_limited_access = _ApiClient.ApiClient.convertToType(data["is_limited_access"], "Boolean");
            if (data.hasOwnProperty("is_admin"))
              obj.is_admin = _ApiClient.ApiClient.convertToType(data["is_admin"], "Boolean");
          }
          return obj;
        }
      }]);
      return TeamMembershipResponse2;
    }();
    exports.TeamMembershipResponse = TeamMembershipResponse;
    TeamMembershipResponse.prototype.gid = void 0;
    TeamMembershipResponse.prototype.resource_type = void 0;
    TeamMembershipResponse.prototype.user = void 0;
    TeamMembershipResponse.prototype.team = void 0;
    TeamMembershipResponse.prototype.is_guest = void 0;
    TeamMembershipResponse.prototype.is_limited_access = void 0;
    TeamMembershipResponse.prototype.is_admin = void 0;
  }
});

// node_modules/asana/dist/model/TeamMembershipResponseArray.js
var require_TeamMembershipResponseArray = __commonJS({
  "node_modules/asana/dist/model/TeamMembershipResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamMembershipResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _TeamMembershipResponse = require_TeamMembershipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamMembershipResponseArray = /* @__PURE__ */ function() {
      function TeamMembershipResponseArray2(data) {
        _classCallCheck(this, TeamMembershipResponseArray2);
        this.data = data;
      }
      _createClass(TeamMembershipResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamMembershipResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_TeamMembershipResponse.TeamMembershipResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return TeamMembershipResponseArray2;
    }();
    exports.TeamMembershipResponseArray = TeamMembershipResponseArray;
    TeamMembershipResponseArray.prototype.data = void 0;
    TeamMembershipResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/TeamMembershipResponseData.js
var require_TeamMembershipResponseData = __commonJS({
  "node_modules/asana/dist/model/TeamMembershipResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamMembershipResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _TeamMembershipResponse = require_TeamMembershipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamMembershipResponseData = /* @__PURE__ */ function() {
      function TeamMembershipResponseData2(data) {
        _classCallCheck(this, TeamMembershipResponseData2);
        this.data = data;
      }
      _createClass(TeamMembershipResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamMembershipResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _TeamMembershipResponse.TeamMembershipResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TeamMembershipResponseData2;
    }();
    exports.TeamMembershipResponseData = TeamMembershipResponseData;
    TeamMembershipResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TeamRequest.js
var require_TeamRequest = __commonJS({
  "node_modules/asana/dist/model/TeamRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamRequest = /* @__PURE__ */ function() {
      function TeamRequest2() {
        _classCallCheck(this, TeamRequest2);
      }
      _createClass(TeamRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("html_description"))
              obj.html_description = _ApiClient.ApiClient.convertToType(data["html_description"], "String");
            if (data.hasOwnProperty("organization"))
              obj.organization = _ApiClient.ApiClient.convertToType(data["organization"], "String");
            if (data.hasOwnProperty("visibility"))
              obj.visibility = _ApiClient.ApiClient.convertToType(data["visibility"], "String");
            if (data.hasOwnProperty("edit_team_name_or_description_access_level"))
              obj.edit_team_name_or_description_access_level = _ApiClient.ApiClient.convertToType(data["edit_team_name_or_description_access_level"], "String");
            if (data.hasOwnProperty("edit_team_visibility_or_trash_team_access_level"))
              obj.edit_team_visibility_or_trash_team_access_level = _ApiClient.ApiClient.convertToType(data["edit_team_visibility_or_trash_team_access_level"], "String");
            if (data.hasOwnProperty("member_invite_management_access_level"))
              obj.member_invite_management_access_level = _ApiClient.ApiClient.convertToType(data["member_invite_management_access_level"], "String");
            if (data.hasOwnProperty("guest_invite_management_access_level"))
              obj.guest_invite_management_access_level = _ApiClient.ApiClient.convertToType(data["guest_invite_management_access_level"], "String");
            if (data.hasOwnProperty("join_request_management_access_level"))
              obj.join_request_management_access_level = _ApiClient.ApiClient.convertToType(data["join_request_management_access_level"], "String");
            if (data.hasOwnProperty("team_member_removal_access_level"))
              obj.team_member_removal_access_level = _ApiClient.ApiClient.convertToType(data["team_member_removal_access_level"], "String");
          }
          return obj;
        }
      }]);
      return TeamRequest2;
    }();
    exports.TeamRequest = TeamRequest;
    TeamRequest.prototype.gid = void 0;
    TeamRequest.prototype.resource_type = void 0;
    TeamRequest.prototype.name = void 0;
    TeamRequest.prototype.description = void 0;
    TeamRequest.prototype.html_description = void 0;
    TeamRequest.prototype.organization = void 0;
    TeamRequest.VisibilityEnum = {
      /**
       * value: "secret"
       * @const
       */
      secret: "secret",
      /**
       * value: "request_to_join"
       * @const
       */
      request_to_join: "request_to_join",
      /**
       * value: "public"
       * @const
       */
      _public: "public"
    };
    TeamRequest.prototype.visibility = void 0;
    TeamRequest.EditTeamNameOrDescriptionAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamRequest.prototype.edit_team_name_or_description_access_level = void 0;
    TeamRequest.EditTeamVisibilityOrTrashTeamAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamRequest.prototype.edit_team_visibility_or_trash_team_access_level = void 0;
    TeamRequest.MemberInviteManagementAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamRequest.prototype.member_invite_management_access_level = void 0;
    TeamRequest.GuestInviteManagementAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamRequest.prototype.guest_invite_management_access_level = void 0;
    TeamRequest.JoinRequestManagementAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamRequest.prototype.join_request_management_access_level = void 0;
    TeamRequest.TeamMemberRemovalAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamRequest.prototype.team_member_removal_access_level = void 0;
  }
});

// node_modules/asana/dist/model/TeamResponseOrganization.js
var require_TeamResponseOrganization = __commonJS({
  "node_modules/asana/dist/model/TeamResponseOrganization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamResponseOrganization = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamResponseOrganization = /* @__PURE__ */ function() {
      function TeamResponseOrganization2() {
        _classCallCheck(this, TeamResponseOrganization2);
      }
      _createClass(TeamResponseOrganization2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamResponseOrganization2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TeamResponseOrganization2;
    }();
    exports.TeamResponseOrganization = TeamResponseOrganization;
    TeamResponseOrganization.prototype.gid = void 0;
    TeamResponseOrganization.prototype.resource_type = void 0;
    TeamResponseOrganization.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TeamResponse.js
var require_TeamResponse = __commonJS({
  "node_modules/asana/dist/model/TeamResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _TeamResponseOrganization = require_TeamResponseOrganization();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamResponse = /* @__PURE__ */ function() {
      function TeamResponse2() {
        _classCallCheck(this, TeamResponse2);
      }
      _createClass(TeamResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("description"))
              obj.description = _ApiClient.ApiClient.convertToType(data["description"], "String");
            if (data.hasOwnProperty("html_description"))
              obj.html_description = _ApiClient.ApiClient.convertToType(data["html_description"], "String");
            if (data.hasOwnProperty("organization"))
              obj.organization = _TeamResponseOrganization.TeamResponseOrganization.constructFromObject(data["organization"]);
            if (data.hasOwnProperty("permalink_url"))
              obj.permalink_url = _ApiClient.ApiClient.convertToType(data["permalink_url"], "String");
            if (data.hasOwnProperty("visibility"))
              obj.visibility = _ApiClient.ApiClient.convertToType(data["visibility"], "String");
            if (data.hasOwnProperty("edit_team_name_or_description_access_level"))
              obj.edit_team_name_or_description_access_level = _ApiClient.ApiClient.convertToType(data["edit_team_name_or_description_access_level"], "String");
            if (data.hasOwnProperty("edit_team_visibility_or_trash_team_access_level"))
              obj.edit_team_visibility_or_trash_team_access_level = _ApiClient.ApiClient.convertToType(data["edit_team_visibility_or_trash_team_access_level"], "String");
            if (data.hasOwnProperty("member_invite_management_access_level"))
              obj.member_invite_management_access_level = _ApiClient.ApiClient.convertToType(data["member_invite_management_access_level"], "String");
            if (data.hasOwnProperty("guest_invite_management_access_level"))
              obj.guest_invite_management_access_level = _ApiClient.ApiClient.convertToType(data["guest_invite_management_access_level"], "String");
            if (data.hasOwnProperty("join_request_management_access_level"))
              obj.join_request_management_access_level = _ApiClient.ApiClient.convertToType(data["join_request_management_access_level"], "String");
            if (data.hasOwnProperty("team_member_removal_access_level"))
              obj.team_member_removal_access_level = _ApiClient.ApiClient.convertToType(data["team_member_removal_access_level"], "String");
          }
          return obj;
        }
      }]);
      return TeamResponse2;
    }();
    exports.TeamResponse = TeamResponse;
    TeamResponse.prototype.gid = void 0;
    TeamResponse.prototype.resource_type = void 0;
    TeamResponse.prototype.name = void 0;
    TeamResponse.prototype.description = void 0;
    TeamResponse.prototype.html_description = void 0;
    TeamResponse.prototype.organization = void 0;
    TeamResponse.prototype.permalink_url = void 0;
    TeamResponse.VisibilityEnum = {
      /**
       * value: "secret"
       * @const
       */
      secret: "secret",
      /**
       * value: "request_to_join"
       * @const
       */
      request_to_join: "request_to_join",
      /**
       * value: "public"
       * @const
       */
      _public: "public"
    };
    TeamResponse.prototype.visibility = void 0;
    TeamResponse.EditTeamNameOrDescriptionAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamResponse.prototype.edit_team_name_or_description_access_level = void 0;
    TeamResponse.EditTeamVisibilityOrTrashTeamAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamResponse.prototype.edit_team_visibility_or_trash_team_access_level = void 0;
    TeamResponse.MemberInviteManagementAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamResponse.prototype.member_invite_management_access_level = void 0;
    TeamResponse.GuestInviteManagementAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamResponse.prototype.guest_invite_management_access_level = void 0;
    TeamResponse.JoinRequestManagementAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamResponse.prototype.join_request_management_access_level = void 0;
    TeamResponse.TeamMemberRemovalAccessLevelEnum = {
      /**
       * value: "all_team_members"
       * @const
       */
      all_team_members: "all_team_members",
      /**
       * value: "only_team_admins"
       * @const
       */
      only_team_admins: "only_team_admins"
    };
    TeamResponse.prototype.team_member_removal_access_level = void 0;
  }
});

// node_modules/asana/dist/model/TeamResponseArray.js
var require_TeamResponseArray = __commonJS({
  "node_modules/asana/dist/model/TeamResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _TeamResponse = require_TeamResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamResponseArray = /* @__PURE__ */ function() {
      function TeamResponseArray2(data) {
        _classCallCheck(this, TeamResponseArray2);
        this.data = data;
      }
      _createClass(TeamResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_TeamResponse.TeamResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return TeamResponseArray2;
    }();
    exports.TeamResponseArray = TeamResponseArray;
    TeamResponseArray.prototype.data = void 0;
    TeamResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/TeamResponseData.js
var require_TeamResponseData = __commonJS({
  "node_modules/asana/dist/model/TeamResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _TeamResponse = require_TeamResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamResponseData = /* @__PURE__ */ function() {
      function TeamResponseData2(data) {
        _classCallCheck(this, TeamResponseData2);
        this.data = data;
      }
      _createClass(TeamResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _TeamResponse.TeamResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TeamResponseData2;
    }();
    exports.TeamResponseData = TeamResponseData;
    TeamResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TeamsBody.js
var require_TeamsBody = __commonJS({
  "node_modules/asana/dist/model/TeamsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TeamRequest = require_TeamRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamsBody = /* @__PURE__ */ function() {
      function TeamsBody2() {
        _classCallCheck(this, TeamsBody2);
      }
      _createClass(TeamsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TeamRequest.TeamRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TeamsBody2;
    }();
    exports.TeamsBody = TeamsBody;
    TeamsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TeamsTeamGidBody.js
var require_TeamsTeamGidBody = __commonJS({
  "node_modules/asana/dist/model/TeamsTeamGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamsTeamGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TeamRequest = require_TeamRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamsTeamGidBody = /* @__PURE__ */ function() {
      function TeamsTeamGidBody2() {
        _classCallCheck(this, TeamsTeamGidBody2);
      }
      _createClass(TeamsTeamGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TeamsTeamGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TeamRequest.TeamRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TeamsTeamGidBody2;
    }();
    exports.TeamsTeamGidBody = TeamsTeamGidBody;
    TeamsTeamGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TemplateRole.js
var require_TemplateRole = __commonJS({
  "node_modules/asana/dist/model/TemplateRole.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TemplateRole = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TemplateRole = /* @__PURE__ */ function() {
      function TemplateRole2() {
        _classCallCheck(this, TemplateRole2);
      }
      _createClass(TemplateRole2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TemplateRole2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return TemplateRole2;
    }();
    exports.TemplateRole = TemplateRole;
    TemplateRole.prototype.gid = void 0;
    TemplateRole.prototype.resource_type = void 0;
    TemplateRole.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/TimePeriodBase.js
var require_TimePeriodBase = __commonJS({
  "node_modules/asana/dist/model/TimePeriodBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimePeriodBase = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponseTimePeriod = require_GoalResponseTimePeriod();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimePeriodBase = /* @__PURE__ */ function() {
      function TimePeriodBase2() {
        _classCallCheck(this, TimePeriodBase2);
      }
      _createClass(TimePeriodBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimePeriodBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("end_on"))
              obj.end_on = _ApiClient.ApiClient.convertToType(data["end_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("period"))
              obj.period = _ApiClient.ApiClient.convertToType(data["period"], "String");
            if (data.hasOwnProperty("display_name"))
              obj.display_name = _ApiClient.ApiClient.convertToType(data["display_name"], "String");
            if (data.hasOwnProperty("parent"))
              obj.parent = _GoalResponseTimePeriod.GoalResponseTimePeriod.constructFromObject(data["parent"]);
          }
          return obj;
        }
      }]);
      return TimePeriodBase2;
    }();
    exports.TimePeriodBase = TimePeriodBase;
    TimePeriodBase.prototype.gid = void 0;
    TimePeriodBase.prototype.resource_type = void 0;
    TimePeriodBase.prototype.end_on = void 0;
    TimePeriodBase.prototype.start_on = void 0;
    TimePeriodBase.PeriodEnum = {
      /**
       * value: "FY"
       * @const
       */
      FY: "FY",
      /**
       * value: "H1"
       * @const
       */
      H1: "H1",
      /**
       * value: "H2"
       * @const
       */
      H2: "H2",
      /**
       * value: "Q1"
       * @const
       */
      Q1: "Q1",
      /**
       * value: "Q2"
       * @const
       */
      Q2: "Q2",
      /**
       * value: "Q3"
       * @const
       */
      Q3: "Q3",
      /**
       * value: "Q4"
       * @const
       */
      Q4: "Q4"
    };
    TimePeriodBase.prototype.period = void 0;
    TimePeriodBase.prototype.display_name = void 0;
    TimePeriodBase.prototype.parent = void 0;
  }
});

// node_modules/asana/dist/model/TimePeriodCompact.js
var require_TimePeriodCompact = __commonJS({
  "node_modules/asana/dist/model/TimePeriodCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimePeriodCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimePeriodCompact = /* @__PURE__ */ function() {
      function TimePeriodCompact2() {
        _classCallCheck(this, TimePeriodCompact2);
      }
      _createClass(TimePeriodCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimePeriodCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("end_on"))
              obj.end_on = _ApiClient.ApiClient.convertToType(data["end_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("period"))
              obj.period = _ApiClient.ApiClient.convertToType(data["period"], "String");
            if (data.hasOwnProperty("display_name"))
              obj.display_name = _ApiClient.ApiClient.convertToType(data["display_name"], "String");
          }
          return obj;
        }
      }]);
      return TimePeriodCompact2;
    }();
    exports.TimePeriodCompact = TimePeriodCompact;
    TimePeriodCompact.prototype.gid = void 0;
    TimePeriodCompact.prototype.resource_type = void 0;
    TimePeriodCompact.prototype.end_on = void 0;
    TimePeriodCompact.prototype.start_on = void 0;
    TimePeriodCompact.PeriodEnum = {
      /**
       * value: "FY"
       * @const
       */
      FY: "FY",
      /**
       * value: "H1"
       * @const
       */
      H1: "H1",
      /**
       * value: "H2"
       * @const
       */
      H2: "H2",
      /**
       * value: "Q1"
       * @const
       */
      Q1: "Q1",
      /**
       * value: "Q2"
       * @const
       */
      Q2: "Q2",
      /**
       * value: "Q3"
       * @const
       */
      Q3: "Q3",
      /**
       * value: "Q4"
       * @const
       */
      Q4: "Q4"
    };
    TimePeriodCompact.prototype.period = void 0;
    TimePeriodCompact.prototype.display_name = void 0;
  }
});

// node_modules/asana/dist/model/TimePeriodResponse.js
var require_TimePeriodResponse = __commonJS({
  "node_modules/asana/dist/model/TimePeriodResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimePeriodResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponseTimePeriod = require_GoalResponseTimePeriod();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimePeriodResponse = /* @__PURE__ */ function() {
      function TimePeriodResponse2() {
        _classCallCheck(this, TimePeriodResponse2);
      }
      _createClass(TimePeriodResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimePeriodResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("end_on"))
              obj.end_on = _ApiClient.ApiClient.convertToType(data["end_on"], "String");
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("period"))
              obj.period = _ApiClient.ApiClient.convertToType(data["period"], "String");
            if (data.hasOwnProperty("display_name"))
              obj.display_name = _ApiClient.ApiClient.convertToType(data["display_name"], "String");
            if (data.hasOwnProperty("parent"))
              obj.parent = _GoalResponseTimePeriod.GoalResponseTimePeriod.constructFromObject(data["parent"]);
          }
          return obj;
        }
      }]);
      return TimePeriodResponse2;
    }();
    exports.TimePeriodResponse = TimePeriodResponse;
    TimePeriodResponse.prototype.gid = void 0;
    TimePeriodResponse.prototype.resource_type = void 0;
    TimePeriodResponse.prototype.end_on = void 0;
    TimePeriodResponse.prototype.start_on = void 0;
    TimePeriodResponse.PeriodEnum = {
      /**
       * value: "FY"
       * @const
       */
      FY: "FY",
      /**
       * value: "H1"
       * @const
       */
      H1: "H1",
      /**
       * value: "H2"
       * @const
       */
      H2: "H2",
      /**
       * value: "Q1"
       * @const
       */
      Q1: "Q1",
      /**
       * value: "Q2"
       * @const
       */
      Q2: "Q2",
      /**
       * value: "Q3"
       * @const
       */
      Q3: "Q3",
      /**
       * value: "Q4"
       * @const
       */
      Q4: "Q4"
    };
    TimePeriodResponse.prototype.period = void 0;
    TimePeriodResponse.prototype.display_name = void 0;
    TimePeriodResponse.prototype.parent = void 0;
  }
});

// node_modules/asana/dist/model/TimePeriodResponseArray.js
var require_TimePeriodResponseArray = __commonJS({
  "node_modules/asana/dist/model/TimePeriodResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimePeriodResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _TimePeriodResponse = require_TimePeriodResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimePeriodResponseArray = /* @__PURE__ */ function() {
      function TimePeriodResponseArray2(data) {
        _classCallCheck(this, TimePeriodResponseArray2);
        this.data = data;
      }
      _createClass(TimePeriodResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimePeriodResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_TimePeriodResponse.TimePeriodResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return TimePeriodResponseArray2;
    }();
    exports.TimePeriodResponseArray = TimePeriodResponseArray;
    TimePeriodResponseArray.prototype.data = void 0;
    TimePeriodResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/TimePeriodResponseData.js
var require_TimePeriodResponseData = __commonJS({
  "node_modules/asana/dist/model/TimePeriodResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimePeriodResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _TimePeriodResponse = require_TimePeriodResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimePeriodResponseData = /* @__PURE__ */ function() {
      function TimePeriodResponseData2(data) {
        _classCallCheck(this, TimePeriodResponseData2);
        this.data = data;
      }
      _createClass(TimePeriodResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimePeriodResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _TimePeriodResponse.TimePeriodResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TimePeriodResponseData2;
    }();
    exports.TimePeriodResponseData = TimePeriodResponseData;
    TimePeriodResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/UpdateTimeTrackingEntryRequest.js
var require_UpdateTimeTrackingEntryRequest = __commonJS({
  "node_modules/asana/dist/model/UpdateTimeTrackingEntryRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UpdateTimeTrackingEntryRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UpdateTimeTrackingEntryRequest = /* @__PURE__ */ function() {
      function UpdateTimeTrackingEntryRequest2() {
        _classCallCheck(this, UpdateTimeTrackingEntryRequest2);
      }
      _createClass(UpdateTimeTrackingEntryRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UpdateTimeTrackingEntryRequest2();
            if (data.hasOwnProperty("duration_minutes"))
              obj.duration_minutes = _ApiClient.ApiClient.convertToType(data["duration_minutes"], "Number");
            if (data.hasOwnProperty("entered_on"))
              obj.entered_on = _ApiClient.ApiClient.convertToType(data["entered_on"], "Date");
          }
          return obj;
        }
      }]);
      return UpdateTimeTrackingEntryRequest2;
    }();
    exports.UpdateTimeTrackingEntryRequest = UpdateTimeTrackingEntryRequest;
    UpdateTimeTrackingEntryRequest.prototype.duration_minutes = void 0;
    UpdateTimeTrackingEntryRequest.prototype.entered_on = void 0;
  }
});

// node_modules/asana/dist/model/TimeTrackingEntriesTimeTrackingEntryGidBody.js
var require_TimeTrackingEntriesTimeTrackingEntryGidBody = __commonJS({
  "node_modules/asana/dist/model/TimeTrackingEntriesTimeTrackingEntryGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimeTrackingEntriesTimeTrackingEntryGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _UpdateTimeTrackingEntryRequest = require_UpdateTimeTrackingEntryRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimeTrackingEntriesTimeTrackingEntryGidBody = /* @__PURE__ */ function() {
      function TimeTrackingEntriesTimeTrackingEntryGidBody2() {
        _classCallCheck(this, TimeTrackingEntriesTimeTrackingEntryGidBody2);
      }
      _createClass(TimeTrackingEntriesTimeTrackingEntryGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimeTrackingEntriesTimeTrackingEntryGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _UpdateTimeTrackingEntryRequest.UpdateTimeTrackingEntryRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TimeTrackingEntriesTimeTrackingEntryGidBody2;
    }();
    exports.TimeTrackingEntriesTimeTrackingEntryGidBody = TimeTrackingEntriesTimeTrackingEntryGidBody;
    TimeTrackingEntriesTimeTrackingEntryGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TimeTrackingEntryBase.js
var require_TimeTrackingEntryBase = __commonJS({
  "node_modules/asana/dist/model/TimeTrackingEntryBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimeTrackingEntryBase = void 0;
    var _ApiClient = require_ApiClient();
    var _StoryResponseAssignee = require_StoryResponseAssignee();
    var _StoryResponseTask = require_StoryResponseTask();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimeTrackingEntryBase = /* @__PURE__ */ function() {
      function TimeTrackingEntryBase2() {
        _classCallCheck(this, TimeTrackingEntryBase2);
      }
      _createClass(TimeTrackingEntryBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimeTrackingEntryBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("duration_minutes"))
              obj.duration_minutes = _ApiClient.ApiClient.convertToType(data["duration_minutes"], "Number");
            if (data.hasOwnProperty("entered_on"))
              obj.entered_on = _ApiClient.ApiClient.convertToType(data["entered_on"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _StoryResponseAssignee.StoryResponseAssignee.constructFromObject(data["created_by"]);
            if (data.hasOwnProperty("task"))
              obj.task = _StoryResponseTask.StoryResponseTask.constructFromObject(data["task"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
          }
          return obj;
        }
      }]);
      return TimeTrackingEntryBase2;
    }();
    exports.TimeTrackingEntryBase = TimeTrackingEntryBase;
    TimeTrackingEntryBase.prototype.gid = void 0;
    TimeTrackingEntryBase.prototype.resource_type = void 0;
    TimeTrackingEntryBase.prototype.duration_minutes = void 0;
    TimeTrackingEntryBase.prototype.entered_on = void 0;
    TimeTrackingEntryBase.prototype.created_by = void 0;
    TimeTrackingEntryBase.prototype.task = void 0;
    TimeTrackingEntryBase.prototype.created_at = void 0;
  }
});

// node_modules/asana/dist/model/TimeTrackingEntryBaseData.js
var require_TimeTrackingEntryBaseData = __commonJS({
  "node_modules/asana/dist/model/TimeTrackingEntryBaseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimeTrackingEntryBaseData = void 0;
    var _ApiClient = require_ApiClient();
    var _TimeTrackingEntryBase = require_TimeTrackingEntryBase();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimeTrackingEntryBaseData = /* @__PURE__ */ function() {
      function TimeTrackingEntryBaseData2(data) {
        _classCallCheck(this, TimeTrackingEntryBaseData2);
        this.data = data;
      }
      _createClass(TimeTrackingEntryBaseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimeTrackingEntryBaseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _TimeTrackingEntryBase.TimeTrackingEntryBase.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return TimeTrackingEntryBaseData2;
    }();
    exports.TimeTrackingEntryBaseData = TimeTrackingEntryBaseData;
    TimeTrackingEntryBaseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/TimeTrackingEntryCompact.js
var require_TimeTrackingEntryCompact = __commonJS({
  "node_modules/asana/dist/model/TimeTrackingEntryCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimeTrackingEntryCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _StoryResponseAssignee = require_StoryResponseAssignee();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimeTrackingEntryCompact = /* @__PURE__ */ function() {
      function TimeTrackingEntryCompact2() {
        _classCallCheck(this, TimeTrackingEntryCompact2);
      }
      _createClass(TimeTrackingEntryCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimeTrackingEntryCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("duration_minutes"))
              obj.duration_minutes = _ApiClient.ApiClient.convertToType(data["duration_minutes"], "Number");
            if (data.hasOwnProperty("entered_on"))
              obj.entered_on = _ApiClient.ApiClient.convertToType(data["entered_on"], "Date");
            if (data.hasOwnProperty("created_by"))
              obj.created_by = _StoryResponseAssignee.StoryResponseAssignee.constructFromObject(data["created_by"]);
          }
          return obj;
        }
      }]);
      return TimeTrackingEntryCompact2;
    }();
    exports.TimeTrackingEntryCompact = TimeTrackingEntryCompact;
    TimeTrackingEntryCompact.prototype.gid = void 0;
    TimeTrackingEntryCompact.prototype.resource_type = void 0;
    TimeTrackingEntryCompact.prototype.duration_minutes = void 0;
    TimeTrackingEntryCompact.prototype.entered_on = void 0;
    TimeTrackingEntryCompact.prototype.created_by = void 0;
  }
});

// node_modules/asana/dist/model/TimeTrackingEntryCompactArray.js
var require_TimeTrackingEntryCompactArray = __commonJS({
  "node_modules/asana/dist/model/TimeTrackingEntryCompactArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimeTrackingEntryCompactArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _TimeTrackingEntryCompact = require_TimeTrackingEntryCompact();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimeTrackingEntryCompactArray = /* @__PURE__ */ function() {
      function TimeTrackingEntryCompactArray2(data) {
        _classCallCheck(this, TimeTrackingEntryCompactArray2);
        this.data = data;
      }
      _createClass(TimeTrackingEntryCompactArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimeTrackingEntryCompactArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_TimeTrackingEntryCompact.TimeTrackingEntryCompact]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return TimeTrackingEntryCompactArray2;
    }();
    exports.TimeTrackingEntryCompactArray = TimeTrackingEntryCompactArray;
    TimeTrackingEntryCompactArray.prototype.data = void 0;
    TimeTrackingEntryCompactArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/UserBase.js
var require_UserBase = __commonJS({
  "node_modules/asana/dist/model/UserBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserBase = /* @__PURE__ */ function() {
      function UserBase2() {
        _classCallCheck(this, UserBase2);
      }
      _createClass(UserBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return UserBase2;
    }();
    exports.UserBase = UserBase;
    UserBase.prototype.gid = void 0;
    UserBase.prototype.resource_type = void 0;
    UserBase.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/UserBaseResponsePhoto.js
var require_UserBaseResponsePhoto = __commonJS({
  "node_modules/asana/dist/model/UserBaseResponsePhoto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserBaseResponsePhoto = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserBaseResponsePhoto = /* @__PURE__ */ function() {
      function UserBaseResponsePhoto2() {
        _classCallCheck(this, UserBaseResponsePhoto2);
      }
      _createClass(UserBaseResponsePhoto2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserBaseResponsePhoto2();
            if (data.hasOwnProperty("image_21x21"))
              obj.image_21x21 = _ApiClient.ApiClient.convertToType(data["image_21x21"], "String");
            if (data.hasOwnProperty("image_27x27"))
              obj.image_27x27 = _ApiClient.ApiClient.convertToType(data["image_27x27"], "String");
            if (data.hasOwnProperty("image_36x36"))
              obj.image_36x36 = _ApiClient.ApiClient.convertToType(data["image_36x36"], "String");
            if (data.hasOwnProperty("image_60x60"))
              obj.image_60x60 = _ApiClient.ApiClient.convertToType(data["image_60x60"], "String");
            if (data.hasOwnProperty("image_128x128"))
              obj.image_128x128 = _ApiClient.ApiClient.convertToType(data["image_128x128"], "String");
            if (data.hasOwnProperty("image_1024x1024"))
              obj.image_1024x1024 = _ApiClient.ApiClient.convertToType(data["image_1024x1024"], "String");
          }
          return obj;
        }
      }]);
      return UserBaseResponsePhoto2;
    }();
    exports.UserBaseResponsePhoto = UserBaseResponsePhoto;
    UserBaseResponsePhoto.prototype.image_21x21 = void 0;
    UserBaseResponsePhoto.prototype.image_27x27 = void 0;
    UserBaseResponsePhoto.prototype.image_36x36 = void 0;
    UserBaseResponsePhoto.prototype.image_60x60 = void 0;
    UserBaseResponsePhoto.prototype.image_128x128 = void 0;
    UserBaseResponsePhoto.prototype.image_1024x1024 = void 0;
  }
});

// node_modules/asana/dist/model/UserBaseResponse.js
var require_UserBaseResponse = __commonJS({
  "node_modules/asana/dist/model/UserBaseResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserBaseResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _UserBaseResponsePhoto = require_UserBaseResponsePhoto();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserBaseResponse = /* @__PURE__ */ function() {
      function UserBaseResponse2() {
        _classCallCheck(this, UserBaseResponse2);
      }
      _createClass(UserBaseResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserBaseResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("email"))
              obj.email = _ApiClient.ApiClient.convertToType(data["email"], "String");
            if (data.hasOwnProperty("photo"))
              obj.photo = _UserBaseResponsePhoto.UserBaseResponsePhoto.constructFromObject(data["photo"]);
          }
          return obj;
        }
      }]);
      return UserBaseResponse2;
    }();
    exports.UserBaseResponse = UserBaseResponse;
    UserBaseResponse.prototype.gid = void 0;
    UserBaseResponse.prototype.resource_type = void 0;
    UserBaseResponse.prototype.name = void 0;
    UserBaseResponse.prototype.email = void 0;
    UserBaseResponse.prototype.photo = void 0;
  }
});

// node_modules/asana/dist/model/UserBaseResponseData.js
var require_UserBaseResponseData = __commonJS({
  "node_modules/asana/dist/model/UserBaseResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserBaseResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _UserBaseResponse = require_UserBaseResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserBaseResponseData = /* @__PURE__ */ function() {
      function UserBaseResponseData2(data) {
        _classCallCheck(this, UserBaseResponseData2);
        this.data = data;
      }
      _createClass(UserBaseResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserBaseResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _UserBaseResponse.UserBaseResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return UserBaseResponseData2;
    }();
    exports.UserBaseResponseData = UserBaseResponseData;
    UserBaseResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/UserCompact.js
var require_UserCompact = __commonJS({
  "node_modules/asana/dist/model/UserCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserCompact = /* @__PURE__ */ function() {
      function UserCompact2() {
        _classCallCheck(this, UserCompact2);
      }
      _createClass(UserCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return UserCompact2;
    }();
    exports.UserCompact = UserCompact;
    UserCompact.prototype.gid = void 0;
    UserCompact.prototype.resource_type = void 0;
    UserCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/UserRequest.js
var require_UserRequest = __commonJS({
  "node_modules/asana/dist/model/UserRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserRequest = /* @__PURE__ */ function() {
      function UserRequest2() {
        _classCallCheck(this, UserRequest2);
      }
      _createClass(UserRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return UserRequest2;
    }();
    exports.UserRequest = UserRequest;
    UserRequest.prototype.gid = void 0;
    UserRequest.prototype.resource_type = void 0;
    UserRequest.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/UserResponse.js
var require_UserResponse = __commonJS({
  "node_modules/asana/dist/model/UserResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    var _UserBaseResponsePhoto = require_UserBaseResponsePhoto();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserResponse = /* @__PURE__ */ function() {
      function UserResponse2() {
        _classCallCheck(this, UserResponse2);
      }
      _createClass(UserResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("email"))
              obj.email = _ApiClient.ApiClient.convertToType(data["email"], "String");
            if (data.hasOwnProperty("photo"))
              obj.photo = _UserBaseResponsePhoto.UserBaseResponsePhoto.constructFromObject(data["photo"]);
            if (data.hasOwnProperty("workspaces"))
              obj.workspaces = _ApiClient.ApiClient.convertToType(data["workspaces"], [_GoalResponseWorkspace.GoalResponseWorkspace]);
          }
          return obj;
        }
      }]);
      return UserResponse2;
    }();
    exports.UserResponse = UserResponse;
    UserResponse.prototype.gid = void 0;
    UserResponse.prototype.resource_type = void 0;
    UserResponse.prototype.name = void 0;
    UserResponse.prototype.email = void 0;
    UserResponse.prototype.photo = void 0;
    UserResponse.prototype.workspaces = void 0;
  }
});

// node_modules/asana/dist/model/UserResponseArray.js
var require_UserResponseArray = __commonJS({
  "node_modules/asana/dist/model/UserResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _UserResponse = require_UserResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserResponseArray = /* @__PURE__ */ function() {
      function UserResponseArray2(data) {
        _classCallCheck(this, UserResponseArray2);
        this.data = data;
      }
      _createClass(UserResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_UserResponse.UserResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return UserResponseArray2;
    }();
    exports.UserResponseArray = UserResponseArray;
    UserResponseArray.prototype.data = void 0;
    UserResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/UserResponseData.js
var require_UserResponseData = __commonJS({
  "node_modules/asana/dist/model/UserResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _UserResponse = require_UserResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserResponseData = /* @__PURE__ */ function() {
      function UserResponseData2(data) {
        _classCallCheck(this, UserResponseData2);
        this.data = data;
      }
      _createClass(UserResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _UserResponse.UserResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return UserResponseData2;
    }();
    exports.UserResponseData = UserResponseData;
    UserResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/UserTaskListBase.js
var require_UserTaskListBase = __commonJS({
  "node_modules/asana/dist/model/UserTaskListBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserTaskListBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserTaskListBase = /* @__PURE__ */ function() {
      function UserTaskListBase2() {
        _classCallCheck(this, UserTaskListBase2);
      }
      _createClass(UserTaskListBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserTaskListBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], Object);
          }
          return obj;
        }
      }]);
      return UserTaskListBase2;
    }();
    exports.UserTaskListBase = UserTaskListBase;
    UserTaskListBase.prototype.gid = void 0;
    UserTaskListBase.prototype.resource_type = void 0;
    UserTaskListBase.prototype.name = void 0;
    UserTaskListBase.prototype.owner = void 0;
    UserTaskListBase.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/UserTaskListCompact.js
var require_UserTaskListCompact = __commonJS({
  "node_modules/asana/dist/model/UserTaskListCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserTaskListCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserTaskListCompact = /* @__PURE__ */ function() {
      function UserTaskListCompact2() {
        _classCallCheck(this, UserTaskListCompact2);
      }
      _createClass(UserTaskListCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserTaskListCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], Object);
          }
          return obj;
        }
      }]);
      return UserTaskListCompact2;
    }();
    exports.UserTaskListCompact = UserTaskListCompact;
    UserTaskListCompact.prototype.gid = void 0;
    UserTaskListCompact.prototype.resource_type = void 0;
    UserTaskListCompact.prototype.name = void 0;
    UserTaskListCompact.prototype.owner = void 0;
    UserTaskListCompact.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/UserTaskListRequest.js
var require_UserTaskListRequest = __commonJS({
  "node_modules/asana/dist/model/UserTaskListRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserTaskListRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserTaskListRequest = /* @__PURE__ */ function() {
      function UserTaskListRequest2() {
        _classCallCheck(this, UserTaskListRequest2);
      }
      _createClass(UserTaskListRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserTaskListRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], Object);
          }
          return obj;
        }
      }]);
      return UserTaskListRequest2;
    }();
    exports.UserTaskListRequest = UserTaskListRequest;
    UserTaskListRequest.prototype.gid = void 0;
    UserTaskListRequest.prototype.resource_type = void 0;
    UserTaskListRequest.prototype.name = void 0;
    UserTaskListRequest.prototype.owner = void 0;
    UserTaskListRequest.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/UserTaskListResponse.js
var require_UserTaskListResponse = __commonJS({
  "node_modules/asana/dist/model/UserTaskListResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserTaskListResponse = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserTaskListResponse = /* @__PURE__ */ function() {
      function UserTaskListResponse2() {
        _classCallCheck(this, UserTaskListResponse2);
      }
      _createClass(UserTaskListResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserTaskListResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], Object);
          }
          return obj;
        }
      }]);
      return UserTaskListResponse2;
    }();
    exports.UserTaskListResponse = UserTaskListResponse;
    UserTaskListResponse.prototype.gid = void 0;
    UserTaskListResponse.prototype.resource_type = void 0;
    UserTaskListResponse.prototype.name = void 0;
    UserTaskListResponse.prototype.owner = void 0;
    UserTaskListResponse.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/UserTaskListResponseData.js
var require_UserTaskListResponseData = __commonJS({
  "node_modules/asana/dist/model/UserTaskListResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserTaskListResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _UserTaskListResponse = require_UserTaskListResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserTaskListResponseData = /* @__PURE__ */ function() {
      function UserTaskListResponseData2(data) {
        _classCallCheck(this, UserTaskListResponseData2);
        this.data = data;
      }
      _createClass(UserTaskListResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UserTaskListResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _UserTaskListResponse.UserTaskListResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return UserTaskListResponseData2;
    }();
    exports.UserTaskListResponseData = UserTaskListResponseData;
    UserTaskListResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WebhookCompactResource.js
var require_WebhookCompactResource = __commonJS({
  "node_modules/asana/dist/model/WebhookCompactResource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookCompactResource = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookCompactResource = /* @__PURE__ */ function() {
      function WebhookCompactResource2() {
        _classCallCheck(this, WebhookCompactResource2);
      }
      _createClass(WebhookCompactResource2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookCompactResource2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return WebhookCompactResource2;
    }();
    exports.WebhookCompactResource = WebhookCompactResource;
    WebhookCompactResource.prototype.gid = void 0;
    WebhookCompactResource.prototype.resource_type = void 0;
    WebhookCompactResource.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/WebhookCompact.js
var require_WebhookCompact = __commonJS({
  "node_modules/asana/dist/model/WebhookCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _WebhookCompactResource = require_WebhookCompactResource();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookCompact = /* @__PURE__ */ function() {
      function WebhookCompact2() {
        _classCallCheck(this, WebhookCompact2);
      }
      _createClass(WebhookCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("active"))
              obj.active = _ApiClient.ApiClient.convertToType(data["active"], "Boolean");
            if (data.hasOwnProperty("resource"))
              obj.resource = _WebhookCompactResource.WebhookCompactResource.constructFromObject(data["resource"]);
            if (data.hasOwnProperty("target"))
              obj.target = _ApiClient.ApiClient.convertToType(data["target"], "String");
          }
          return obj;
        }
      }]);
      return WebhookCompact2;
    }();
    exports.WebhookCompact = WebhookCompact;
    WebhookCompact.prototype.gid = void 0;
    WebhookCompact.prototype.resource_type = void 0;
    WebhookCompact.prototype.active = void 0;
    WebhookCompact.prototype.resource = void 0;
    WebhookCompact.prototype.target = void 0;
  }
});

// node_modules/asana/dist/model/WebhookFilter.js
var require_WebhookFilter = __commonJS({
  "node_modules/asana/dist/model/WebhookFilter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookFilter = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookFilter = /* @__PURE__ */ function() {
      function WebhookFilter2() {
        _classCallCheck(this, WebhookFilter2);
      }
      _createClass(WebhookFilter2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookFilter2();
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("action"))
              obj.action = _ApiClient.ApiClient.convertToType(data["action"], "String");
            if (data.hasOwnProperty("fields"))
              obj.fields = _ApiClient.ApiClient.convertToType(data["fields"], ["String"]);
          }
          return obj;
        }
      }]);
      return WebhookFilter2;
    }();
    exports.WebhookFilter = WebhookFilter;
    WebhookFilter.prototype.resource_type = void 0;
    WebhookFilter.prototype.resource_subtype = void 0;
    WebhookFilter.prototype.action = void 0;
    WebhookFilter.prototype.fields = void 0;
  }
});

// node_modules/asana/dist/model/WebhookRequestFilters.js
var require_WebhookRequestFilters = __commonJS({
  "node_modules/asana/dist/model/WebhookRequestFilters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookRequestFilters = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookRequestFilters = /* @__PURE__ */ function() {
      function WebhookRequestFilters2() {
        _classCallCheck(this, WebhookRequestFilters2);
      }
      _createClass(WebhookRequestFilters2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookRequestFilters2();
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("resource_subtype"))
              obj.resource_subtype = _ApiClient.ApiClient.convertToType(data["resource_subtype"], "String");
            if (data.hasOwnProperty("action"))
              obj.action = _ApiClient.ApiClient.convertToType(data["action"], "String");
            if (data.hasOwnProperty("fields"))
              obj.fields = _ApiClient.ApiClient.convertToType(data["fields"], ["String"]);
          }
          return obj;
        }
      }]);
      return WebhookRequestFilters2;
    }();
    exports.WebhookRequestFilters = WebhookRequestFilters;
    WebhookRequestFilters.prototype.resource_type = void 0;
    WebhookRequestFilters.prototype.resource_subtype = void 0;
    WebhookRequestFilters.prototype.action = void 0;
    WebhookRequestFilters.prototype.fields = void 0;
  }
});

// node_modules/asana/dist/model/WebhookRequest.js
var require_WebhookRequest = __commonJS({
  "node_modules/asana/dist/model/WebhookRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _WebhookRequestFilters = require_WebhookRequestFilters();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookRequest = /* @__PURE__ */ function() {
      function WebhookRequest2(resource, target) {
        _classCallCheck(this, WebhookRequest2);
        this.resource = resource;
        this.target = target;
      }
      _createClass(WebhookRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookRequest2();
            if (data.hasOwnProperty("resource"))
              obj.resource = _ApiClient.ApiClient.convertToType(data["resource"], "String");
            if (data.hasOwnProperty("target"))
              obj.target = _ApiClient.ApiClient.convertToType(data["target"], "String");
            if (data.hasOwnProperty("filters"))
              obj.filters = _ApiClient.ApiClient.convertToType(data["filters"], [_WebhookRequestFilters.WebhookRequestFilters]);
          }
          return obj;
        }
      }]);
      return WebhookRequest2;
    }();
    exports.WebhookRequest = WebhookRequest;
    WebhookRequest.prototype.resource = void 0;
    WebhookRequest.prototype.target = void 0;
    WebhookRequest.prototype.filters = void 0;
  }
});

// node_modules/asana/dist/model/WebhookResponse.js
var require_WebhookResponse = __commonJS({
  "node_modules/asana/dist/model/WebhookResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _WebhookCompactResource = require_WebhookCompactResource();
    var _WebhookRequestFilters = require_WebhookRequestFilters();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookResponse = /* @__PURE__ */ function() {
      function WebhookResponse2() {
        _classCallCheck(this, WebhookResponse2);
      }
      _createClass(WebhookResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("active"))
              obj.active = _ApiClient.ApiClient.convertToType(data["active"], "Boolean");
            if (data.hasOwnProperty("resource"))
              obj.resource = _WebhookCompactResource.WebhookCompactResource.constructFromObject(data["resource"]);
            if (data.hasOwnProperty("target"))
              obj.target = _ApiClient.ApiClient.convertToType(data["target"], "String");
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
            if (data.hasOwnProperty("last_failure_at"))
              obj.last_failure_at = _ApiClient.ApiClient.convertToType(data["last_failure_at"], "Date");
            if (data.hasOwnProperty("last_failure_content"))
              obj.last_failure_content = _ApiClient.ApiClient.convertToType(data["last_failure_content"], "String");
            if (data.hasOwnProperty("last_success_at"))
              obj.last_success_at = _ApiClient.ApiClient.convertToType(data["last_success_at"], "Date");
            if (data.hasOwnProperty("filters"))
              obj.filters = _ApiClient.ApiClient.convertToType(data["filters"], [_WebhookRequestFilters.WebhookRequestFilters]);
          }
          return obj;
        }
      }]);
      return WebhookResponse2;
    }();
    exports.WebhookResponse = WebhookResponse;
    WebhookResponse.prototype.gid = void 0;
    WebhookResponse.prototype.resource_type = void 0;
    WebhookResponse.prototype.active = void 0;
    WebhookResponse.prototype.resource = void 0;
    WebhookResponse.prototype.target = void 0;
    WebhookResponse.prototype.created_at = void 0;
    WebhookResponse.prototype.last_failure_at = void 0;
    WebhookResponse.prototype.last_failure_content = void 0;
    WebhookResponse.prototype.last_success_at = void 0;
    WebhookResponse.prototype.filters = void 0;
  }
});

// node_modules/asana/dist/model/WebhookResponseArray.js
var require_WebhookResponseArray = __commonJS({
  "node_modules/asana/dist/model/WebhookResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _WebhookResponse = require_WebhookResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookResponseArray = /* @__PURE__ */ function() {
      function WebhookResponseArray2(data) {
        _classCallCheck(this, WebhookResponseArray2);
        this.data = data;
      }
      _createClass(WebhookResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_WebhookResponse.WebhookResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return WebhookResponseArray2;
    }();
    exports.WebhookResponseArray = WebhookResponseArray;
    WebhookResponseArray.prototype.data = void 0;
    WebhookResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/WebhookResponseData.js
var require_WebhookResponseData = __commonJS({
  "node_modules/asana/dist/model/WebhookResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _WebhookResponse = require_WebhookResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookResponseData = /* @__PURE__ */ function() {
      function WebhookResponseData2(data) {
        _classCallCheck(this, WebhookResponseData2);
        this.data = data;
      }
      _createClass(WebhookResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _WebhookResponse.WebhookResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WebhookResponseData2;
    }();
    exports.WebhookResponseData = WebhookResponseData;
    WebhookResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WebhookUpdateRequest.js
var require_WebhookUpdateRequest = __commonJS({
  "node_modules/asana/dist/model/WebhookUpdateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhookUpdateRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _WebhookRequestFilters = require_WebhookRequestFilters();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhookUpdateRequest = /* @__PURE__ */ function() {
      function WebhookUpdateRequest2() {
        _classCallCheck(this, WebhookUpdateRequest2);
      }
      _createClass(WebhookUpdateRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhookUpdateRequest2();
            if (data.hasOwnProperty("filters"))
              obj.filters = _ApiClient.ApiClient.convertToType(data["filters"], [_WebhookRequestFilters.WebhookRequestFilters]);
          }
          return obj;
        }
      }]);
      return WebhookUpdateRequest2;
    }();
    exports.WebhookUpdateRequest = WebhookUpdateRequest;
    WebhookUpdateRequest.prototype.filters = void 0;
  }
});

// node_modules/asana/dist/model/WebhooksBody.js
var require_WebhooksBody = __commonJS({
  "node_modules/asana/dist/model/WebhooksBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhooksBody = void 0;
    var _ApiClient = require_ApiClient();
    var _WebhookRequest = require_WebhookRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhooksBody = /* @__PURE__ */ function() {
      function WebhooksBody2() {
        _classCallCheck(this, WebhooksBody2);
      }
      _createClass(WebhooksBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhooksBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _WebhookRequest.WebhookRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WebhooksBody2;
    }();
    exports.WebhooksBody = WebhooksBody;
    WebhooksBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WebhooksWebhookGidBody.js
var require_WebhooksWebhookGidBody = __commonJS({
  "node_modules/asana/dist/model/WebhooksWebhookGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhooksWebhookGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _WebhookUpdateRequest = require_WebhookUpdateRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhooksWebhookGidBody = /* @__PURE__ */ function() {
      function WebhooksWebhookGidBody2() {
        _classCallCheck(this, WebhooksWebhookGidBody2);
      }
      _createClass(WebhooksWebhookGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WebhooksWebhookGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _WebhookUpdateRequest.WebhookUpdateRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WebhooksWebhookGidBody2;
    }();
    exports.WebhooksWebhookGidBody = WebhooksWebhookGidBody;
    WebhooksWebhookGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceAddUserRequest.js
var require_WorkspaceAddUserRequest = __commonJS({
  "node_modules/asana/dist/model/WorkspaceAddUserRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceAddUserRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceAddUserRequest = /* @__PURE__ */ function() {
      function WorkspaceAddUserRequest2() {
        _classCallCheck(this, WorkspaceAddUserRequest2);
      }
      _createClass(WorkspaceAddUserRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceAddUserRequest2();
            if (data.hasOwnProperty("user"))
              obj.user = _ApiClient.ApiClient.convertToType(data["user"], "String");
          }
          return obj;
        }
      }]);
      return WorkspaceAddUserRequest2;
    }();
    exports.WorkspaceAddUserRequest = WorkspaceAddUserRequest;
    WorkspaceAddUserRequest.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceBase.js
var require_WorkspaceBase = __commonJS({
  "node_modules/asana/dist/model/WorkspaceBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceBase = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceBase = /* @__PURE__ */ function() {
      function WorkspaceBase2() {
        _classCallCheck(this, WorkspaceBase2);
      }
      _createClass(WorkspaceBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return WorkspaceBase2;
    }();
    exports.WorkspaceBase = WorkspaceBase;
    WorkspaceBase.prototype.gid = void 0;
    WorkspaceBase.prototype.resource_type = void 0;
    WorkspaceBase.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceCompact.js
var require_WorkspaceCompact = __commonJS({
  "node_modules/asana/dist/model/WorkspaceCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceCompact = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceCompact = /* @__PURE__ */ function() {
      function WorkspaceCompact2() {
        _classCallCheck(this, WorkspaceCompact2);
      }
      _createClass(WorkspaceCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return WorkspaceCompact2;
    }();
    exports.WorkspaceCompact = WorkspaceCompact;
    WorkspaceCompact.prototype.gid = void 0;
    WorkspaceCompact.prototype.resource_type = void 0;
    WorkspaceCompact.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceGidAddUserBody.js
var require_WorkspaceGidAddUserBody = __commonJS({
  "node_modules/asana/dist/model/WorkspaceGidAddUserBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceGidAddUserBody = void 0;
    var _ApiClient = require_ApiClient();
    var _WorkspaceAddUserRequest = require_WorkspaceAddUserRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceGidAddUserBody = /* @__PURE__ */ function() {
      function WorkspaceGidAddUserBody2() {
        _classCallCheck(this, WorkspaceGidAddUserBody2);
      }
      _createClass(WorkspaceGidAddUserBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceGidAddUserBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _WorkspaceAddUserRequest.WorkspaceAddUserRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WorkspaceGidAddUserBody2;
    }();
    exports.WorkspaceGidAddUserBody = WorkspaceGidAddUserBody;
    WorkspaceGidAddUserBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceGidProjectsBody.js
var require_WorkspaceGidProjectsBody = __commonJS({
  "node_modules/asana/dist/model/WorkspaceGidProjectsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceGidProjectsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _ProjectRequest = require_ProjectRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceGidProjectsBody = /* @__PURE__ */ function() {
      function WorkspaceGidProjectsBody2() {
        _classCallCheck(this, WorkspaceGidProjectsBody2);
      }
      _createClass(WorkspaceGidProjectsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceGidProjectsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _ProjectRequest.ProjectRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WorkspaceGidProjectsBody2;
    }();
    exports.WorkspaceGidProjectsBody = WorkspaceGidProjectsBody;
    WorkspaceGidProjectsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceRemoveUserRequest.js
var require_WorkspaceRemoveUserRequest = __commonJS({
  "node_modules/asana/dist/model/WorkspaceRemoveUserRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceRemoveUserRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceRemoveUserRequest = /* @__PURE__ */ function() {
      function WorkspaceRemoveUserRequest2() {
        _classCallCheck(this, WorkspaceRemoveUserRequest2);
      }
      _createClass(WorkspaceRemoveUserRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceRemoveUserRequest2();
            if (data.hasOwnProperty("user"))
              obj.user = _ApiClient.ApiClient.convertToType(data["user"], "String");
          }
          return obj;
        }
      }]);
      return WorkspaceRemoveUserRequest2;
    }();
    exports.WorkspaceRemoveUserRequest = WorkspaceRemoveUserRequest;
    WorkspaceRemoveUserRequest.prototype.user = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceGidRemoveUserBody.js
var require_WorkspaceGidRemoveUserBody = __commonJS({
  "node_modules/asana/dist/model/WorkspaceGidRemoveUserBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceGidRemoveUserBody = void 0;
    var _ApiClient = require_ApiClient();
    var _WorkspaceRemoveUserRequest = require_WorkspaceRemoveUserRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceGidRemoveUserBody = /* @__PURE__ */ function() {
      function WorkspaceGidRemoveUserBody2() {
        _classCallCheck(this, WorkspaceGidRemoveUserBody2);
      }
      _createClass(WorkspaceGidRemoveUserBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceGidRemoveUserBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _WorkspaceRemoveUserRequest.WorkspaceRemoveUserRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WorkspaceGidRemoveUserBody2;
    }();
    exports.WorkspaceGidRemoveUserBody = WorkspaceGidRemoveUserBody;
    WorkspaceGidRemoveUserBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceGidTagsBody.js
var require_WorkspaceGidTagsBody = __commonJS({
  "node_modules/asana/dist/model/WorkspaceGidTagsBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceGidTagsBody = void 0;
    var _ApiClient = require_ApiClient();
    var _TagResponse = require_TagResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceGidTagsBody = /* @__PURE__ */ function() {
      function WorkspaceGidTagsBody2() {
        _classCallCheck(this, WorkspaceGidTagsBody2);
      }
      _createClass(WorkspaceGidTagsBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceGidTagsBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _TagResponse.TagResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WorkspaceGidTagsBody2;
    }();
    exports.WorkspaceGidTagsBody = WorkspaceGidTagsBody;
    WorkspaceGidTagsBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipBase.js
var require_WorkspaceMembershipBase = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipBase = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipBase = /* @__PURE__ */ function() {
      function WorkspaceMembershipBase2() {
        _classCallCheck(this, WorkspaceMembershipBase2);
      }
      _createClass(WorkspaceMembershipBase2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipBase2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["workspace"]);
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipBase2;
    }();
    exports.WorkspaceMembershipBase = WorkspaceMembershipBase;
    WorkspaceMembershipBase.prototype.gid = void 0;
    WorkspaceMembershipBase.prototype.resource_type = void 0;
    WorkspaceMembershipBase.prototype.user = void 0;
    WorkspaceMembershipBase.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipCompact.js
var require_WorkspaceMembershipCompact = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipCompact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipCompact = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipCompact = /* @__PURE__ */ function() {
      function WorkspaceMembershipCompact2() {
        _classCallCheck(this, WorkspaceMembershipCompact2);
      }
      _createClass(WorkspaceMembershipCompact2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipCompact2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["workspace"]);
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipCompact2;
    }();
    exports.WorkspaceMembershipCompact = WorkspaceMembershipCompact;
    WorkspaceMembershipCompact.prototype.gid = void 0;
    WorkspaceMembershipCompact.prototype.resource_type = void 0;
    WorkspaceMembershipCompact.prototype.user = void 0;
    WorkspaceMembershipCompact.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipRequest.js
var require_WorkspaceMembershipRequest = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipRequest = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipRequest = /* @__PURE__ */ function() {
      function WorkspaceMembershipRequest2() {
        _classCallCheck(this, WorkspaceMembershipRequest2);
      }
      _createClass(WorkspaceMembershipRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["workspace"]);
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipRequest2;
    }();
    exports.WorkspaceMembershipRequest = WorkspaceMembershipRequest;
    WorkspaceMembershipRequest.prototype.gid = void 0;
    WorkspaceMembershipRequest.prototype.resource_type = void 0;
    WorkspaceMembershipRequest.prototype.user = void 0;
    WorkspaceMembershipRequest.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipResponseUserTaskList.js
var require_WorkspaceMembershipResponseUserTaskList = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipResponseUserTaskList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipResponseUserTaskList = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipResponseUserTaskList = /* @__PURE__ */ function() {
      function WorkspaceMembershipResponseUserTaskList2() {
        _classCallCheck(this, WorkspaceMembershipResponseUserTaskList2);
      }
      _createClass(WorkspaceMembershipResponseUserTaskList2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipResponseUserTaskList2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("owner"))
              obj.owner = _ApiClient.ApiClient.convertToType(data["owner"], Object);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _ApiClient.ApiClient.convertToType(data["workspace"], Object);
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipResponseUserTaskList2;
    }();
    exports.WorkspaceMembershipResponseUserTaskList = WorkspaceMembershipResponseUserTaskList;
    WorkspaceMembershipResponseUserTaskList.prototype.gid = void 0;
    WorkspaceMembershipResponseUserTaskList.prototype.resource_type = void 0;
    WorkspaceMembershipResponseUserTaskList.prototype.name = void 0;
    WorkspaceMembershipResponseUserTaskList.prototype.owner = void 0;
    WorkspaceMembershipResponseUserTaskList.prototype.workspace = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipResponseVacationDates.js
var require_WorkspaceMembershipResponseVacationDates = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipResponseVacationDates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipResponseVacationDates = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipResponseVacationDates = /* @__PURE__ */ function() {
      function WorkspaceMembershipResponseVacationDates2() {
        _classCallCheck(this, WorkspaceMembershipResponseVacationDates2);
      }
      _createClass(WorkspaceMembershipResponseVacationDates2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipResponseVacationDates2();
            if (data.hasOwnProperty("start_on"))
              obj.start_on = _ApiClient.ApiClient.convertToType(data["start_on"], "String");
            if (data.hasOwnProperty("end_on"))
              obj.end_on = _ApiClient.ApiClient.convertToType(data["end_on"], "String");
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipResponseVacationDates2;
    }();
    exports.WorkspaceMembershipResponseVacationDates = WorkspaceMembershipResponseVacationDates;
    WorkspaceMembershipResponseVacationDates.prototype.start_on = void 0;
    WorkspaceMembershipResponseVacationDates.prototype.end_on = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipResponse.js
var require_WorkspaceMembershipResponse = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipResponse = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    var _WorkspaceMembershipResponseUserTaskList = require_WorkspaceMembershipResponseUserTaskList();
    var _WorkspaceMembershipResponseVacationDates = require_WorkspaceMembershipResponseVacationDates();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipResponse = /* @__PURE__ */ function() {
      function WorkspaceMembershipResponse2() {
        _classCallCheck(this, WorkspaceMembershipResponse2);
      }
      _createClass(WorkspaceMembershipResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("user"))
              obj.user = _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue.constructFromObject(data["user"]);
            if (data.hasOwnProperty("workspace"))
              obj.workspace = _GoalResponseWorkspace.GoalResponseWorkspace.constructFromObject(data["workspace"]);
            if (data.hasOwnProperty("user_task_list"))
              obj.user_task_list = _WorkspaceMembershipResponseUserTaskList.WorkspaceMembershipResponseUserTaskList.constructFromObject(data["user_task_list"]);
            if (data.hasOwnProperty("is_active"))
              obj.is_active = _ApiClient.ApiClient.convertToType(data["is_active"], "Boolean");
            if (data.hasOwnProperty("is_admin"))
              obj.is_admin = _ApiClient.ApiClient.convertToType(data["is_admin"], "Boolean");
            if (data.hasOwnProperty("is_guest"))
              obj.is_guest = _ApiClient.ApiClient.convertToType(data["is_guest"], "Boolean");
            if (data.hasOwnProperty("vacation_dates"))
              obj.vacation_dates = _WorkspaceMembershipResponseVacationDates.WorkspaceMembershipResponseVacationDates.constructFromObject(data["vacation_dates"]);
            if (data.hasOwnProperty("created_at"))
              obj.created_at = _ApiClient.ApiClient.convertToType(data["created_at"], "Date");
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipResponse2;
    }();
    exports.WorkspaceMembershipResponse = WorkspaceMembershipResponse;
    WorkspaceMembershipResponse.prototype.gid = void 0;
    WorkspaceMembershipResponse.prototype.resource_type = void 0;
    WorkspaceMembershipResponse.prototype.user = void 0;
    WorkspaceMembershipResponse.prototype.workspace = void 0;
    WorkspaceMembershipResponse.prototype.user_task_list = void 0;
    WorkspaceMembershipResponse.prototype.is_active = void 0;
    WorkspaceMembershipResponse.prototype.is_admin = void 0;
    WorkspaceMembershipResponse.prototype.is_guest = void 0;
    WorkspaceMembershipResponse.prototype.vacation_dates = void 0;
    WorkspaceMembershipResponse.prototype.created_at = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipResponseArray.js
var require_WorkspaceMembershipResponseArray = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _WorkspaceMembershipResponse = require_WorkspaceMembershipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipResponseArray = /* @__PURE__ */ function() {
      function WorkspaceMembershipResponseArray2(data) {
        _classCallCheck(this, WorkspaceMembershipResponseArray2);
        this.data = data;
      }
      _createClass(WorkspaceMembershipResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_WorkspaceMembershipResponse.WorkspaceMembershipResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipResponseArray2;
    }();
    exports.WorkspaceMembershipResponseArray = WorkspaceMembershipResponseArray;
    WorkspaceMembershipResponseArray.prototype.data = void 0;
    WorkspaceMembershipResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceMembershipResponseData.js
var require_WorkspaceMembershipResponseData = __commonJS({
  "node_modules/asana/dist/model/WorkspaceMembershipResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _WorkspaceMembershipResponse = require_WorkspaceMembershipResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipResponseData = /* @__PURE__ */ function() {
      function WorkspaceMembershipResponseData2(data) {
        _classCallCheck(this, WorkspaceMembershipResponseData2);
        this.data = data;
      }
      _createClass(WorkspaceMembershipResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceMembershipResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _WorkspaceMembershipResponse.WorkspaceMembershipResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WorkspaceMembershipResponseData2;
    }();
    exports.WorkspaceMembershipResponseData = WorkspaceMembershipResponseData;
    WorkspaceMembershipResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceRequest.js
var require_WorkspaceRequest = __commonJS({
  "node_modules/asana/dist/model/WorkspaceRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceRequest = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceRequest = /* @__PURE__ */ function() {
      function WorkspaceRequest2() {
        _classCallCheck(this, WorkspaceRequest2);
      }
      _createClass(WorkspaceRequest2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceRequest2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
          }
          return obj;
        }
      }]);
      return WorkspaceRequest2;
    }();
    exports.WorkspaceRequest = WorkspaceRequest;
    WorkspaceRequest.prototype.gid = void 0;
    WorkspaceRequest.prototype.resource_type = void 0;
    WorkspaceRequest.prototype.name = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceResponse.js
var require_WorkspaceResponse = __commonJS({
  "node_modules/asana/dist/model/WorkspaceResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceResponse = void 0;
    var _ApiClient = require_ApiClient();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceResponse = /* @__PURE__ */ function() {
      function WorkspaceResponse2() {
        _classCallCheck(this, WorkspaceResponse2);
      }
      _createClass(WorkspaceResponse2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceResponse2();
            if (data.hasOwnProperty("gid"))
              obj.gid = _ApiClient.ApiClient.convertToType(data["gid"], "String");
            if (data.hasOwnProperty("resource_type"))
              obj.resource_type = _ApiClient.ApiClient.convertToType(data["resource_type"], "String");
            if (data.hasOwnProperty("name"))
              obj.name = _ApiClient.ApiClient.convertToType(data["name"], "String");
            if (data.hasOwnProperty("email_domains"))
              obj.email_domains = _ApiClient.ApiClient.convertToType(data["email_domains"], ["String"]);
            if (data.hasOwnProperty("is_organization"))
              obj.is_organization = _ApiClient.ApiClient.convertToType(data["is_organization"], "Boolean");
          }
          return obj;
        }
      }]);
      return WorkspaceResponse2;
    }();
    exports.WorkspaceResponse = WorkspaceResponse;
    WorkspaceResponse.prototype.gid = void 0;
    WorkspaceResponse.prototype.resource_type = void 0;
    WorkspaceResponse.prototype.name = void 0;
    WorkspaceResponse.prototype.email_domains = void 0;
    WorkspaceResponse.prototype.is_organization = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceResponseArray.js
var require_WorkspaceResponseArray = __commonJS({
  "node_modules/asana/dist/model/WorkspaceResponseArray.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceResponseArray = void 0;
    var _ApiClient = require_ApiClient();
    var _NextPage = require_NextPage();
    var _WorkspaceResponse = require_WorkspaceResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceResponseArray = /* @__PURE__ */ function() {
      function WorkspaceResponseArray2(data) {
        _classCallCheck(this, WorkspaceResponseArray2);
        this.data = data;
      }
      _createClass(WorkspaceResponseArray2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceResponseArray2();
            if (data.hasOwnProperty("data"))
              obj.data = _ApiClient.ApiClient.convertToType(data["data"], [_WorkspaceResponse.WorkspaceResponse]);
            if (data.hasOwnProperty("next_page"))
              obj.next_page = _NextPage.NextPage.constructFromObject(data["next_page"]);
          }
          return obj;
        }
      }]);
      return WorkspaceResponseArray2;
    }();
    exports.WorkspaceResponseArray = WorkspaceResponseArray;
    WorkspaceResponseArray.prototype.data = void 0;
    WorkspaceResponseArray.prototype.next_page = void 0;
  }
});

// node_modules/asana/dist/model/WorkspaceResponseData.js
var require_WorkspaceResponseData = __commonJS({
  "node_modules/asana/dist/model/WorkspaceResponseData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceResponseData = void 0;
    var _ApiClient = require_ApiClient();
    var _WorkspaceResponse = require_WorkspaceResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceResponseData = /* @__PURE__ */ function() {
      function WorkspaceResponseData2(data) {
        _classCallCheck(this, WorkspaceResponseData2);
        this.data = data;
      }
      _createClass(WorkspaceResponseData2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspaceResponseData2();
            if (data.hasOwnProperty("data"))
              obj.data = _WorkspaceResponse.WorkspaceResponse.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WorkspaceResponseData2;
    }();
    exports.WorkspaceResponseData = WorkspaceResponseData;
    WorkspaceResponseData.prototype.data = void 0;
  }
});

// node_modules/asana/dist/model/WorkspacesWorkspaceGidBody.js
var require_WorkspacesWorkspaceGidBody = __commonJS({
  "node_modules/asana/dist/model/WorkspacesWorkspaceGidBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspacesWorkspaceGidBody = void 0;
    var _ApiClient = require_ApiClient();
    var _WorkspaceRequest = require_WorkspaceRequest();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspacesWorkspaceGidBody = /* @__PURE__ */ function() {
      function WorkspacesWorkspaceGidBody2() {
        _classCallCheck(this, WorkspacesWorkspaceGidBody2);
      }
      _createClass(WorkspacesWorkspaceGidBody2, null, [{
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WorkspacesWorkspaceGidBody2();
            if (data.hasOwnProperty("data"))
              obj.data = _WorkspaceRequest.WorkspaceRequest.constructFromObject(data["data"]);
          }
          return obj;
        }
      }]);
      return WorkspacesWorkspaceGidBody2;
    }();
    exports.WorkspacesWorkspaceGidBody = WorkspacesWorkspaceGidBody;
    WorkspacesWorkspaceGidBody.prototype.data = void 0;
  }
});

// node_modules/asana/dist/api/AttachmentsApi.js
var require_AttachmentsApi = __commonJS({
  "node_modules/asana/dist/api/AttachmentsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AttachmentsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _AttachmentResponseArray = require_AttachmentResponseArray();
    var _AttachmentResponseData = require_AttachmentResponseData();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AttachmentsApi = /* @__PURE__ */ function() {
      function AttachmentsApi2(apiClient) {
        _classCallCheck(this, AttachmentsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(AttachmentsApi2, [{
        key: "createAttachmentForObject",
        value: function createAttachmentForObject(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {
            "resource_subtype": opts["resource_subtype"],
            "file": opts["file"],
            "parent": opts["parent"],
            "url": opts["url"],
            "name": opts["name"],
            "connect_to_app": opts["connect_to_app"]
          };
          var authNames = ["oauth2"];
          var contentTypes = ["multipart/form-data"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _AttachmentResponseData.AttachmentResponseData;
          return this.apiClient.callApi("/attachments", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteAttachment operation.
         * @callback moduleapi/AttachmentsApi~deleteAttachmentCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete an attachment
         * Deletes a specific, existing attachment.  Returns an empty data record.
         * @param {String} attachment_gid Globally unique identifier for the attachment.
         * @param {module:api/AttachmentsApi~deleteAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteAttachment",
        value: function deleteAttachment(attachment_gid, callback) {
          var postBody = null;
          if (attachment_gid === void 0 || attachment_gid === null) {
            throw new Error("Missing the required parameter 'attachment_gid' when calling deleteAttachment");
          }
          var pathParams = {
            "attachment_gid": attachment_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/attachments/{attachment_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getAttachment operation.
         * @callback moduleapi/AttachmentsApi~getAttachmentCallback
         * @param {String} error Error message, if any.
         * @param {module:model/AttachmentResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get an attachment
         * Get the full record for a single attachment.
         * @param {String} attachment_gid Globally unique identifier for the attachment.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/AttachmentsApi~getAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getAttachment",
        value: function getAttachment(attachment_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (attachment_gid === void 0 || attachment_gid === null) {
            throw new Error("Missing the required parameter 'attachment_gid' when calling getAttachment");
          }
          var pathParams = {
            "attachment_gid": attachment_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _AttachmentResponseData.AttachmentResponseData;
          return this.apiClient.callApi("/attachments/{attachment_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getAttachmentsForObject operation.
         * @callback moduleapi/AttachmentsApi~getAttachmentsForObjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/AttachmentResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get attachments from an object
         * Returns the compact records for all attachments on the object.  There are three possible &#x60;parent&#x60; values for this request: &#x60;project&#x60;, &#x60;project_brief&#x60;, and &#x60;task&#x60;. For a project, an attachment refers to a file uploaded to the \&quot;Key resources\&quot; section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.  Note that within the Asana app, inline images in the task description do not appear in the index of image thumbnails nor as stories in the task. However, requests made to &#x60;GET /attachments&#x60; for a task will return all of the images in the task, including inline images.
         * @param {String} parent Globally unique identifier for object to fetch statuses from. Must be a GID for a &#x60;project&#x60;, &#x60;project_brief&#x60;, or &#x60;task&#x60;.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/AttachmentsApi~getAttachmentsForObjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getAttachmentsForObject",
        value: function getAttachmentsForObject(parent, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (parent === void 0 || parent === null) {
            throw new Error("Missing the required parameter 'parent' when calling getAttachmentsForObject");
          }
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "parent": parent,
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _AttachmentResponseArray.AttachmentResponseArray;
          return this.apiClient.callApi("/attachments", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return AttachmentsApi2;
    }();
    exports.AttachmentsApi = AttachmentsApi;
  }
});

// node_modules/asana/dist/api/AuditLogAPIApi.js
var require_AuditLogAPIApi = __commonJS({
  "node_modules/asana/dist/api/AuditLogAPIApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AuditLogAPIApi = void 0;
    var _ApiClient = require_ApiClient();
    var _AuditLogEventArray = require_AuditLogEventArray();
    var _ErrorResponse = require_ErrorResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var AuditLogAPIApi = /* @__PURE__ */ function() {
      function AuditLogAPIApi2(apiClient) {
        _classCallCheck(this, AuditLogAPIApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(AuditLogAPIApi2, [{
        key: "getAuditLogEvents",
        value: function getAuditLogEvents(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getAuditLogEvents");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "start_at": opts["start_at"],
            "end_at": opts["end_at"],
            "event_type": opts["event_type"],
            "actor_type": opts["actor_type"],
            "actor_gid": opts["actor_gid"],
            "resource_gid": opts["resource_gid"],
            "limit": opts["limit"],
            "offset": opts["offset"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _AuditLogEventArray.AuditLogEventArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/audit_log_events", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return AuditLogAPIApi2;
    }();
    exports.AuditLogAPIApi = AuditLogAPIApi;
  }
});

// node_modules/asana/dist/api/BatchAPIApi.js
var require_BatchAPIApi = __commonJS({
  "node_modules/asana/dist/api/BatchAPIApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BatchAPIApi = void 0;
    var _ApiClient = require_ApiClient();
    var _BatchBody = require_BatchBody();
    var _BatchResponseArray = require_BatchResponseArray();
    var _ErrorResponse = require_ErrorResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var BatchAPIApi = /* @__PURE__ */ function() {
      function BatchAPIApi2(apiClient) {
        _classCallCheck(this, BatchAPIApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(BatchAPIApi2, [{
        key: "createBatchRequest",
        value: function createBatchRequest(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createBatchRequest");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _BatchResponseArray.BatchResponseArray;
          return this.apiClient.callApi("/batch", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return BatchAPIApi2;
    }();
    exports.BatchAPIApi = BatchAPIApi;
  }
});

// node_modules/asana/dist/api/CustomFieldSettingsApi.js
var require_CustomFieldSettingsApi = __commonJS({
  "node_modules/asana/dist/api/CustomFieldSettingsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldSettingsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldSettingResponseArray = require_CustomFieldSettingResponseArray();
    var _ErrorResponse = require_ErrorResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldSettingsApi = /* @__PURE__ */ function() {
      function CustomFieldSettingsApi2(apiClient) {
        _classCallCheck(this, CustomFieldSettingsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(CustomFieldSettingsApi2, [{
        key: "getCustomFieldSettingsForPortfolio",
        value: function getCustomFieldSettingsForPortfolio(portfolio_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling getCustomFieldSettingsForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldSettingResponseArray.CustomFieldSettingResponseArray;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/custom_field_settings", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getCustomFieldSettingsForProject operation.
         * @callback moduleapi/CustomFieldSettingsApi~getCustomFieldSettingsForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/CustomFieldSettingResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a project&#x27;s custom fields
         * Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, &#x60;opt_fields&#x60; can be used to include more data than is returned in the compact representation. See the [documentation for input/output options](https://developers.asana.com/docs/inputoutput-options) for more information.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/CustomFieldSettingsApi~getCustomFieldSettingsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getCustomFieldSettingsForProject",
        value: function getCustomFieldSettingsForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling getCustomFieldSettingsForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldSettingResponseArray.CustomFieldSettingResponseArray;
          return this.apiClient.callApi("/projects/{project_gid}/custom_field_settings", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return CustomFieldSettingsApi2;
    }();
    exports.CustomFieldSettingsApi = CustomFieldSettingsApi;
  }
});

// node_modules/asana/dist/api/CustomFieldsApi.js
var require_CustomFieldsApi = __commonJS({
  "node_modules/asana/dist/api/CustomFieldsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomFieldsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldGidEnumOptionsBody = require_CustomFieldGidEnumOptionsBody();
    var _CustomFieldResponseArray = require_CustomFieldResponseArray();
    var _CustomFieldResponseData = require_CustomFieldResponseData();
    var _CustomFieldsBody = require_CustomFieldsBody();
    var _CustomFieldsCustomFieldGidBody = require_CustomFieldsCustomFieldGidBody();
    var _EmptyResponseData = require_EmptyResponseData();
    var _EnumOptionData = require_EnumOptionData();
    var _EnumOptionsEnumOptionGidBody = require_EnumOptionsEnumOptionGidBody();
    var _EnumOptionsInsertBody = require_EnumOptionsInsertBody();
    var _ErrorResponse = require_ErrorResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var CustomFieldsApi = /* @__PURE__ */ function() {
      function CustomFieldsApi2(apiClient) {
        _classCallCheck(this, CustomFieldsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(CustomFieldsApi2, [{
        key: "createCustomField",
        value: function createCustomField(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createCustomField");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldResponseData.CustomFieldResponseData;
          return this.apiClient.callApi("/custom_fields", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createEnumOptionForCustomField operation.
         * @callback moduleapi/CustomFieldsApi~createEnumOptionForCustomFieldCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EnumOptionData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create an enum option
         * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
         * @param {String} custom_field_gid Globally unique identifier for the custom field.
         * @param {Object} opts Optional parameters
         * @param {module:model/CustomFieldGidEnumOptionsBody} opts.body The enum option object to create.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/CustomFieldsApi~createEnumOptionForCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createEnumOptionForCustomField",
        value: function createEnumOptionForCustomField(custom_field_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (custom_field_gid === void 0 || custom_field_gid === null) {
            throw new Error("Missing the required parameter 'custom_field_gid' when calling createEnumOptionForCustomField");
          }
          var pathParams = {
            "custom_field_gid": custom_field_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EnumOptionData.EnumOptionData;
          return this.apiClient.callApi("/custom_fields/{custom_field_gid}/enum_options", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteCustomField operation.
         * @callback moduleapi/CustomFieldsApi~deleteCustomFieldCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a custom field
         * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
         * @param {String} custom_field_gid Globally unique identifier for the custom field.
         * @param {module:api/CustomFieldsApi~deleteCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteCustomField",
        value: function deleteCustomField(custom_field_gid, callback) {
          var postBody = null;
          if (custom_field_gid === void 0 || custom_field_gid === null) {
            throw new Error("Missing the required parameter 'custom_field_gid' when calling deleteCustomField");
          }
          var pathParams = {
            "custom_field_gid": custom_field_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/custom_fields/{custom_field_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getCustomField operation.
         * @callback moduleapi/CustomFieldsApi~getCustomFieldCallback
         * @param {String} error Error message, if any.
         * @param {module:model/CustomFieldResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a custom field
         * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
         * @param {String} custom_field_gid Globally unique identifier for the custom field.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/CustomFieldsApi~getCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getCustomField",
        value: function getCustomField(custom_field_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (custom_field_gid === void 0 || custom_field_gid === null) {
            throw new Error("Missing the required parameter 'custom_field_gid' when calling getCustomField");
          }
          var pathParams = {
            "custom_field_gid": custom_field_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldResponseData.CustomFieldResponseData;
          return this.apiClient.callApi("/custom_fields/{custom_field_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getCustomFieldsForWorkspace operation.
         * @callback moduleapi/CustomFieldsApi~getCustomFieldsForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/CustomFieldResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a workspace&#x27;s custom fields
         * Returns a list of the compact representation of all of the custom fields in a workspace.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/CustomFieldsApi~getCustomFieldsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getCustomFieldsForWorkspace",
        value: function getCustomFieldsForWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getCustomFieldsForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldResponseArray.CustomFieldResponseArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/custom_fields", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the insertEnumOptionForCustomField operation.
         * @callback moduleapi/CustomFieldsApi~insertEnumOptionForCustomFieldCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EnumOptionData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Reorder a custom field&#x27;s enum
         * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
         * @param {String} custom_field_gid Globally unique identifier for the custom field.
         * @param {Object} opts Optional parameters
         * @param {module:model/EnumOptionsInsertBody} opts.body The enum option object to create.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/CustomFieldsApi~insertEnumOptionForCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "insertEnumOptionForCustomField",
        value: function insertEnumOptionForCustomField(custom_field_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (custom_field_gid === void 0 || custom_field_gid === null) {
            throw new Error("Missing the required parameter 'custom_field_gid' when calling insertEnumOptionForCustomField");
          }
          var pathParams = {
            "custom_field_gid": custom_field_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EnumOptionData.EnumOptionData;
          return this.apiClient.callApi("/custom_fields/{custom_field_gid}/enum_options/insert", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateCustomField operation.
         * @callback moduleapi/CustomFieldsApi~updateCustomFieldCallback
         * @param {String} error Error message, if any.
         * @param {module:model/CustomFieldResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a custom field
         * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s &#x60;type&#x60; cannot be updated. An enum custom field’s &#x60;enum_options&#x60; cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update &#x60;enum_options&#x60;. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
         * @param {String} custom_field_gid Globally unique identifier for the custom field.
         * @param {Object} opts Optional parameters
         * @param {module:model/CustomFieldsCustomFieldGidBody} opts.body The custom field object with all updated properties.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/CustomFieldsApi~updateCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateCustomField",
        value: function updateCustomField(custom_field_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (custom_field_gid === void 0 || custom_field_gid === null) {
            throw new Error("Missing the required parameter 'custom_field_gid' when calling updateCustomField");
          }
          var pathParams = {
            "custom_field_gid": custom_field_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldResponseData.CustomFieldResponseData;
          return this.apiClient.callApi("/custom_fields/{custom_field_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateEnumOption operation.
         * @callback moduleapi/CustomFieldsApi~updateEnumOptionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EnumOptionData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update an enum option
         * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
         * @param {String} enum_option_gid Globally unique identifier for the enum option.
         * @param {Object} opts Optional parameters
         * @param {module:model/EnumOptionsEnumOptionGidBody} opts.body The enum option object to update
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/CustomFieldsApi~updateEnumOptionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateEnumOption",
        value: function updateEnumOption(enum_option_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (enum_option_gid === void 0 || enum_option_gid === null) {
            throw new Error("Missing the required parameter 'enum_option_gid' when calling updateEnumOption");
          }
          var pathParams = {
            "enum_option_gid": enum_option_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EnumOptionData.EnumOptionData;
          return this.apiClient.callApi("/enum_options/{enum_option_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return CustomFieldsApi2;
    }();
    exports.CustomFieldsApi = CustomFieldsApi;
  }
});

// node_modules/asana/dist/api/EventsApi.js
var require_EventsApi = __commonJS({
  "node_modules/asana/dist/api/EventsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _EventResponseArray = require_EventResponseArray();
    var _InlineResponse = require_InlineResponse412();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var EventsApi = /* @__PURE__ */ function() {
      function EventsApi2(apiClient) {
        _classCallCheck(this, EventsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(EventsApi2, [{
        key: "getEvents",
        value: function getEvents(resource, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (resource === void 0 || resource === null) {
            throw new Error("Missing the required parameter 'resource' when calling getEvents");
          }
          var pathParams = {};
          var queryParams = {
            "resource": resource,
            "sync": opts["sync"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EventResponseArray.EventResponseArray;
          return this.apiClient.callApi("/events", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return EventsApi2;
    }();
    exports.EventsApi = EventsApi;
  }
});

// node_modules/asana/dist/api/GoalRelationshipsApi.js
var require_GoalRelationshipsApi = __commonJS({
  "node_modules/asana/dist/api/GoalRelationshipsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalRelationshipsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _GoalGidAddSupportingRelationshipBody = require_GoalGidAddSupportingRelationshipBody();
    var _GoalGidRemoveSupportingRelationshipBody = require_GoalGidRemoveSupportingRelationshipBody();
    var _GoalRelationshipResponseArray = require_GoalRelationshipResponseArray();
    var _GoalRelationshipResponseData = require_GoalRelationshipResponseData();
    var _GoalRelationshipsGoalRelationshipGidBody = require_GoalRelationshipsGoalRelationshipGidBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalRelationshipsApi = /* @__PURE__ */ function() {
      function GoalRelationshipsApi2(apiClient) {
        _classCallCheck(this, GoalRelationshipsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(GoalRelationshipsApi2, [{
        key: "addSupportingRelationship",
        value: function addSupportingRelationship(body, goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addSupportingRelationship");
          }
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling addSupportingRelationship");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalRelationshipResponseData.GoalRelationshipResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}/addSupportingRelationship", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getGoalRelationship operation.
         * @callback moduleapi/GoalRelationshipsApi~getGoalRelationshipCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalRelationshipResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a goal relationship
         * Returns the complete updated goal relationship record for a single goal relationship.
         * @param {String} goal_relationship_gid Globally unique identifier for the goal relationship.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalRelationshipsApi~getGoalRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getGoalRelationship",
        value: function getGoalRelationship(goal_relationship_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (goal_relationship_gid === void 0 || goal_relationship_gid === null) {
            throw new Error("Missing the required parameter 'goal_relationship_gid' when calling getGoalRelationship");
          }
          var pathParams = {
            "goal_relationship_gid": goal_relationship_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalRelationshipResponseData.GoalRelationshipResponseData;
          return this.apiClient.callApi("/goal_relationships/{goal_relationship_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getGoalRelationships operation.
         * @callback moduleapi/GoalRelationshipsApi~getGoalRelationshipsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalRelationshipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get goal relationships
         * Returns compact goal relationship records.
         * @param {String} supported_goal Globally unique identifier for the supported goal in the goal relationship.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {String} opts.resource_subtype If provided, filter to goal relationships with a given resource_subtype.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalRelationshipsApi~getGoalRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getGoalRelationships",
        value: function getGoalRelationships(supported_goal, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (supported_goal === void 0 || supported_goal === null) {
            throw new Error("Missing the required parameter 'supported_goal' when calling getGoalRelationships");
          }
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "supported_goal": supported_goal,
            "resource_subtype": opts["resource_subtype"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalRelationshipResponseArray.GoalRelationshipResponseArray;
          return this.apiClient.callApi("/goal_relationships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeSupportingRelationship operation.
         * @callback moduleapi/GoalRelationshipsApi~removeSupportingRelationshipCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Removes a supporting goal relationship
         * Removes a goal relationship for a given parent goal.
         * @param {module:model/GoalGidRemoveSupportingRelationshipBody} body The supporting resource to be removed from the goal
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {module:api/GoalRelationshipsApi~removeSupportingRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeSupportingRelationship",
        value: function removeSupportingRelationship(body, goal_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeSupportingRelationship");
          }
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling removeSupportingRelationship");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}/removeSupportingRelationship", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateGoalRelationship operation.
         * @callback moduleapi/GoalRelationshipsApi~updateGoalRelationshipCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalRelationshipResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a goal relationship
         * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
         * @param {module:model/GoalRelationshipsGoalRelationshipGidBody} body The updated fields for the goal relationship.
         * @param {String} goal_relationship_gid Globally unique identifier for the goal relationship.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalRelationshipsApi~updateGoalRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateGoalRelationship",
        value: function updateGoalRelationship(body, goal_relationship_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateGoalRelationship");
          }
          if (goal_relationship_gid === void 0 || goal_relationship_gid === null) {
            throw new Error("Missing the required parameter 'goal_relationship_gid' when calling updateGoalRelationship");
          }
          var pathParams = {
            "goal_relationship_gid": goal_relationship_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalRelationshipResponseData.GoalRelationshipResponseData;
          return this.apiClient.callApi("/goal_relationships/{goal_relationship_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return GoalRelationshipsApi2;
    }();
    exports.GoalRelationshipsApi = GoalRelationshipsApi;
  }
});

// node_modules/asana/dist/api/GoalsApi.js
var require_GoalsApi = __commonJS({
  "node_modules/asana/dist/api/GoalsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GoalsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _GoalGidAddFollowersBody = require_GoalGidAddFollowersBody();
    var _GoalGidRemoveFollowersBody = require_GoalGidRemoveFollowersBody();
    var _GoalGidSetMetricBody = require_GoalGidSetMetricBody();
    var _GoalGidSetMetricCurrentValueBody = require_GoalGidSetMetricCurrentValueBody();
    var _GoalResponseArray = require_GoalResponseArray();
    var _GoalResponseData = require_GoalResponseData();
    var _GoalsBody = require_GoalsBody();
    var _GoalsGoalGidBody = require_GoalsGoalGidBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var GoalsApi = /* @__PURE__ */ function() {
      function GoalsApi2(apiClient) {
        _classCallCheck(this, GoalsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(GoalsApi2, [{
        key: "addFollowers",
        value: function addFollowers(body, goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addFollowers");
          }
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling addFollowers");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseData.GoalResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}/addFollowers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createGoal operation.
         * @callback moduleapi/GoalsApi~createGoalCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a goal
         * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
         * @param {module:model/GoalsBody} body The goal to create.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~createGoalCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createGoal",
        value: function createGoal(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createGoal");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseData.GoalResponseData;
          return this.apiClient.callApi("/goals", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createGoalMetric operation.
         * @callback moduleapi/GoalsApi~createGoalMetricCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a goal metric
         * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         * @param {module:model/GoalGidSetMetricBody} body The goal metric to create.
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~createGoalMetricCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createGoalMetric",
        value: function createGoalMetric(body, goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createGoalMetric");
          }
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling createGoalMetric");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseData.GoalResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}/setMetric", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteGoal operation.
         * @callback moduleapi/GoalsApi~deleteGoalCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a goal
         * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {module:api/GoalsApi~deleteGoalCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteGoal",
        value: function deleteGoal(goal_gid, callback) {
          var postBody = null;
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling deleteGoal");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getGoal operation.
         * @callback moduleapi/GoalsApi~getGoalCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a goal
         * Returns the complete goal record for a single goal.
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~getGoalCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getGoal",
        value: function getGoal(goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling getGoal");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseData.GoalResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getGoals operation.
         * @callback moduleapi/GoalsApi~getGoalsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get goals
         * Returns compact goal records.
         * @param {Object} opts Optional parameters
         * @param {String} opts.portfolio Globally unique identifier for supporting portfolio.
         * @param {String} opts.project Globally unique identifier for supporting project.
         * @param {Boolean} opts.is_workspace_level Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
         * @param {String} opts.team Globally unique identifier for the team.
         * @param {String} opts.workspace Globally unique identifier for the workspace.
         * @param {Array.<String>} opts.time_periods Globally unique identifiers for the time periods.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~getGoalsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getGoals",
        value: function getGoals(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "portfolio": opts["portfolio"],
            "project": opts["project"],
            "is_workspace_level": opts["is_workspace_level"],
            "team": opts["team"],
            "workspace": opts["workspace"],
            "time_periods": this.apiClient.buildCollectionParam(opts["time_periods"], "multi"),
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseArray.GoalResponseArray;
          return this.apiClient.callApi("/goals", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getParentGoalsForGoal operation.
         * @callback moduleapi/GoalsApi~getParentGoalsForGoalCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get parent goals from a goal
         * Returns a compact representation of all of the parent goals of a goal.
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~getParentGoalsForGoalCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getParentGoalsForGoal",
        value: function getParentGoalsForGoal(goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling getParentGoalsForGoal");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseArray.GoalResponseArray;
          return this.apiClient.callApi("/goals/{goal_gid}/parentGoals", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeFollowers operation.
         * @callback moduleapi/GoalsApi~removeFollowersCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a collaborator from a goal
         * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @param {module:model/GoalGidRemoveFollowersBody} body The followers to be removed as collaborators
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~removeFollowersCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeFollowers",
        value: function removeFollowers(body, goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeFollowers");
          }
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling removeFollowers");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseData.GoalResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}/removeFollowers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateGoal operation.
         * @callback moduleapi/GoalsApi~updateGoalCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a goal
         * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
         * @param {module:model/GoalsGoalGidBody} body The updated fields for the goal.
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~updateGoalCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateGoal",
        value: function updateGoal(body, goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateGoal");
          }
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling updateGoal");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseData.GoalResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateGoalMetric operation.
         * @callback moduleapi/GoalsApi~updateGoalMetricCallback
         * @param {String} error Error message, if any.
         * @param {module:model/GoalResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a goal metric
         * Updates a goal&#x27;s existing metric&#x27;s &#x60;current_number_value&#x60; if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
         * @param {module:model/GoalGidSetMetricCurrentValueBody} body The updated fields for the goal metric.
         * @param {String} goal_gid Globally unique identifier for the goal.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/GoalsApi~updateGoalMetricCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateGoalMetric",
        value: function updateGoalMetric(body, goal_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateGoalMetric");
          }
          if (goal_gid === void 0 || goal_gid === null) {
            throw new Error("Missing the required parameter 'goal_gid' when calling updateGoalMetric");
          }
          var pathParams = {
            "goal_gid": goal_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _GoalResponseData.GoalResponseData;
          return this.apiClient.callApi("/goals/{goal_gid}/setMetricCurrentValue", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return GoalsApi2;
    }();
    exports.GoalsApi = GoalsApi;
  }
});

// node_modules/asana/dist/api/JobsApi.js
var require_JobsApi = __commonJS({
  "node_modules/asana/dist/api/JobsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JobsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _JobResponseData = require_JobResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var JobsApi = /* @__PURE__ */ function() {
      function JobsApi2(apiClient) {
        _classCallCheck(this, JobsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(JobsApi2, [{
        key: "getJob",
        value: function getJob(job_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (job_gid === void 0 || job_gid === null) {
            throw new Error("Missing the required parameter 'job_gid' when calling getJob");
          }
          var pathParams = {
            "job_gid": job_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _JobResponseData.JobResponseData;
          return this.apiClient.callApi("/jobs/{job_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return JobsApi2;
    }();
    exports.JobsApi = JobsApi;
  }
});

// node_modules/asana/dist/api/MembershipsApi.js
var require_MembershipsApi = __commonJS({
  "node_modules/asana/dist/api/MembershipsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MembershipsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _MembershipResponseArray = require_MembershipResponseArray();
    var _MembershipResponseData = require_MembershipResponseData();
    var _MembershipsBody = require_MembershipsBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var MembershipsApi = /* @__PURE__ */ function() {
      function MembershipsApi2(apiClient) {
        _classCallCheck(this, MembershipsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(MembershipsApi2, [{
        key: "createMembership",
        value: function createMembership(opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _MembershipResponseData.MembershipResponseData;
          return this.apiClient.callApi("/memberships", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteMembership operation.
         * @callback moduleapi/MembershipsApi~deleteMembershipCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a membership
         * A specific, existing membership can be deleted by making a &#x60;DELETE&#x60; request on the URL for that membership.  Returns an empty data record.
         * @param {String} membership_gid Globally unique identifier for the membership.
         * @param {module:api/MembershipsApi~deleteMembershipCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteMembership",
        value: function deleteMembership(membership_gid, callback) {
          var postBody = null;
          if (membership_gid === void 0 || membership_gid === null) {
            throw new Error("Missing the required parameter 'membership_gid' when calling deleteMembership");
          }
          var pathParams = {
            "membership_gid": membership_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/memberships/{membership_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getMemberships operation.
         * @callback moduleapi/MembershipsApi~getMembershipsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/MembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple memberships
         * Returns compact &#x60;goal_membership&#x60; or &#x60;project_membership&#x60; records. The possible types for &#x60;parent&#x60; in this request are &#x60;goal&#x60; or &#x60;project&#x60;. An additional member (user GID or team GID) can be passed in to filter to a specific membership.
         * @param {Object} opts Optional parameters
         * @param {String} opts.parent Globally unique identifier for &#x60;goal&#x60; or &#x60;project&#x60;.
         * @param {String} opts.member Globally unique identifier for &#x60;team&#x60; or &#x60;user&#x60;.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/MembershipsApi~getMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getMemberships",
        value: function getMemberships(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "parent": opts["parent"],
            "member": opts["member"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _MembershipResponseArray.MembershipResponseArray;
          return this.apiClient.callApi("/memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return MembershipsApi2;
    }();
    exports.MembershipsApi = MembershipsApi;
  }
});

// node_modules/asana/dist/api/OrganizationExportsApi.js
var require_OrganizationExportsApi = __commonJS({
  "node_modules/asana/dist/api/OrganizationExportsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OrganizationExportsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _OrganizationExportResponseData = require_OrganizationExportResponseData();
    var _OrganizationExportsBody = require_OrganizationExportsBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var OrganizationExportsApi = /* @__PURE__ */ function() {
      function OrganizationExportsApi2(apiClient) {
        _classCallCheck(this, OrganizationExportsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(OrganizationExportsApi2, [{
        key: "createOrganizationExport",
        value: function createOrganizationExport(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createOrganizationExport");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _OrganizationExportResponseData.OrganizationExportResponseData;
          return this.apiClient.callApi("/organization_exports", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getOrganizationExport operation.
         * @callback moduleapi/OrganizationExportsApi~getOrganizationExportCallback
         * @param {String} error Error message, if any.
         * @param {module:model/OrganizationExportResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get details on an org export request
         * Returns details of a previously-requested Organization export.
         * @param {String} organization_export_gid Globally unique identifier for the organization export.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/OrganizationExportsApi~getOrganizationExportCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getOrganizationExport",
        value: function getOrganizationExport(organization_export_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (organization_export_gid === void 0 || organization_export_gid === null) {
            throw new Error("Missing the required parameter 'organization_export_gid' when calling getOrganizationExport");
          }
          var pathParams = {
            "organization_export_gid": organization_export_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _OrganizationExportResponseData.OrganizationExportResponseData;
          return this.apiClient.callApi("/organization_exports/{organization_export_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return OrganizationExportsApi2;
    }();
    exports.OrganizationExportsApi = OrganizationExportsApi;
  }
});

// node_modules/asana/dist/api/PortfolioMembershipsApi.js
var require_PortfolioMembershipsApi = __commonJS({
  "node_modules/asana/dist/api/PortfolioMembershipsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfolioMembershipsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _PortfolioMembershipResponseArray = require_PortfolioMembershipResponseArray();
    var _PortfolioMembershipResponseData = require_PortfolioMembershipResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfolioMembershipsApi = /* @__PURE__ */ function() {
      function PortfolioMembershipsApi2(apiClient) {
        _classCallCheck(this, PortfolioMembershipsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(PortfolioMembershipsApi2, [{
        key: "getPortfolioMembership",
        value: function getPortfolioMembership(portfolio_membership_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (portfolio_membership_gid === void 0 || portfolio_membership_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_membership_gid' when calling getPortfolioMembership");
          }
          var pathParams = {
            "portfolio_membership_gid": portfolio_membership_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioMembershipResponseData.PortfolioMembershipResponseData;
          return this.apiClient.callApi("/portfolio_memberships/{portfolio_membership_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getPortfolioMemberships operation.
         * @callback moduleapi/PortfolioMembershipsApi~getPortfolioMembershipsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioMembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple portfolio memberships
         * Returns a list of portfolio memberships in compact representation. You must specify &#x60;portfolio&#x60;, &#x60;portfolio&#x60; and &#x60;user&#x60;, or &#x60;workspace&#x60; and &#x60;user&#x60;.
         * @param {Object} opts Optional parameters
         * @param {String} opts.portfolio The portfolio to filter results on.
         * @param {String} opts.workspace The workspace to filter results on.
         * @param {String} opts.user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfolioMembershipsApi~getPortfolioMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getPortfolioMemberships",
        value: function getPortfolioMemberships(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "portfolio": opts["portfolio"],
            "workspace": opts["workspace"],
            "user": opts["user"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioMembershipResponseArray.PortfolioMembershipResponseArray;
          return this.apiClient.callApi("/portfolio_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getPortfolioMembershipsForPortfolio operation.
         * @callback moduleapi/PortfolioMembershipsApi~getPortfolioMembershipsForPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioMembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get memberships from a portfolio
         * Returns the compact portfolio membership records for the portfolio.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {Object} opts Optional parameters
         * @param {String} opts.user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfolioMembershipsApi~getPortfolioMembershipsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getPortfolioMembershipsForPortfolio",
        value: function getPortfolioMembershipsForPortfolio(portfolio_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling getPortfolioMembershipsForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {
            "user": opts["user"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioMembershipResponseArray.PortfolioMembershipResponseArray;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/portfolio_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return PortfolioMembershipsApi2;
    }();
    exports.PortfolioMembershipsApi = PortfolioMembershipsApi;
  }
});

// node_modules/asana/dist/api/PortfoliosApi.js
var require_PortfoliosApi = __commonJS({
  "node_modules/asana/dist/api/PortfoliosApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PortfoliosApi = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldSettingResponseData = require_CustomFieldSettingResponseData();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _PortfolioGidAddCustomFieldSettingBody = require_PortfolioGidAddCustomFieldSettingBody();
    var _PortfolioGidAddItemBody = require_PortfolioGidAddItemBody();
    var _PortfolioGidAddMembersBody = require_PortfolioGidAddMembersBody();
    var _PortfolioGidRemoveCustomFieldSettingBody = require_PortfolioGidRemoveCustomFieldSettingBody();
    var _PortfolioGidRemoveItemBody = require_PortfolioGidRemoveItemBody();
    var _PortfolioGidRemoveMembersBody = require_PortfolioGidRemoveMembersBody();
    var _PortfolioResponseArray = require_PortfolioResponseArray();
    var _PortfolioResponseData = require_PortfolioResponseData();
    var _PortfoliosBody = require_PortfoliosBody();
    var _PortfoliosPortfolioGidBody = require_PortfoliosPortfolioGidBody();
    var _ProjectResponseArray = require_ProjectResponseArray();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var PortfoliosApi = /* @__PURE__ */ function() {
      function PortfoliosApi2(apiClient) {
        _classCallCheck(this, PortfoliosApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(PortfoliosApi2, [{
        key: "addCustomFieldSettingForPortfolio",
        value: function addCustomFieldSettingForPortfolio(body, portfolio_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addCustomFieldSettingForPortfolio");
          }
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling addCustomFieldSettingForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldSettingResponseData.CustomFieldSettingResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/addCustomFieldSetting", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addItemForPortfolio operation.
         * @callback moduleapi/PortfoliosApi~addItemForPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Add a portfolio item
         * Add an item to a portfolio. Returns an empty data block.
         * @param {module:model/PortfolioGidAddItemBody} body Information about the item being inserted.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {module:api/PortfoliosApi~addItemForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addItemForPortfolio",
        value: function addItemForPortfolio(body, portfolio_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addItemForPortfolio");
          }
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling addItemForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/addItem", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addMembersForPortfolio operation.
         * @callback moduleapi/PortfoliosApi~addMembersForPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Add users to a portfolio
         * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
         * @param {module:model/PortfolioGidAddMembersBody} body Information about the members being added.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfoliosApi~addMembersForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addMembersForPortfolio",
        value: function addMembersForPortfolio(body, portfolio_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addMembersForPortfolio");
          }
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling addMembersForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioResponseData.PortfolioResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/addMembers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createPortfolio operation.
         * @callback moduleapi/PortfoliosApi~createPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a portfolio
         * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
         * @param {module:model/PortfoliosBody} body The portfolio to create.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfoliosApi~createPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createPortfolio",
        value: function createPortfolio(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createPortfolio");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioResponseData.PortfolioResponseData;
          return this.apiClient.callApi("/portfolios", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deletePortfolio operation.
         * @callback moduleapi/PortfoliosApi~deletePortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a portfolio
         * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {module:api/PortfoliosApi~deletePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deletePortfolio",
        value: function deletePortfolio(portfolio_gid, callback) {
          var postBody = null;
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling deletePortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getItemsForPortfolio operation.
         * @callback moduleapi/PortfoliosApi~getItemsForPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get portfolio items
         * Get a list of the items in compact form in a portfolio.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfoliosApi~getItemsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getItemsForPortfolio",
        value: function getItemsForPortfolio(portfolio_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling getItemsForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseArray.ProjectResponseArray;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/items", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getPortfolio operation.
         * @callback moduleapi/PortfoliosApi~getPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a portfolio
         * Returns the complete portfolio record for a single portfolio.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfoliosApi~getPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getPortfolio",
        value: function getPortfolio(portfolio_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling getPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioResponseData.PortfolioResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getPortfolios operation.
         * @callback moduleapi/PortfoliosApi~getPortfoliosCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple portfolios
         * Returns a list of the portfolios in compact representation that are owned by the current API user.
         * @param {String} workspace The workspace or organization to filter portfolios on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {String} opts.owner The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfoliosApi~getPortfoliosCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getPortfolios",
        value: function getPortfolios(workspace, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace === void 0 || workspace === null) {
            throw new Error("Missing the required parameter 'workspace' when calling getPortfolios");
          }
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "workspace": workspace,
            "owner": opts["owner"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioResponseArray.PortfolioResponseArray;
          return this.apiClient.callApi("/portfolios", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeCustomFieldSettingForPortfolio operation.
         * @callback moduleapi/PortfoliosApi~removeCustomFieldSettingForPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a custom field from a portfolio
         * Removes a custom field setting from a portfolio.
         * @param {module:model/PortfolioGidRemoveCustomFieldSettingBody} body Information about the custom field setting being removed.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {module:api/PortfoliosApi~removeCustomFieldSettingForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeCustomFieldSettingForPortfolio",
        value: function removeCustomFieldSettingForPortfolio(body, portfolio_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeCustomFieldSettingForPortfolio");
          }
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling removeCustomFieldSettingForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/removeCustomFieldSetting", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeItemForPortfolio operation.
         * @callback moduleapi/PortfoliosApi~removeItemForPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a portfolio item
         * Remove an item from a portfolio. Returns an empty data block.
         * @param {module:model/PortfolioGidRemoveItemBody} body Information about the item being removed.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {module:api/PortfoliosApi~removeItemForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeItemForPortfolio",
        value: function removeItemForPortfolio(body, portfolio_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeItemForPortfolio");
          }
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling removeItemForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/removeItem", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeMembersForPortfolio operation.
         * @callback moduleapi/PortfoliosApi~removeMembersForPortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove users from a portfolio
         * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
         * @param {module:model/PortfolioGidRemoveMembersBody} body Information about the members being removed.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfoliosApi~removeMembersForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeMembersForPortfolio",
        value: function removeMembersForPortfolio(body, portfolio_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeMembersForPortfolio");
          }
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling removeMembersForPortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioResponseData.PortfolioResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}/removeMembers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updatePortfolio operation.
         * @callback moduleapi/PortfoliosApi~updatePortfolioCallback
         * @param {String} error Error message, if any.
         * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a portfolio
         * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
         * @param {module:model/PortfoliosPortfolioGidBody} body The updated fields for the portfolio.
         * @param {String} portfolio_gid Globally unique identifier for the portfolio.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/PortfoliosApi~updatePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updatePortfolio",
        value: function updatePortfolio(body, portfolio_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updatePortfolio");
          }
          if (portfolio_gid === void 0 || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling updatePortfolio");
          }
          var pathParams = {
            "portfolio_gid": portfolio_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _PortfolioResponseData.PortfolioResponseData;
          return this.apiClient.callApi("/portfolios/{portfolio_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return PortfoliosApi2;
    }();
    exports.PortfoliosApi = PortfoliosApi;
  }
});

// node_modules/asana/dist/api/ProjectBriefsApi.js
var require_ProjectBriefsApi = __commonJS({
  "node_modules/asana/dist/api/ProjectBriefsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectBriefsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _ProjectBriefResponseData = require_ProjectBriefResponseData();
    var _ProjectBriefsProjectBriefGidBody = require_ProjectBriefsProjectBriefGidBody();
    var _ProjectGidProjectBriefsBody = require_ProjectGidProjectBriefsBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectBriefsApi = /* @__PURE__ */ function() {
      function ProjectBriefsApi2(apiClient) {
        _classCallCheck(this, ProjectBriefsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(ProjectBriefsApi2, [{
        key: "createProjectBrief",
        value: function createProjectBrief(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createProjectBrief");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling createProjectBrief");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectBriefResponseData.ProjectBriefResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/project_briefs", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteProjectBrief operation.
         * @callback moduleapi/ProjectBriefsApi~deleteProjectBriefCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a project brief
         * Deletes a specific, existing project brief.  Returns an empty data record.
         * @param {String} project_brief_gid Globally unique identifier for the project brief.
         * @param {module:api/ProjectBriefsApi~deleteProjectBriefCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteProjectBrief",
        value: function deleteProjectBrief(project_brief_gid, callback) {
          var postBody = null;
          if (project_brief_gid === void 0 || project_brief_gid === null) {
            throw new Error("Missing the required parameter 'project_brief_gid' when calling deleteProjectBrief");
          }
          var pathParams = {
            "project_brief_gid": project_brief_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/project_briefs/{project_brief_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectBrief operation.
         * @callback moduleapi/ProjectBriefsApi~getProjectBriefCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectBriefResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a project brief
         * Get the full record for a project brief.
         * @param {String} project_brief_gid Globally unique identifier for the project brief.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectBriefsApi~getProjectBriefCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectBrief",
        value: function getProjectBrief(project_brief_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_brief_gid === void 0 || project_brief_gid === null) {
            throw new Error("Missing the required parameter 'project_brief_gid' when calling getProjectBrief");
          }
          var pathParams = {
            "project_brief_gid": project_brief_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectBriefResponseData.ProjectBriefResponseData;
          return this.apiClient.callApi("/project_briefs/{project_brief_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateProjectBrief operation.
         * @callback moduleapi/ProjectBriefsApi~updateProjectBriefCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectBriefResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a project brief
         * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
         * @param {module:model/ProjectBriefsProjectBriefGidBody} body The updated fields for the project brief.
         * @param {String} project_brief_gid Globally unique identifier for the project brief.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectBriefsApi~updateProjectBriefCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateProjectBrief",
        value: function updateProjectBrief(body, project_brief_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateProjectBrief");
          }
          if (project_brief_gid === void 0 || project_brief_gid === null) {
            throw new Error("Missing the required parameter 'project_brief_gid' when calling updateProjectBrief");
          }
          var pathParams = {
            "project_brief_gid": project_brief_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectBriefResponseData.ProjectBriefResponseData;
          return this.apiClient.callApi("/project_briefs/{project_brief_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return ProjectBriefsApi2;
    }();
    exports.ProjectBriefsApi = ProjectBriefsApi;
  }
});

// node_modules/asana/dist/api/ProjectMembershipsApi.js
var require_ProjectMembershipsApi = __commonJS({
  "node_modules/asana/dist/api/ProjectMembershipsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectMembershipsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _ProjectMembershipCompactArray = require_ProjectMembershipCompactArray();
    var _ProjectMembershipNormalResponseData = require_ProjectMembershipNormalResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectMembershipsApi = /* @__PURE__ */ function() {
      function ProjectMembershipsApi2(apiClient) {
        _classCallCheck(this, ProjectMembershipsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(ProjectMembershipsApi2, [{
        key: "getProjectMembership",
        value: function getProjectMembership(project_membership_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_membership_gid === void 0 || project_membership_gid === null) {
            throw new Error("Missing the required parameter 'project_membership_gid' when calling getProjectMembership");
          }
          var pathParams = {
            "project_membership_gid": project_membership_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectMembershipNormalResponseData.ProjectMembershipNormalResponseData;
          return this.apiClient.callApi("/project_memberships/{project_membership_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectMembershipsForProject operation.
         * @callback moduleapi/ProjectMembershipsApi~getProjectMembershipsForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectMembershipCompactArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get memberships from a project
         * Returns the compact project membership records for the project.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {String} opts.user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectMembershipsApi~getProjectMembershipsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectMembershipsForProject",
        value: function getProjectMembershipsForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling getProjectMembershipsForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "user": opts["user"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectMembershipCompactArray.ProjectMembershipCompactArray;
          return this.apiClient.callApi("/projects/{project_gid}/project_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return ProjectMembershipsApi2;
    }();
    exports.ProjectMembershipsApi = ProjectMembershipsApi;
  }
});

// node_modules/asana/dist/api/ProjectStatusesApi.js
var require_ProjectStatusesApi = __commonJS({
  "node_modules/asana/dist/api/ProjectStatusesApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectStatusesApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _ProjectGidProjectStatusesBody = require_ProjectGidProjectStatusesBody();
    var _ProjectStatusResponseArray = require_ProjectStatusResponseArray();
    var _ProjectStatusResponseData = require_ProjectStatusResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectStatusesApi = /* @__PURE__ */ function() {
      function ProjectStatusesApi2(apiClient) {
        _classCallCheck(this, ProjectStatusesApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(ProjectStatusesApi2, [{
        key: "createProjectStatusForProject",
        value: function createProjectStatusForProject(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createProjectStatusForProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling createProjectStatusForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectStatusResponseData.ProjectStatusResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/project_statuses", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteProjectStatus operation.
         * @callback moduleapi/ProjectStatusesApi~deleteProjectStatusCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a project status
         * *Deprecated: new integrations should prefer the &#x60;/status_updates/{status_gid}&#x60; route.*  Deletes a specific, existing project status update.  Returns an empty data record.
         * @param {String} project_status_gid The project status update to get.
         * @param {module:api/ProjectStatusesApi~deleteProjectStatusCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteProjectStatus",
        value: function deleteProjectStatus(project_status_gid, callback) {
          var postBody = null;
          if (project_status_gid === void 0 || project_status_gid === null) {
            throw new Error("Missing the required parameter 'project_status_gid' when calling deleteProjectStatus");
          }
          var pathParams = {
            "project_status_gid": project_status_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/project_statuses/{project_status_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectStatus operation.
         * @callback moduleapi/ProjectStatusesApi~getProjectStatusCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectStatusResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a project status
         * *Deprecated: new integrations should prefer the &#x60;/status_updates/{status_gid}&#x60; route.*  Returns the complete record for a single status update.
         * @param {String} project_status_gid The project status update to get.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectStatusesApi~getProjectStatusCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectStatus",
        value: function getProjectStatus(project_status_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_status_gid === void 0 || project_status_gid === null) {
            throw new Error("Missing the required parameter 'project_status_gid' when calling getProjectStatus");
          }
          var pathParams = {
            "project_status_gid": project_status_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectStatusResponseData.ProjectStatusResponseData;
          return this.apiClient.callApi("/project_statuses/{project_status_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectStatusesForProject operation.
         * @callback moduleapi/ProjectStatusesApi~getProjectStatusesForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectStatusResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get statuses from a project
         * *Deprecated: new integrations should prefer the &#x60;/status_updates&#x60; route.*  Returns the compact project status update records for all updates on the project.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectStatusesApi~getProjectStatusesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectStatusesForProject",
        value: function getProjectStatusesForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling getProjectStatusesForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectStatusResponseArray.ProjectStatusResponseArray;
          return this.apiClient.callApi("/projects/{project_gid}/project_statuses", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return ProjectStatusesApi2;
    }();
    exports.ProjectStatusesApi = ProjectStatusesApi;
  }
});

// node_modules/asana/dist/api/ProjectTemplatesApi.js
var require_ProjectTemplatesApi = __commonJS({
  "node_modules/asana/dist/api/ProjectTemplatesApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectTemplatesApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _JobResponseData = require_JobResponseData();
    var _ProjectTemplateGidInstantiateProjectBody = require_ProjectTemplateGidInstantiateProjectBody();
    var _ProjectTemplateResponseArray = require_ProjectTemplateResponseArray();
    var _ProjectTemplateResponseData = require_ProjectTemplateResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectTemplatesApi = /* @__PURE__ */ function() {
      function ProjectTemplatesApi2(apiClient) {
        _classCallCheck(this, ProjectTemplatesApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(ProjectTemplatesApi2, [{
        key: "deleteProjectTemplate",
        value: function deleteProjectTemplate(project_template_gid, callback) {
          var postBody = null;
          if (project_template_gid === void 0 || project_template_gid === null) {
            throw new Error("Missing the required parameter 'project_template_gid' when calling deleteProjectTemplate");
          }
          var pathParams = {
            "project_template_gid": project_template_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/project_templates/{project_template_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectTemplate operation.
         * @callback moduleapi/ProjectTemplatesApi~getProjectTemplateCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectTemplateResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a project template
         * Returns the complete project template record for a single project template.
         * @param {String} project_template_gid Globally unique identifier for the project template.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectTemplatesApi~getProjectTemplateCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectTemplate",
        value: function getProjectTemplate(project_template_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_template_gid === void 0 || project_template_gid === null) {
            throw new Error("Missing the required parameter 'project_template_gid' when calling getProjectTemplate");
          }
          var pathParams = {
            "project_template_gid": project_template_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectTemplateResponseData.ProjectTemplateResponseData;
          return this.apiClient.callApi("/project_templates/{project_template_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectTemplates operation.
         * @callback moduleapi/ProjectTemplatesApi~getProjectTemplatesCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectTemplateResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple project templates
         * Returns the compact project template records for all project templates in the given team or workspace.
         * @param {Object} opts Optional parameters
         * @param {String} opts.workspace The workspace to filter results on.
         * @param {String} opts.team The team to filter projects on.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectTemplatesApi~getProjectTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectTemplates",
        value: function getProjectTemplates(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "workspace": opts["workspace"],
            "team": opts["team"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectTemplateResponseArray.ProjectTemplateResponseArray;
          return this.apiClient.callApi("/project_templates", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectTemplatesForTeam operation.
         * @callback moduleapi/ProjectTemplatesApi~getProjectTemplatesForTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectTemplateResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a team&#x27;s project templates
         * Returns the compact project template records for all project templates in the team.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectTemplatesApi~getProjectTemplatesForTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectTemplatesForTeam",
        value: function getProjectTemplatesForTeam(team_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling getProjectTemplatesForTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectTemplateResponseArray.ProjectTemplateResponseArray;
          return this.apiClient.callApi("/teams/{team_gid}/project_templates", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the instantiateProject operation.
         * @callback moduleapi/ProjectTemplatesApi~instantiateProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/JobResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Instantiate a project from a project template
         * Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](/reference/getprojecttemplate). Then, from the response, copy the &#x60;gid&#x60; from the object in the &#x60;requested_dates&#x60; array. This &#x60;gid&#x60; should be used in &#x60;requested_dates&#x60; to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](/reference/workspaces) parameter._
         * @param {String} project_template_gid Globally unique identifier for the project template.
         * @param {Object} opts Optional parameters
         * @param {module:model/ProjectTemplateGidInstantiateProjectBody} opts.body Describes the inputs used for instantiating a project, such as the resulting project&#x27;s name, which team it should be created in, and values for date variables.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectTemplatesApi~instantiateProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "instantiateProject",
        value: function instantiateProject(project_template_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (project_template_gid === void 0 || project_template_gid === null) {
            throw new Error("Missing the required parameter 'project_template_gid' when calling instantiateProject");
          }
          var pathParams = {
            "project_template_gid": project_template_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _JobResponseData.JobResponseData;
          return this.apiClient.callApi("/project_templates/{project_template_gid}/instantiateProject", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return ProjectTemplatesApi2;
    }();
    exports.ProjectTemplatesApi = ProjectTemplatesApi;
  }
});

// node_modules/asana/dist/api/ProjectsApi.js
var require_ProjectsApi = __commonJS({
  "node_modules/asana/dist/api/ProjectsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProjectsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _CustomFieldSettingResponseData = require_CustomFieldSettingResponseData();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _JobResponseData = require_JobResponseData();
    var _ProjectGidAddCustomFieldSettingBody = require_ProjectGidAddCustomFieldSettingBody();
    var _ProjectGidAddFollowersBody = require_ProjectGidAddFollowersBody();
    var _ProjectGidAddMembersBody = require_ProjectGidAddMembersBody();
    var _ProjectGidDuplicateBody = require_ProjectGidDuplicateBody();
    var _ProjectGidRemoveCustomFieldSettingBody = require_ProjectGidRemoveCustomFieldSettingBody();
    var _ProjectGidRemoveFollowersBody = require_ProjectGidRemoveFollowersBody();
    var _ProjectGidRemoveMembersBody = require_ProjectGidRemoveMembersBody();
    var _ProjectGidSaveAsTemplateBody = require_ProjectGidSaveAsTemplateBody();
    var _ProjectResponseArray = require_ProjectResponseArray();
    var _ProjectResponseData = require_ProjectResponseData();
    var _ProjectsBody = require_ProjectsBody();
    var _ProjectsProjectGidBody = require_ProjectsProjectGidBody();
    var _TaskCountResponseData = require_TaskCountResponseData();
    var _TeamGidProjectsBody = require_TeamGidProjectsBody();
    var _WorkspaceGidProjectsBody = require_WorkspaceGidProjectsBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ProjectsApi = /* @__PURE__ */ function() {
      function ProjectsApi2(apiClient) {
        _classCallCheck(this, ProjectsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(ProjectsApi2, [{
        key: "addCustomFieldSettingForProject",
        value: function addCustomFieldSettingForProject(body, project_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addCustomFieldSettingForProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling addCustomFieldSettingForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _CustomFieldSettingResponseData.CustomFieldSettingResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/addCustomFieldSetting", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addFollowersForProject operation.
         * @callback moduleapi/ProjectsApi~addFollowersForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Add followers to a project
         * Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \&quot;tasks added\&quot; notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation. Returns the updated project record.
         * @param {module:model/ProjectGidAddFollowersBody} body Information about the followers being added.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~addFollowersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addFollowersForProject",
        value: function addFollowersForProject(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addFollowersForProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling addFollowersForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/addFollowers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addMembersForProject operation.
         * @callback moduleapi/ProjectsApi~addMembersForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Add users to a project
         * Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user&#x27;s default notification settings (i.e., in the \&quot;Notifcations\&quot; tab of \&quot;My Profile Settings\&quot;) will override this endpoint&#x27;s default behavior of setting \&quot;Tasks added\&quot; notifications to &#x60;false&#x60;. Returns the updated project record.
         * @param {module:model/ProjectGidAddMembersBody} body Information about the members being added.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~addMembersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addMembersForProject",
        value: function addMembersForProject(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addMembersForProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling addMembersForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/addMembers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createProject operation.
         * @callback moduleapi/ProjectsApi~createProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a project
         * Create a new project in a workspace or team.  Every project is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the &#x60;workspace&#x60; parameter regardless of whether or not it is an organization.  If the workspace for your project is an organization, you must also supply a &#x60;team&#x60; to share the project with.  Returns the full record of the newly created project.
         * @param {module:model/ProjectsBody} body The project to create.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createProject",
        value: function createProject(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createProject");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/projects", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createProjectForTeam operation.
         * @callback moduleapi/ProjectsApi~createProjectForTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a project in a team
         * Creates a project shared with the given team.  Returns the full record of the newly created project.
         * @param {module:model/TeamGidProjectsBody} body The new project to create.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~createProjectForTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createProjectForTeam",
        value: function createProjectForTeam(body, team_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createProjectForTeam");
          }
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling createProjectForTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/teams/{team_gid}/projects", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createProjectForWorkspace operation.
         * @callback moduleapi/ProjectsApi~createProjectForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a project in a workspace
         * Creates a project in the workspace.  If the workspace for your project is an organization, you must also supply a team to share the project with.  Returns the full record of the newly created project.
         * @param {module:model/WorkspaceGidProjectsBody} body The new project to create.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~createProjectForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createProjectForWorkspace",
        value: function createProjectForWorkspace(body, workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createProjectForWorkspace");
          }
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling createProjectForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/projects", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteProject operation.
         * @callback moduleapi/ProjectsApi~deleteProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a project
         * A specific, existing project can be deleted by making a DELETE request on the URL for that project.  Returns an empty data record.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {module:api/ProjectsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteProject",
        value: function deleteProject(project_gid, callback) {
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling deleteProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/projects/{project_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the duplicateProject operation.
         * @callback moduleapi/ProjectsApi~duplicateProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/JobResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Duplicate a project
         * Creates and returns a job that will asynchronously handle the duplication.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {module:model/ProjectGidDuplicateBody} opts.body Describes the duplicate&#x27;s name and the elements that will be duplicated.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~duplicateProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "duplicateProject",
        value: function duplicateProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling duplicateProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _JobResponseData.JobResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/duplicate", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProject operation.
         * @callback moduleapi/ProjectsApi~getProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a project
         * Returns the complete project record for a single project.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProject",
        value: function getProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling getProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/projects/{project_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjects operation.
         * @callback moduleapi/ProjectsApi~getProjectsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple projects
         * Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. *Note: This endpoint may timeout for large domains. Try filtering by team!*
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {String} opts.workspace The workspace or organization to filter projects on.
         * @param {String} opts.team The team to filter projects on.
         * @param {Boolean} opts.archived Only return projects whose &#x60;archived&#x60; field takes on the value of this parameter.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjects",
        value: function getProjects(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "workspace": opts["workspace"],
            "team": opts["team"],
            "archived": opts["archived"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseArray.ProjectResponseArray;
          return this.apiClient.callApi("/projects", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectsForTask operation.
         * @callback moduleapi/ProjectsApi~getProjectsForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get projects a task is in
         * Returns a compact representation of all of the projects the task is in.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~getProjectsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectsForTask",
        value: function getProjectsForTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getProjectsForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseArray.ProjectResponseArray;
          return this.apiClient.callApi("/tasks/{task_gid}/projects", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectsForTeam operation.
         * @callback moduleapi/ProjectsApi~getProjectsForTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a team&#x27;s projects
         * Returns the compact project records for all projects in the team.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Boolean} opts.archived Only return projects whose &#x60;archived&#x60; field takes on the value of this parameter.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~getProjectsForTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectsForTeam",
        value: function getProjectsForTeam(team_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling getProjectsForTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "archived": opts["archived"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseArray.ProjectResponseArray;
          return this.apiClient.callApi("/teams/{team_gid}/projects", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getProjectsForWorkspace operation.
         * @callback moduleapi/ProjectsApi~getProjectsForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get all projects in a workspace
         * Returns the compact project records for all projects in the workspace. *Note: This endpoint may timeout for large domains. Prefer the &#x60;/teams/{team_gid}/projects&#x60; endpoint.*
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Boolean} opts.archived Only return projects whose &#x60;archived&#x60; field takes on the value of this parameter.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~getProjectsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getProjectsForWorkspace",
        value: function getProjectsForWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getProjectsForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "archived": opts["archived"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseArray.ProjectResponseArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/projects", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTaskCountsForProject operation.
         * @callback moduleapi/ProjectsApi~getTaskCountsForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskCountResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get task count of a project
         * Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/inputoutput-options) using &#x60;opt_fields&#x60; to get any information from this endpoint.  This endpoint has an additional [rate limit](/docs/rate-limits) and each field counts especially high against our [cost limits](/docs/rate-limits#cost-limits).  Milestones are just tasks, so they are included in the &#x60;num_tasks&#x60;, &#x60;num_incomplete_tasks&#x60;, and &#x60;num_completed_tasks&#x60; counts.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~getTaskCountsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTaskCountsForProject",
        value: function getTaskCountsForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling getTaskCountsForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskCountResponseData.TaskCountResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/task_counts", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the projectSaveAsTemplate operation.
         * @callback moduleapi/ProjectsApi~projectSaveAsTemplateCallback
         * @param {String} error Error message, if any.
         * @param {module:model/JobResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a project template from a project
         * Creates and returns a job that will asynchronously handle the project template creation. Note that while the resulting project template can be accessed with the API, it won&#x27;t be visible in the Asana UI until Project Templates 2.0 is launched in the app. See more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).
         * @param {module:model/ProjectGidSaveAsTemplateBody} body Describes the inputs used for creating a project template, such as the resulting project template&#x27;s name, which team it should be created in.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~projectSaveAsTemplateCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "projectSaveAsTemplate",
        value: function projectSaveAsTemplate(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling projectSaveAsTemplate");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling projectSaveAsTemplate");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _JobResponseData.JobResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/saveAsTemplate", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeCustomFieldSettingForProject operation.
         * @callback moduleapi/ProjectsApi~removeCustomFieldSettingForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a custom field from a project
         * Removes a custom field setting from a project.
         * @param {module:model/ProjectGidRemoveCustomFieldSettingBody} body Information about the custom field setting being removed.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {module:api/ProjectsApi~removeCustomFieldSettingForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeCustomFieldSettingForProject",
        value: function removeCustomFieldSettingForProject(body, project_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeCustomFieldSettingForProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling removeCustomFieldSettingForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/removeCustomFieldSetting", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeFollowersForProject operation.
         * @callback moduleapi/ProjectsApi~removeFollowersForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove followers from a project
         * Removes the specified list of users from following the project, this will not affect project membership status. Returns the updated project record.
         * @param {module:model/ProjectGidRemoveFollowersBody} body Information about the followers being removed.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~removeFollowersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeFollowersForProject",
        value: function removeFollowersForProject(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeFollowersForProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling removeFollowersForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/removeFollowers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeMembersForProject operation.
         * @callback moduleapi/ProjectsApi~removeMembersForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove users from a project
         * Removes the specified list of users from members of the project. Returns the updated project record.
         * @param {module:model/ProjectGidRemoveMembersBody} body Information about the members being removed.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~removeMembersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeMembersForProject",
        value: function removeMembersForProject(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeMembersForProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling removeMembersForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/removeMembers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateProject operation.
         * @callback moduleapi/ProjectsApi~updateProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/ProjectResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a project
         * A specific, existing project can be updated by making a PUT request on the URL for that project. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated project record.
         * @param {module:model/ProjectsProjectGidBody} body The updated fields for the project.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/ProjectsApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateProject",
        value: function updateProject(body, project_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateProject");
          }
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling updateProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _ProjectResponseData.ProjectResponseData;
          return this.apiClient.callApi("/projects/{project_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return ProjectsApi2;
    }();
    exports.ProjectsApi = ProjectsApi;
  }
});

// node_modules/asana/dist/api/RulesApi.js
var require_RulesApi = __commonJS({
  "node_modules/asana/dist/api/RulesApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RulesApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _RuleTriggerGidRunBody = require_RuleTriggerGidRunBody();
    var _RuleTriggerResponseData = require_RuleTriggerResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var RulesApi = /* @__PURE__ */ function() {
      function RulesApi2(apiClient) {
        _classCallCheck(this, RulesApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(RulesApi2, [{
        key: "triggerRule",
        value: function triggerRule(body, rule_trigger_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling triggerRule");
          }
          if (rule_trigger_gid === void 0 || rule_trigger_gid === null) {
            throw new Error("Missing the required parameter 'rule_trigger_gid' when calling triggerRule");
          }
          var pathParams = {
            "rule_trigger_gid": rule_trigger_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _RuleTriggerResponseData.RuleTriggerResponseData;
          return this.apiClient.callApi("/rule_triggers/{rule_trigger_gid}/run", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return RulesApi2;
    }();
    exports.RulesApi = RulesApi;
  }
});

// node_modules/asana/dist/api/SectionsApi.js
var require_SectionsApi = __commonJS({
  "node_modules/asana/dist/api/SectionsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SectionsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _ProjectGidSectionsBody = require_ProjectGidSectionsBody();
    var _SectionGidAddTaskBody = require_SectionGidAddTaskBody();
    var _SectionResponseArray = require_SectionResponseArray();
    var _SectionResponseData = require_SectionResponseData();
    var _SectionsInsertBody = require_SectionsInsertBody();
    var _SectionsSectionGidBody = require_SectionsSectionGidBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var SectionsApi = /* @__PURE__ */ function() {
      function SectionsApi2(apiClient) {
        _classCallCheck(this, SectionsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(SectionsApi2, [{
        key: "addTaskForSection",
        value: function addTaskForSection(section_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (section_gid === void 0 || section_gid === null) {
            throw new Error("Missing the required parameter 'section_gid' when calling addTaskForSection");
          }
          var pathParams = {
            "section_gid": section_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/sections/{section_gid}/addTask", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createSectionForProject operation.
         * @callback moduleapi/SectionsApi~createSectionForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/SectionResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a section in a project
         * Creates a new section in a project. Returns the full record of the newly created section.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {module:model/ProjectGidSectionsBody} opts.body The section to create.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/SectionsApi~createSectionForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createSectionForProject",
        value: function createSectionForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling createSectionForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _SectionResponseData.SectionResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/sections", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteSection operation.
         * @callback moduleapi/SectionsApi~deleteSectionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a section
         * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
         * @param {String} section_gid The globally unique identifier for the section.
         * @param {module:api/SectionsApi~deleteSectionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteSection",
        value: function deleteSection(section_gid, callback) {
          var postBody = null;
          if (section_gid === void 0 || section_gid === null) {
            throw new Error("Missing the required parameter 'section_gid' when calling deleteSection");
          }
          var pathParams = {
            "section_gid": section_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/sections/{section_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getSection operation.
         * @callback moduleapi/SectionsApi~getSectionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/SectionResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a section
         * Returns the complete record for a single section.
         * @param {String} section_gid The globally unique identifier for the section.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/SectionsApi~getSectionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getSection",
        value: function getSection(section_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (section_gid === void 0 || section_gid === null) {
            throw new Error("Missing the required parameter 'section_gid' when calling getSection");
          }
          var pathParams = {
            "section_gid": section_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _SectionResponseData.SectionResponseData;
          return this.apiClient.callApi("/sections/{section_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getSectionsForProject operation.
         * @callback moduleapi/SectionsApi~getSectionsForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/SectionResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get sections in a project
         * Returns the compact records for all sections in the specified project.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/SectionsApi~getSectionsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getSectionsForProject",
        value: function getSectionsForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling getSectionsForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _SectionResponseArray.SectionResponseArray;
          return this.apiClient.callApi("/projects/{project_gid}/sections", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the insertSectionForProject operation.
         * @callback moduleapi/SectionsApi~insertSectionForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Move or Insert sections
         * Move sections relative to each other. One of &#x60;before_section&#x60; or &#x60;after_section&#x60; is required.  Sections cannot be moved between projects.  Returns an empty data block.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {module:model/SectionsInsertBody} opts.body The section&#x27;s move action.
         * @param {module:api/SectionsApi~insertSectionForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "insertSectionForProject",
        value: function insertSectionForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling insertSectionForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/projects/{project_gid}/sections/insert", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateSection operation.
         * @callback moduleapi/SectionsApi~updateSectionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/SectionResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a section
         * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the &#x60;name&#x60; field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
         * @param {String} section_gid The globally unique identifier for the section.
         * @param {Object} opts Optional parameters
         * @param {module:model/SectionsSectionGidBody} opts.body The section to create.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/SectionsApi~updateSectionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateSection",
        value: function updateSection(section_gid, opts, callback) {
          opts = opts || {};
          var postBody = opts["body"];
          if (section_gid === void 0 || section_gid === null) {
            throw new Error("Missing the required parameter 'section_gid' when calling updateSection");
          }
          var pathParams = {
            "section_gid": section_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _SectionResponseData.SectionResponseData;
          return this.apiClient.callApi("/sections/{section_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return SectionsApi2;
    }();
    exports.SectionsApi = SectionsApi;
  }
});

// node_modules/asana/dist/api/StatusUpdatesApi.js
var require_StatusUpdatesApi = __commonJS({
  "node_modules/asana/dist/api/StatusUpdatesApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StatusUpdatesApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _StatusUpdateResponseArray = require_StatusUpdateResponseArray();
    var _StatusUpdateResponseData = require_StatusUpdateResponseData();
    var _StatusUpdatesBody = require_StatusUpdatesBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StatusUpdatesApi = /* @__PURE__ */ function() {
      function StatusUpdatesApi2(apiClient) {
        _classCallCheck(this, StatusUpdatesApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(StatusUpdatesApi2, [{
        key: "createStatusForObject",
        value: function createStatusForObject(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createStatusForObject");
          }
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _StatusUpdateResponseData.StatusUpdateResponseData;
          return this.apiClient.callApi("/status_updates", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteStatus operation.
         * @callback moduleapi/StatusUpdatesApi~deleteStatusCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a status update
         * Deletes a specific, existing status update.  Returns an empty data record.
         * @param {String} status_update_gid The status update to get.
         * @param {module:api/StatusUpdatesApi~deleteStatusCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteStatus",
        value: function deleteStatus(status_update_gid, callback) {
          var postBody = null;
          if (status_update_gid === void 0 || status_update_gid === null) {
            throw new Error("Missing the required parameter 'status_update_gid' when calling deleteStatus");
          }
          var pathParams = {
            "status_update_gid": status_update_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/status_updates/{status_update_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getStatus operation.
         * @callback moduleapi/StatusUpdatesApi~getStatusCallback
         * @param {String} error Error message, if any.
         * @param {module:model/StatusUpdateResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a status update
         * Returns the complete record for a single status update.
         * @param {String} status_update_gid The status update to get.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/StatusUpdatesApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getStatus",
        value: function getStatus(status_update_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (status_update_gid === void 0 || status_update_gid === null) {
            throw new Error("Missing the required parameter 'status_update_gid' when calling getStatus");
          }
          var pathParams = {
            "status_update_gid": status_update_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _StatusUpdateResponseData.StatusUpdateResponseData;
          return this.apiClient.callApi("/status_updates/{status_update_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getStatusesForObject operation.
         * @callback moduleapi/StatusUpdatesApi~getStatusesForObjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/StatusUpdateResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get status updates from an object
         * Returns the compact status update records for all updates on the object.
         * @param {String} parent Globally unique identifier for object to fetch statuses from. Must be a GID for a project, portfolio, or goal.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Date} opts.created_since Only return statuses that have been created since the given time.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/StatusUpdatesApi~getStatusesForObjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getStatusesForObject",
        value: function getStatusesForObject(parent, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (parent === void 0 || parent === null) {
            throw new Error("Missing the required parameter 'parent' when calling getStatusesForObject");
          }
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "parent": parent,
            "created_since": opts["created_since"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _StatusUpdateResponseArray.StatusUpdateResponseArray;
          return this.apiClient.callApi("/status_updates", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return StatusUpdatesApi2;
    }();
    exports.StatusUpdatesApi = StatusUpdatesApi;
  }
});

// node_modules/asana/dist/api/StoriesApi.js
var require_StoriesApi = __commonJS({
  "node_modules/asana/dist/api/StoriesApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StoriesApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _StoriesStoryGidBody = require_StoriesStoryGidBody();
    var _StoryResponseArray = require_StoryResponseArray();
    var _StoryResponseData = require_StoryResponseData();
    var _TaskGidStoriesBody = require_TaskGidStoriesBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var StoriesApi = /* @__PURE__ */ function() {
      function StoriesApi2(apiClient) {
        _classCallCheck(this, StoriesApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(StoriesApi2, [{
        key: "createStoryForTask",
        value: function createStoryForTask(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createStoryForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling createStoryForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _StoryResponseData.StoryResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/stories", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteStory operation.
         * @callback moduleapi/StoriesApi~deleteStoryCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a story
         * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
         * @param {String} story_gid Globally unique identifier for the story.
         * @param {module:api/StoriesApi~deleteStoryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteStory",
        value: function deleteStory(story_gid, callback) {
          var postBody = null;
          if (story_gid === void 0 || story_gid === null) {
            throw new Error("Missing the required parameter 'story_gid' when calling deleteStory");
          }
          var pathParams = {
            "story_gid": story_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/stories/{story_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getStoriesForTask operation.
         * @callback moduleapi/StoriesApi~getStoriesForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/StoryResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get stories from a task
         * Returns the compact records for all stories on the task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/StoriesApi~getStoriesForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getStoriesForTask",
        value: function getStoriesForTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getStoriesForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _StoryResponseArray.StoryResponseArray;
          return this.apiClient.callApi("/tasks/{task_gid}/stories", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getStory operation.
         * @callback moduleapi/StoriesApi~getStoryCallback
         * @param {String} error Error message, if any.
         * @param {module:model/StoryResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a story
         * Returns the full record for a single story.
         * @param {String} story_gid Globally unique identifier for the story.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/StoriesApi~getStoryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getStory",
        value: function getStory(story_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (story_gid === void 0 || story_gid === null) {
            throw new Error("Missing the required parameter 'story_gid' when calling getStory");
          }
          var pathParams = {
            "story_gid": story_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _StoryResponseData.StoryResponseData;
          return this.apiClient.callApi("/stories/{story_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateStory operation.
         * @callback moduleapi/StoriesApi~updateStoryCallback
         * @param {String} error Error message, if any.
         * @param {module:model/StoryResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a story
         * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of &#x60;text&#x60; and &#x60;html_text&#x60; can be specified.
         * @param {module:model/StoriesStoryGidBody} body The comment story to update.
         * @param {String} story_gid Globally unique identifier for the story.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/StoriesApi~updateStoryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateStory",
        value: function updateStory(body, story_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateStory");
          }
          if (story_gid === void 0 || story_gid === null) {
            throw new Error("Missing the required parameter 'story_gid' when calling updateStory");
          }
          var pathParams = {
            "story_gid": story_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _StoryResponseData.StoryResponseData;
          return this.apiClient.callApi("/stories/{story_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return StoriesApi2;
    }();
    exports.StoriesApi = StoriesApi;
  }
});

// node_modules/asana/dist/api/TagsApi.js
var require_TagsApi = __commonJS({
  "node_modules/asana/dist/api/TagsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TagsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _TagResponseArray = require_TagResponseArray();
    var _TagResponseData = require_TagResponseData();
    var _TagsBody = require_TagsBody();
    var _WorkspaceGidTagsBody = require_WorkspaceGidTagsBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TagsApi = /* @__PURE__ */ function() {
      function TagsApi2(apiClient) {
        _classCallCheck(this, TagsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(TagsApi2, [{
        key: "createTag",
        value: function createTag(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createTag");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TagResponseData.TagResponseData;
          return this.apiClient.callApi("/tags", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createTagForWorkspace operation.
         * @callback moduleapi/TagsApi~createTagForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TagResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a tag in a workspace
         * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
         * @param {module:model/WorkspaceGidTagsBody} body The tag to create.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TagsApi~createTagForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createTagForWorkspace",
        value: function createTagForWorkspace(body, workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createTagForWorkspace");
          }
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling createTagForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TagResponseData.TagResponseData;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/tags", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteTag operation.
         * @callback moduleapi/TagsApi~deleteTagCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a tag
         * A specific, existing tag can be deleted by making a DELETE request on the URL for that tag.  Returns an empty data record.
         * @param {String} tag_gid Globally unique identifier for the tag.
         * @param {module:api/TagsApi~deleteTagCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteTag",
        value: function deleteTag(tag_gid, callback) {
          var postBody = null;
          if (tag_gid === void 0 || tag_gid === null) {
            throw new Error("Missing the required parameter 'tag_gid' when calling deleteTag");
          }
          var pathParams = {
            "tag_gid": tag_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tags/{tag_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTag operation.
         * @callback moduleapi/TagsApi~getTagCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TagResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a tag
         * Returns the complete tag record for a single tag.
         * @param {String} tag_gid Globally unique identifier for the tag.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TagsApi~getTagCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTag",
        value: function getTag(tag_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (tag_gid === void 0 || tag_gid === null) {
            throw new Error("Missing the required parameter 'tag_gid' when calling getTag");
          }
          var pathParams = {
            "tag_gid": tag_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TagResponseData.TagResponseData;
          return this.apiClient.callApi("/tags/{tag_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTags operation.
         * @callback moduleapi/TagsApi~getTagsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TagResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple tags
         * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {String} opts.workspace The workspace to filter tags on.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TagsApi~getTagsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTags",
        value: function getTags(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "workspace": opts["workspace"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TagResponseArray.TagResponseArray;
          return this.apiClient.callApi("/tags", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTagsForTask operation.
         * @callback moduleapi/TagsApi~getTagsForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TagResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a task&#x27;s tags
         * Get a compact representation of all of the tags the task has.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TagsApi~getTagsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTagsForTask",
        value: function getTagsForTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getTagsForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TagResponseArray.TagResponseArray;
          return this.apiClient.callApi("/tasks/{task_gid}/tags", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTagsForWorkspace operation.
         * @callback moduleapi/TagsApi~getTagsForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TagResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get tags in a workspace
         * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TagsApi~getTagsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTagsForWorkspace",
        value: function getTagsForWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getTagsForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TagResponseArray.TagResponseArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/tags", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateTag operation.
         * @callback moduleapi/TagsApi~updateTagCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TagResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a tag
         * Updates the properties of a tag. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the tag.  Returns the complete updated tag record.
         * @param {String} tag_gid Globally unique identifier for the tag.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TagsApi~updateTagCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateTag",
        value: function updateTag(tag_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (tag_gid === void 0 || tag_gid === null) {
            throw new Error("Missing the required parameter 'tag_gid' when calling updateTag");
          }
          var pathParams = {
            "tag_gid": tag_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TagResponseData.TagResponseData;
          return this.apiClient.callApi("/tags/{tag_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return TagsApi2;
    }();
    exports.TagsApi = TagsApi;
  }
});

// node_modules/asana/dist/api/TasksApi.js
var require_TasksApi = __commonJS({
  "node_modules/asana/dist/api/TasksApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TasksApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _JobResponseData = require_JobResponseData();
    var _TaskGidAddDependenciesBody = require_TaskGidAddDependenciesBody();
    var _TaskGidAddDependentsBody = require_TaskGidAddDependentsBody();
    var _TaskGidAddFollowersBody = require_TaskGidAddFollowersBody();
    var _TaskGidAddProjectBody = require_TaskGidAddProjectBody();
    var _TaskGidAddTagBody = require_TaskGidAddTagBody();
    var _TaskGidDuplicateBody = require_TaskGidDuplicateBody();
    var _TaskGidRemoveDependenciesBody = require_TaskGidRemoveDependenciesBody();
    var _TaskGidRemoveDependentsBody = require_TaskGidRemoveDependentsBody();
    var _TaskGidRemoveFollowersBody = require_TaskGidRemoveFollowersBody();
    var _TaskGidRemoveProjectBody = require_TaskGidRemoveProjectBody();
    var _TaskGidRemoveTagBody = require_TaskGidRemoveTagBody();
    var _TaskGidSetParentBody = require_TaskGidSetParentBody();
    var _TaskGidSubtasksBody = require_TaskGidSubtasksBody();
    var _TaskResponseArray = require_TaskResponseArray();
    var _TaskResponseData = require_TaskResponseData();
    var _TasksBody = require_TasksBody();
    var _TasksTaskGidBody = require_TasksTaskGidBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TasksApi = /* @__PURE__ */ function() {
      function TasksApi2(apiClient) {
        _classCallCheck(this, TasksApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(TasksApi2, [{
        key: "addDependenciesForTask",
        value: function addDependenciesForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addDependenciesForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling addDependenciesForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/addDependencies", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addDependentsForTask operation.
         * @callback moduleapi/TasksApi~addDependentsForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Set dependents for a task
         * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
         * @param {module:model/TaskGidAddDependentsBody} body The list of tasks to add as dependents.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~addDependentsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addDependentsForTask",
        value: function addDependentsForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addDependentsForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling addDependentsForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/addDependents", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addFollowersForTask operation.
         * @callback moduleapi/TasksApi~addFollowersForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Add followers to a task
         * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
         * @param {module:model/TaskGidAddFollowersBody} body The followers to add to the task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~addFollowersForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addFollowersForTask",
        value: function addFollowersForTask(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addFollowersForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling addFollowersForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseData.TaskResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/addFollowers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addProjectForTask operation.
         * @callback moduleapi/TasksApi~addProjectForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Add a project to a task
         * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  &#x60;addProject&#x60; can also be used to reorder a task within a project or section that already contains it.  At most one of &#x60;insert_before&#x60;, &#x60;insert_after&#x60;, or &#x60;section&#x60; should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify &#x60;insert_before&#x60; or &#x60;insert_after&#x60; and a task within the section to anchor the position of this task.  Returns an empty data block.
         * @param {module:model/TaskGidAddProjectBody} body The project to add the task to.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~addProjectForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addProjectForTask",
        value: function addProjectForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addProjectForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling addProjectForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/addProject", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the addTagForTask operation.
         * @callback moduleapi/TasksApi~addTagForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Add a tag to a task
         * Adds a tag to a task. Returns an empty data block.
         * @param {module:model/TaskGidAddTagBody} body The tag to add to the task.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~addTagForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "addTagForTask",
        value: function addTagForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addTagForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling addTagForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/addTag", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createSubtaskForTask operation.
         * @callback moduleapi/TasksApi~createSubtaskForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a subtask
         * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
         * @param {module:model/TaskGidSubtasksBody} body The new subtask to create.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~createSubtaskForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createSubtaskForTask",
        value: function createSubtaskForTask(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createSubtaskForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling createSubtaskForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseData.TaskResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/subtasks", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createTask operation.
         * @callback moduleapi/TasksApi~createTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a task
         * Creating a new task is as easy as POSTing to the &#x60;/tasks&#x60; endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify &#x60;projects&#x60; or a &#x60;parent&#x60; task instead.
         * @param {module:model/TasksBody} body The task to create.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createTask",
        value: function createTask(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createTask");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseData.TaskResponseData;
          return this.apiClient.callApi("/tasks", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteTask operation.
         * @callback moduleapi/TasksApi~deleteTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a task
         * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteTask",
        value: function deleteTask(task_gid, callback) {
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling deleteTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the duplicateTask operation.
         * @callback moduleapi/TasksApi~duplicateTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/JobResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Duplicate a task
         * Creates and returns a job that will asynchronously handle the duplication.
         * @param {module:model/TaskGidDuplicateBody} body Describes the duplicate&#x27;s name and the fields that will be duplicated.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~duplicateTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "duplicateTask",
        value: function duplicateTask(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling duplicateTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling duplicateTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _JobResponseData.JobResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/duplicate", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getDependenciesForTask operation.
         * @callback moduleapi/TasksApi~getDependenciesForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get dependencies from a task
         * Returns the compact representations of all of the dependencies of a task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getDependenciesForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getDependenciesForTask",
        value: function getDependenciesForTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getDependenciesForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/tasks/{task_gid}/dependencies", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getDependentsForTask operation.
         * @callback moduleapi/TasksApi~getDependentsForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get dependents from a task
         * Returns the compact representations of all of the dependents of a task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getDependentsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getDependentsForTask",
        value: function getDependentsForTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getDependentsForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/tasks/{task_gid}/dependents", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getSubtasksForTask operation.
         * @callback moduleapi/TasksApi~getSubtasksForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get subtasks from a task
         * Returns a compact representation of all of the subtasks of a task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getSubtasksForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getSubtasksForTask",
        value: function getSubtasksForTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getSubtasksForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/tasks/{task_gid}/subtasks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTask operation.
         * @callback moduleapi/TasksApi~getTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a task
         * Returns the complete task record for a single task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTask",
        value: function getTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseData.TaskResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTasks operation.
         * @callback moduleapi/TasksApi~getTasksCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple tasks
         * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a &#x60;project&#x60; or &#x60;tag&#x60; if you do not specify &#x60;assignee&#x60; and &#x60;workspace&#x60;.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/reference/searchtasksforworkspace).
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {String} opts.assignee The assignee to filter tasks on. If searching for unassigned tasks, assignee.any &#x3D; null can be specified. *Note: If you specify &#x60;assignee&#x60;, you must also specify the &#x60;workspace&#x60; to filter on.*
         * @param {String} opts.project The project to filter tasks on.
         * @param {String} opts.section The section to filter tasks on.
         * @param {String} opts.workspace The workspace to filter tasks on. *Note: If you specify &#x60;workspace&#x60;, you must also specify the &#x60;assignee&#x60; to filter on.*
         * @param {Date} opts.completed_since Only return tasks that are either incomplete or that have been completed since this time.
         * @param {Date} opts.modified_since Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTasks",
        value: function getTasks(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "assignee": opts["assignee"],
            "project": opts["project"],
            "section": opts["section"],
            "workspace": opts["workspace"],
            "completed_since": opts["completed_since"],
            "modified_since": opts["modified_since"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/tasks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTasksForProject operation.
         * @callback moduleapi/TasksApi~getTasksForProjectCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get tasks from a project
         * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
         * @param {String} project_gid Globally unique identifier for the project.
         * @param {Object} opts Optional parameters
         * @param {String} opts.completed_since Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getTasksForProjectCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTasksForProject",
        value: function getTasksForProject(project_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (project_gid === void 0 || project_gid === null) {
            throw new Error("Missing the required parameter 'project_gid' when calling getTasksForProject");
          }
          var pathParams = {
            "project_gid": project_gid
          };
          var queryParams = {
            "completed_since": opts["completed_since"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/projects/{project_gid}/tasks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTasksForSection operation.
         * @callback moduleapi/TasksApi~getTasksForSectionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get tasks from a section
         * *Board view only*: Returns the compact section records for all tasks within the given section.
         * @param {String} section_gid The globally unique identifier for the section.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getTasksForSectionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTasksForSection",
        value: function getTasksForSection(section_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (section_gid === void 0 || section_gid === null) {
            throw new Error("Missing the required parameter 'section_gid' when calling getTasksForSection");
          }
          var pathParams = {
            "section_gid": section_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/sections/{section_gid}/tasks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTasksForTag operation.
         * @callback moduleapi/TasksApi~getTasksForTagCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get tasks from a tag
         * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
         * @param {String} tag_gid Globally unique identifier for the tag.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getTasksForTagCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTasksForTag",
        value: function getTasksForTag(tag_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (tag_gid === void 0 || tag_gid === null) {
            throw new Error("Missing the required parameter 'tag_gid' when calling getTasksForTag");
          }
          var pathParams = {
            "tag_gid": tag_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/tags/{tag_gid}/tasks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTasksForUserTaskList operation.
         * @callback moduleapi/TasksApi~getTasksForUserTaskListCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get tasks from a user task list
         * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting &#x60;completed_since&#x3D;now&#x60; will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
         * @param {String} user_task_list_gid Globally unique identifier for the user task list.
         * @param {Object} opts Optional parameters
         * @param {String} opts.completed_since Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~getTasksForUserTaskListCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTasksForUserTaskList",
        value: function getTasksForUserTaskList(user_task_list_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_task_list_gid === void 0 || user_task_list_gid === null) {
            throw new Error("Missing the required parameter 'user_task_list_gid' when calling getTasksForUserTaskList");
          }
          var pathParams = {
            "user_task_list_gid": user_task_list_gid
          };
          var queryParams = {
            "completed_since": opts["completed_since"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/user_task_lists/{user_task_list_gid}/tasks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeDependenciesForTask operation.
         * @callback moduleapi/TasksApi~removeDependenciesForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Unlink dependencies from a task
         * Unlinks a set of dependencies from this task.
         * @param {module:model/TaskGidRemoveDependenciesBody} body The list of tasks to unlink as dependencies.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~removeDependenciesForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeDependenciesForTask",
        value: function removeDependenciesForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeDependenciesForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling removeDependenciesForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/removeDependencies", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeDependentsForTask operation.
         * @callback moduleapi/TasksApi~removeDependentsForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Unlink dependents from a task
         * Unlinks a set of dependents from this task.
         * @param {module:model/TaskGidRemoveDependentsBody} body The list of tasks to remove as dependents.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~removeDependentsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeDependentsForTask",
        value: function removeDependentsForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeDependentsForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling removeDependentsForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/removeDependents", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeFollowerForTask operation.
         * @callback moduleapi/TasksApi~removeFollowerForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove followers from a task
         * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
         * @param {module:model/TaskGidRemoveFollowersBody} body The followers to remove from the task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~removeFollowerForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeFollowerForTask",
        value: function removeFollowerForTask(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeFollowerForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling removeFollowerForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseData.TaskResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/removeFollowers", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeProjectForTask operation.
         * @callback moduleapi/TasksApi~removeProjectForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a project from a task
         * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
         * @param {module:model/TaskGidRemoveProjectBody} body The project to remove the task from.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~removeProjectForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeProjectForTask",
        value: function removeProjectForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeProjectForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling removeProjectForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/removeProject", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeTagForTask operation.
         * @callback moduleapi/TasksApi~removeTagForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a tag from a task
         * Removes a tag from a task. Returns an empty data block.
         * @param {module:model/TaskGidRemoveTagBody} body The tag to remove from the task.
         * @param {String} task_gid The task to operate on.
         * @param {module:api/TasksApi~removeTagForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeTagForTask",
        value: function removeTagForTask(body, task_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeTagForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling removeTagForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/removeTag", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the searchTasksForWorkspace operation.
         * @callback moduleapi/TasksApi~searchTasksForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Search tasks in a workspace
         * To mirror the functionality of the Asana web app&#x27;s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product&#x27;s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a &#x60;402 Payment Required&#x60; error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the &#x60;limit&#x60; query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a &#x60;429 Too Many Requests&#x60; response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be &#x60;custom_fields.12345.is_set&#x3D;true&#x60;. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: &#x60;custom_fields.12345.value&#x3D;67890&#x60;.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify &#x60;projects.any&#x60; and &#x60;sections.any&#x60;, you will receive tasks for the project **and** tasks for the section. If you&#x27;re looking for only tasks in a section, omit the &#x60;projects.any&#x60; from the request.*
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {String} opts.text Performs full-text search on both task name and description
         * @param {module:model/String} opts.resource_subtype Filters results by the task&#x27;s resource_subtype (default to <.>)
         * @param {String} opts.assignee_any Comma-separated list of user identifiers
         * @param {String} opts.assignee_not Comma-separated list of user identifiers
         * @param {String} opts.portfolios_any Comma-separated list of portfolio IDs
         * @param {String} opts.projects_any Comma-separated list of project IDs
         * @param {String} opts.projects_not Comma-separated list of project IDs
         * @param {String} opts.projects_all Comma-separated list of project IDs
         * @param {String} opts.sections_any Comma-separated list of section or column IDs
         * @param {String} opts.sections_not Comma-separated list of section or column IDs
         * @param {String} opts.sections_all Comma-separated list of section or column IDs
         * @param {String} opts.tags_any Comma-separated list of tag IDs
         * @param {String} opts.tags_not Comma-separated list of tag IDs
         * @param {String} opts.tags_all Comma-separated list of tag IDs
         * @param {String} opts.teams_any Comma-separated list of team IDs
         * @param {String} opts.followers_not Comma-separated list of user identifiers
         * @param {String} opts.created_by_any Comma-separated list of user identifiers
         * @param {String} opts.created_by_not Comma-separated list of user identifiers
         * @param {String} opts.assigned_by_any Comma-separated list of user identifiers
         * @param {String} opts.assigned_by_not Comma-separated list of user identifiers
         * @param {String} opts.liked_by_not Comma-separated list of user identifiers
         * @param {String} opts.commented_on_by_not Comma-separated list of user identifiers
         * @param {Date} opts.due_on_before ISO 8601 date string
         * @param {Date} opts.due_on_after ISO 8601 date string
         * @param {Date} opts.due_on ISO 8601 date string or &#x60;null&#x60;
         * @param {Date} opts.due_at_before ISO 8601 datetime string
         * @param {Date} opts.due_at_after ISO 8601 datetime string
         * @param {Date} opts.start_on_before ISO 8601 date string
         * @param {Date} opts.start_on_after ISO 8601 date string
         * @param {Date} opts.start_on ISO 8601 date string or &#x60;null&#x60;
         * @param {Date} opts.created_on_before ISO 8601 date string
         * @param {Date} opts.created_on_after ISO 8601 date string
         * @param {Date} opts.created_on ISO 8601 date string or &#x60;null&#x60;
         * @param {Date} opts.created_at_before ISO 8601 datetime string
         * @param {Date} opts.created_at_after ISO 8601 datetime string
         * @param {Date} opts.completed_on_before ISO 8601 date string
         * @param {Date} opts.completed_on_after ISO 8601 date string
         * @param {Date} opts.completed_on ISO 8601 date string or &#x60;null&#x60;
         * @param {Date} opts.completed_at_before ISO 8601 datetime string
         * @param {Date} opts.completed_at_after ISO 8601 datetime string
         * @param {Date} opts.modified_on_before ISO 8601 date string
         * @param {Date} opts.modified_on_after ISO 8601 date string
         * @param {Date} opts.modified_on ISO 8601 date string or &#x60;null&#x60;
         * @param {Date} opts.modified_at_before ISO 8601 datetime string
         * @param {Date} opts.modified_at_after ISO 8601 datetime string
         * @param {Boolean} opts.is_blocking Filter to incomplete tasks with dependents
         * @param {Boolean} opts.is_blocked Filter to tasks with incomplete dependencies
         * @param {Boolean} opts.has_attachment Filter to tasks with attachments
         * @param {Boolean} opts.completed Filter to completed tasks
         * @param {Boolean} opts.is_subtask Filter to subtasks
         * @param {module:model/String} opts.sort_by One of &#x60;due_date&#x60;, &#x60;created_at&#x60;, &#x60;completed_at&#x60;, &#x60;likes&#x60;, or &#x60;modified_at&#x60;, defaults to &#x60;modified_at&#x60; (default to <.>)
         * @param {Boolean} opts.sort_ascending Default &#x60;false&#x60; (default to <.>)
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~searchTasksForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "searchTasksForWorkspace",
        value: function searchTasksForWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling searchTasksForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "text": opts["text"],
            "resource_subtype": opts["resource_subtype"],
            "assignee.any": opts["assignee_any"],
            "assignee.not": opts["assignee_not"],
            "portfolios.any": opts["portfolios_any"],
            "projects.any": opts["projects_any"],
            "projects.not": opts["projects_not"],
            "projects.all": opts["projects_all"],
            "sections.any": opts["sections_any"],
            "sections.not": opts["sections_not"],
            "sections.all": opts["sections_all"],
            "tags.any": opts["tags_any"],
            "tags.not": opts["tags_not"],
            "tags.all": opts["tags_all"],
            "teams.any": opts["teams_any"],
            "followers.not": opts["followers_not"],
            "created_by.any": opts["created_by_any"],
            "created_by.not": opts["created_by_not"],
            "assigned_by.any": opts["assigned_by_any"],
            "assigned_by.not": opts["assigned_by_not"],
            "liked_by.not": opts["liked_by_not"],
            "commented_on_by.not": opts["commented_on_by_not"],
            "due_on.before": opts["due_on_before"],
            "due_on.after": opts["due_on_after"],
            "due_on": opts["due_on"],
            "due_at.before": opts["due_at_before"],
            "due_at.after": opts["due_at_after"],
            "start_on.before": opts["start_on_before"],
            "start_on.after": opts["start_on_after"],
            "start_on": opts["start_on"],
            "created_on.before": opts["created_on_before"],
            "created_on.after": opts["created_on_after"],
            "created_on": opts["created_on"],
            "created_at.before": opts["created_at_before"],
            "created_at.after": opts["created_at_after"],
            "completed_on.before": opts["completed_on_before"],
            "completed_on.after": opts["completed_on_after"],
            "completed_on": opts["completed_on"],
            "completed_at.before": opts["completed_at_before"],
            "completed_at.after": opts["completed_at_after"],
            "modified_on.before": opts["modified_on_before"],
            "modified_on.after": opts["modified_on_after"],
            "modified_on": opts["modified_on"],
            "modified_at.before": opts["modified_at_before"],
            "modified_at.after": opts["modified_at_after"],
            "is_blocking": opts["is_blocking"],
            "is_blocked": opts["is_blocked"],
            "has_attachment": opts["has_attachment"],
            "completed": opts["completed"],
            "is_subtask": opts["is_subtask"],
            "sort_by": opts["sort_by"],
            "sort_ascending": opts["sort_ascending"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseArray.TaskResponseArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/tasks/search", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the setParentForTask operation.
         * @callback moduleapi/TasksApi~setParentForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Set the parent of a task
         * parent, or no parent task at all. Returns an empty data block. When using &#x60;insert_before&#x60; and &#x60;insert_after&#x60;, at most one of those two options can be specified, and they must already be subtasks of the parent.
         * @param {module:model/TaskGidSetParentBody} body The new parent of the subtask.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~setParentForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "setParentForTask",
        value: function setParentForTask(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling setParentForTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling setParentForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseData.TaskResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}/setParent", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateTask operation.
         * @callback moduleapi/TasksApi~updateTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TaskResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a task
         * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
         * @param {module:model/TasksTaskGidBody} body The task to update.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TasksApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateTask",
        value: function updateTask(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateTask");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling updateTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TaskResponseData.TaskResponseData;
          return this.apiClient.callApi("/tasks/{task_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return TasksApi2;
    }();
    exports.TasksApi = TasksApi;
  }
});

// node_modules/asana/dist/api/TeamMembershipsApi.js
var require_TeamMembershipsApi = __commonJS({
  "node_modules/asana/dist/api/TeamMembershipsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamMembershipsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _TeamMembershipResponseArray = require_TeamMembershipResponseArray();
    var _TeamMembershipResponseData = require_TeamMembershipResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamMembershipsApi = /* @__PURE__ */ function() {
      function TeamMembershipsApi2(apiClient) {
        _classCallCheck(this, TeamMembershipsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(TeamMembershipsApi2, [{
        key: "getTeamMembership",
        value: function getTeamMembership(team_membership_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (team_membership_gid === void 0 || team_membership_gid === null) {
            throw new Error("Missing the required parameter 'team_membership_gid' when calling getTeamMembership");
          }
          var pathParams = {
            "team_membership_gid": team_membership_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamMembershipResponseData.TeamMembershipResponseData;
          return this.apiClient.callApi("/team_memberships/{team_membership_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTeamMemberships operation.
         * @callback moduleapi/TeamMembershipsApi~getTeamMembershipsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamMembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get team memberships
         * Returns compact team membership records.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {String} opts.team Globally unique identifier for the team.
         * @param {String} opts.user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter.
         * @param {String} opts.workspace Globally unique identifier for the workspace. This parameter must be used with the user parameter.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamMembershipsApi~getTeamMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTeamMemberships",
        value: function getTeamMemberships(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "team": opts["team"],
            "user": opts["user"],
            "workspace": opts["workspace"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamMembershipResponseArray.TeamMembershipResponseArray;
          return this.apiClient.callApi("/team_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTeamMembershipsForTeam operation.
         * @callback moduleapi/TeamMembershipsApi~getTeamMembershipsForTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamMembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get memberships from a team
         * Returns the compact team memberships for the team.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamMembershipsApi~getTeamMembershipsForTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTeamMembershipsForTeam",
        value: function getTeamMembershipsForTeam(team_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling getTeamMembershipsForTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamMembershipResponseArray.TeamMembershipResponseArray;
          return this.apiClient.callApi("/teams/{team_gid}/team_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTeamMembershipsForUser operation.
         * @callback moduleapi/TeamMembershipsApi~getTeamMembershipsForUserCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamMembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get memberships from a user
         * Returns the compact team membership records for the user.
         * @param {String} user_gid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {String} workspace Globally unique identifier for the workspace.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamMembershipsApi~getTeamMembershipsForUserCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTeamMembershipsForUser",
        value: function getTeamMembershipsForUser(user_gid, workspace, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_gid === void 0 || user_gid === null) {
            throw new Error("Missing the required parameter 'user_gid' when calling getTeamMembershipsForUser");
          }
          if (workspace === void 0 || workspace === null) {
            throw new Error("Missing the required parameter 'workspace' when calling getTeamMembershipsForUser");
          }
          var pathParams = {
            "user_gid": user_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "workspace": workspace,
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamMembershipResponseArray.TeamMembershipResponseArray;
          return this.apiClient.callApi("/users/{user_gid}/team_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return TeamMembershipsApi2;
    }();
    exports.TeamMembershipsApi = TeamMembershipsApi;
  }
});

// node_modules/asana/dist/api/TeamsApi.js
var require_TeamsApi = __commonJS({
  "node_modules/asana/dist/api/TeamsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TeamsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _TeamGidAddUserBody = require_TeamGidAddUserBody();
    var _TeamGidRemoveUserBody = require_TeamGidRemoveUserBody();
    var _TeamMembershipResponseData = require_TeamMembershipResponseData();
    var _TeamResponseArray = require_TeamResponseArray();
    var _TeamResponseData = require_TeamResponseData();
    var _TeamsBody = require_TeamsBody();
    var _TeamsTeamGidBody = require_TeamsTeamGidBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TeamsApi = /* @__PURE__ */ function() {
      function TeamsApi2(apiClient) {
        _classCallCheck(this, TeamsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(TeamsApi2, [{
        key: "addUserForTeam",
        value: function addUserForTeam(body, team_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addUserForTeam");
          }
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling addUserForTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamMembershipResponseData.TeamMembershipResponseData;
          return this.apiClient.callApi("/teams/{team_gid}/addUser", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the createTeam operation.
         * @callback moduleapi/TeamsApi~createTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Create a team
         * Creates a team within the current workspace.
         * @param {module:model/TeamsBody} body The team to create.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamsApi~createTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "createTeam",
        value: function createTeam(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createTeam");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamResponseData.TeamResponseData;
          return this.apiClient.callApi("/teams", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTeam operation.
         * @callback moduleapi/TeamsApi~getTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a team
         * Returns the full record for a single team.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamsApi~getTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTeam",
        value: function getTeam(team_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling getTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamResponseData.TeamResponseData;
          return this.apiClient.callApi("/teams/{team_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTeamsForUser operation.
         * @callback moduleapi/TeamsApi~getTeamsForUserCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get teams for a user
         * Returns the compact records for all teams to which the given user is assigned.
         * @param {String} user_gid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {String} organization The workspace or organization to filter teams on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamsApi~getTeamsForUserCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTeamsForUser",
        value: function getTeamsForUser(user_gid, organization, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_gid === void 0 || user_gid === null) {
            throw new Error("Missing the required parameter 'user_gid' when calling getTeamsForUser");
          }
          if (organization === void 0 || organization === null) {
            throw new Error("Missing the required parameter 'organization' when calling getTeamsForUser");
          }
          var pathParams = {
            "user_gid": user_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "organization": organization,
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamResponseArray.TeamResponseArray;
          return this.apiClient.callApi("/users/{user_gid}/teams", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTeamsForWorkspace operation.
         * @callback moduleapi/TeamsApi~getTeamsForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get teams in a workspace
         * Returns the compact records for all teams in the workspace visible to the authorized user.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamsApi~getTeamsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTeamsForWorkspace",
        value: function getTeamsForWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getTeamsForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamResponseArray.TeamResponseArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/teams", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeUserForTeam operation.
         * @callback moduleapi/TeamsApi~removeUserForTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a user from a team
         * The user making this call must be a member of the team in order to remove themselves or others.
         * @param {module:model/TeamGidRemoveUserBody} body The user to remove from the team.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {module:api/TeamsApi~removeUserForTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeUserForTeam",
        value: function removeUserForTeam(body, team_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeUserForTeam");
          }
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling removeUserForTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/teams/{team_gid}/removeUser", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateTeam operation.
         * @callback moduleapi/TeamsApi~updateTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TeamResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a team
         * Updates a team within the current workspace.
         * @param {module:model/TeamsTeamGidBody} body The team to update.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TeamsApi~updateTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateTeam",
        value: function updateTeam(body, team_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateTeam");
          }
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling updateTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TeamResponseData.TeamResponseData;
          return this.apiClient.callApi("/teams/{team_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return TeamsApi2;
    }();
    exports.TeamsApi = TeamsApi;
  }
});

// node_modules/asana/dist/api/TimePeriodsApi.js
var require_TimePeriodsApi = __commonJS({
  "node_modules/asana/dist/api/TimePeriodsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimePeriodsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _TimePeriodResponseArray = require_TimePeriodResponseArray();
    var _TimePeriodResponseData = require_TimePeriodResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimePeriodsApi = /* @__PURE__ */ function() {
      function TimePeriodsApi2(apiClient) {
        _classCallCheck(this, TimePeriodsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(TimePeriodsApi2, [{
        key: "getTimePeriod",
        value: function getTimePeriod(time_period_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (time_period_gid === void 0 || time_period_gid === null) {
            throw new Error("Missing the required parameter 'time_period_gid' when calling getTimePeriod");
          }
          var pathParams = {
            "time_period_gid": time_period_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TimePeriodResponseData.TimePeriodResponseData;
          return this.apiClient.callApi("/time_periods/{time_period_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTimePeriods operation.
         * @callback moduleapi/TimePeriodsApi~getTimePeriodsCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TimePeriodResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get time periods
         * Returns compact time period records.
         * @param {String} workspace Globally unique identifier for the workspace.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Date} opts.start_on ISO 8601 date string
         * @param {Date} opts.end_on ISO 8601 date string
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TimePeriodsApi~getTimePeriodsCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTimePeriods",
        value: function getTimePeriods(workspace, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace === void 0 || workspace === null) {
            throw new Error("Missing the required parameter 'workspace' when calling getTimePeriods");
          }
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "start_on": opts["start_on"],
            "end_on": opts["end_on"],
            "workspace": workspace,
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TimePeriodResponseArray.TimePeriodResponseArray;
          return this.apiClient.callApi("/time_periods", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return TimePeriodsApi2;
    }();
    exports.TimePeriodsApi = TimePeriodsApi;
  }
});

// node_modules/asana/dist/api/TimeTrackingEntriesApi.js
var require_TimeTrackingEntriesApi = __commonJS({
  "node_modules/asana/dist/api/TimeTrackingEntriesApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TimeTrackingEntriesApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _TaskGidTimeTrackingEntriesBody = require_TaskGidTimeTrackingEntriesBody();
    var _TimeTrackingEntriesTimeTrackingEntryGidBody = require_TimeTrackingEntriesTimeTrackingEntryGidBody();
    var _TimeTrackingEntryBaseData = require_TimeTrackingEntryBaseData();
    var _TimeTrackingEntryCompactArray = require_TimeTrackingEntryCompactArray();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TimeTrackingEntriesApi = /* @__PURE__ */ function() {
      function TimeTrackingEntriesApi2(apiClient) {
        _classCallCheck(this, TimeTrackingEntriesApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(TimeTrackingEntriesApi2, [{
        key: "createTimeTrackingEntry",
        value: function createTimeTrackingEntry(body, task_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createTimeTrackingEntry");
          }
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling createTimeTrackingEntry");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TimeTrackingEntryBaseData.TimeTrackingEntryBaseData;
          return this.apiClient.callApi("/tasks/{task_gid}/time_tracking_entries", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteTimeTrackingEntry operation.
         * @callback moduleapi/TimeTrackingEntriesApi~deleteTimeTrackingEntryCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a time tracking entry
         * A specific, existing time tracking entry can be deleted by making a &#x60;DELETE&#x60; request on the URL for that time tracking entry.  Returns an empty data record.
         * @param {String} time_tracking_entry_gid Globally unique identifier for the time tracking entry.
         * @param {module:api/TimeTrackingEntriesApi~deleteTimeTrackingEntryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteTimeTrackingEntry",
        value: function deleteTimeTrackingEntry(time_tracking_entry_gid, callback) {
          var postBody = null;
          if (time_tracking_entry_gid === void 0 || time_tracking_entry_gid === null) {
            throw new Error("Missing the required parameter 'time_tracking_entry_gid' when calling deleteTimeTrackingEntry");
          }
          var pathParams = {
            "time_tracking_entry_gid": time_tracking_entry_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/time_tracking_entries/{time_tracking_entry_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTimeTrackingEntriesForTask operation.
         * @callback moduleapi/TimeTrackingEntriesApi~getTimeTrackingEntriesForTaskCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TimeTrackingEntryCompactArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get time tracking entries for a task
         * Returns time tracking entries for a given task.
         * @param {String} task_gid The task to operate on.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TimeTrackingEntriesApi~getTimeTrackingEntriesForTaskCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTimeTrackingEntriesForTask",
        value: function getTimeTrackingEntriesForTask(task_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (task_gid === void 0 || task_gid === null) {
            throw new Error("Missing the required parameter 'task_gid' when calling getTimeTrackingEntriesForTask");
          }
          var pathParams = {
            "task_gid": task_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TimeTrackingEntryCompactArray.TimeTrackingEntryCompactArray;
          return this.apiClient.callApi("/tasks/{task_gid}/time_tracking_entries", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getTimeTrackingEntry operation.
         * @callback moduleapi/TimeTrackingEntriesApi~getTimeTrackingEntryCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TimeTrackingEntryBaseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a time tracking entry
         * Returns the complete time tracking entry record for a single time tracking entry.
         * @param {String} time_tracking_entry_gid Globally unique identifier for the time tracking entry.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TimeTrackingEntriesApi~getTimeTrackingEntryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getTimeTrackingEntry",
        value: function getTimeTrackingEntry(time_tracking_entry_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (time_tracking_entry_gid === void 0 || time_tracking_entry_gid === null) {
            throw new Error("Missing the required parameter 'time_tracking_entry_gid' when calling getTimeTrackingEntry");
          }
          var pathParams = {
            "time_tracking_entry_gid": time_tracking_entry_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TimeTrackingEntryBaseData.TimeTrackingEntryBaseData;
          return this.apiClient.callApi("/time_tracking_entries/{time_tracking_entry_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateTimeTrackingEntry operation.
         * @callback moduleapi/TimeTrackingEntriesApi~updateTimeTrackingEntryCallback
         * @param {String} error Error message, if any.
         * @param {module:model/TimeTrackingEntryBaseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a time tracking entry
         * A specific, existing time tracking entry can be updated by making a &#x60;PUT&#x60; request on the URL for that time tracking entry. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated time tracking entry record.
         * @param {module:model/TimeTrackingEntriesTimeTrackingEntryGidBody} body The updated fields for the time tracking entry.
         * @param {String} time_tracking_entry_gid Globally unique identifier for the time tracking entry.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/TimeTrackingEntriesApi~updateTimeTrackingEntryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateTimeTrackingEntry",
        value: function updateTimeTrackingEntry(body, time_tracking_entry_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateTimeTrackingEntry");
          }
          if (time_tracking_entry_gid === void 0 || time_tracking_entry_gid === null) {
            throw new Error("Missing the required parameter 'time_tracking_entry_gid' when calling updateTimeTrackingEntry");
          }
          var pathParams = {
            "time_tracking_entry_gid": time_tracking_entry_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _TimeTrackingEntryBaseData.TimeTrackingEntryBaseData;
          return this.apiClient.callApi("/time_tracking_entries/{time_tracking_entry_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return TimeTrackingEntriesApi2;
    }();
    exports.TimeTrackingEntriesApi = TimeTrackingEntriesApi;
  }
});

// node_modules/asana/dist/api/TypeaheadApi.js
var require_TypeaheadApi = __commonJS({
  "node_modules/asana/dist/api/TypeaheadApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TypeaheadApi = void 0;
    var _ApiClient = require_ApiClient();
    var _AsanaNamedResourceArray = require_AsanaNamedResourceArray();
    var _ErrorResponse = require_ErrorResponse();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var TypeaheadApi = /* @__PURE__ */ function() {
      function TypeaheadApi2(apiClient) {
        _classCallCheck(this, TypeaheadApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(TypeaheadApi2, [{
        key: "typeaheadForWorkspace",
        value: function typeaheadForWorkspace(workspace_gid, resource_type, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling typeaheadForWorkspace");
          }
          if (resource_type === void 0 || resource_type === null) {
            throw new Error("Missing the required parameter 'resource_type' when calling typeaheadForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "resource_type": resource_type,
            "type": opts["type"],
            "query": opts["query"],
            "count": opts["count"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _AsanaNamedResourceArray.AsanaNamedResourceArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/typeahead", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return TypeaheadApi2;
    }();
    exports.TypeaheadApi = TypeaheadApi;
  }
});

// node_modules/asana/dist/api/UserTaskListsApi.js
var require_UserTaskListsApi = __commonJS({
  "node_modules/asana/dist/api/UserTaskListsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UserTaskListsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _UserTaskListResponseData = require_UserTaskListResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UserTaskListsApi = /* @__PURE__ */ function() {
      function UserTaskListsApi2(apiClient) {
        _classCallCheck(this, UserTaskListsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(UserTaskListsApi2, [{
        key: "getUserTaskList",
        value: function getUserTaskList(user_task_list_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_task_list_gid === void 0 || user_task_list_gid === null) {
            throw new Error("Missing the required parameter 'user_task_list_gid' when calling getUserTaskList");
          }
          var pathParams = {
            "user_task_list_gid": user_task_list_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _UserTaskListResponseData.UserTaskListResponseData;
          return this.apiClient.callApi("/user_task_lists/{user_task_list_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getUserTaskListForUser operation.
         * @callback moduleapi/UserTaskListsApi~getUserTaskListForUserCallback
         * @param {String} error Error message, if any.
         * @param {module:model/UserTaskListResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a user&#x27;s task list
         * Returns the full record for a user&#x27;s task list.
         * @param {String} user_gid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {String} workspace The workspace in which to get the user task list.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/UserTaskListsApi~getUserTaskListForUserCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getUserTaskListForUser",
        value: function getUserTaskListForUser(user_gid, workspace, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_gid === void 0 || user_gid === null) {
            throw new Error("Missing the required parameter 'user_gid' when calling getUserTaskListForUser");
          }
          if (workspace === void 0 || workspace === null) {
            throw new Error("Missing the required parameter 'workspace' when calling getUserTaskListForUser");
          }
          var pathParams = {
            "user_gid": user_gid
          };
          var queryParams = {
            "workspace": workspace,
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _UserTaskListResponseData.UserTaskListResponseData;
          return this.apiClient.callApi("/users/{user_gid}/user_task_list", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return UserTaskListsApi2;
    }();
    exports.UserTaskListsApi = UserTaskListsApi;
  }
});

// node_modules/asana/dist/api/UsersApi.js
var require_UsersApi = __commonJS({
  "node_modules/asana/dist/api/UsersApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UsersApi = void 0;
    var _ApiClient = require_ApiClient();
    var _AsanaNamedResourceArray = require_AsanaNamedResourceArray();
    var _ErrorResponse = require_ErrorResponse();
    var _UserResponseArray = require_UserResponseArray();
    var _UserResponseData = require_UserResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var UsersApi = /* @__PURE__ */ function() {
      function UsersApi2(apiClient) {
        _classCallCheck(this, UsersApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(UsersApi2, [{
        key: "getFavoritesForUser",
        value: function getFavoritesForUser(user_gid, resource_type, workspace, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_gid === void 0 || user_gid === null) {
            throw new Error("Missing the required parameter 'user_gid' when calling getFavoritesForUser");
          }
          if (resource_type === void 0 || resource_type === null) {
            throw new Error("Missing the required parameter 'resource_type' when calling getFavoritesForUser");
          }
          if (workspace === void 0 || workspace === null) {
            throw new Error("Missing the required parameter 'workspace' when calling getFavoritesForUser");
          }
          var pathParams = {
            "user_gid": user_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "resource_type": resource_type,
            "workspace": workspace,
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _AsanaNamedResourceArray.AsanaNamedResourceArray;
          return this.apiClient.callApi("/users/{user_gid}/favorites", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getUser operation.
         * @callback moduleapi/UsersApi~getUserCallback
         * @param {String} error Error message, if any.
         * @param {module:model/UserResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a user
         * Returns the full user record for the single user with the provided ID.
         * @param {String} user_gid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getUser",
        value: function getUser(user_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_gid === void 0 || user_gid === null) {
            throw new Error("Missing the required parameter 'user_gid' when calling getUser");
          }
          var pathParams = {
            "user_gid": user_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _UserResponseData.UserResponseData;
          return this.apiClient.callApi("/users/{user_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getUsers operation.
         * @callback moduleapi/UsersApi~getUsersCallback
         * @param {String} error Error message, if any.
         * @param {module:model/UserResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple users
         * Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
         * @param {Object} opts Optional parameters
         * @param {String} opts.workspace The workspace or organization ID to filter users on.
         * @param {String} opts.team The team ID to filter users on.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/UsersApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getUsers",
        value: function getUsers(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "workspace": opts["workspace"],
            "team": opts["team"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _UserResponseArray.UserResponseArray;
          return this.apiClient.callApi("/users", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getUsersForTeam operation.
         * @callback moduleapi/UsersApi~getUsersForTeamCallback
         * @param {String} error Error message, if any.
         * @param {module:model/UserResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get users in a team
         * Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
         * @param {String} team_gid Globally unique identifier for the team.
         * @param {Object} opts Optional parameters
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/UsersApi~getUsersForTeamCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getUsersForTeam",
        value: function getUsersForTeam(team_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (team_gid === void 0 || team_gid === null) {
            throw new Error("Missing the required parameter 'team_gid' when calling getUsersForTeam");
          }
          var pathParams = {
            "team_gid": team_gid
          };
          var queryParams = {
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _UserResponseArray.UserResponseArray;
          return this.apiClient.callApi("/teams/{team_gid}/users", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getUsersForWorkspace operation.
         * @callback moduleapi/UsersApi~getUsersForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/UserResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get users in a workspace or organization
         * Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/UsersApi~getUsersForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getUsersForWorkspace",
        value: function getUsersForWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getUsersForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _UserResponseArray.UserResponseArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/users", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return UsersApi2;
    }();
    exports.UsersApi = UsersApi;
  }
});

// node_modules/asana/dist/api/WebhooksApi.js
var require_WebhooksApi = __commonJS({
  "node_modules/asana/dist/api/WebhooksApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebhooksApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _WebhookResponseArray = require_WebhookResponseArray();
    var _WebhookResponseData = require_WebhookResponseData();
    var _WebhooksBody = require_WebhooksBody();
    var _WebhooksWebhookGidBody = require_WebhooksWebhookGidBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WebhooksApi = /* @__PURE__ */ function() {
      function WebhooksApi2(apiClient) {
        _classCallCheck(this, WebhooksApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(WebhooksApi2, [{
        key: "createWebhook",
        value: function createWebhook(body, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createWebhook");
          }
          var pathParams = {};
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WebhookResponseData.WebhookResponseData;
          return this.apiClient.callApi("/webhooks", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the deleteWebhook operation.
         * @callback moduleapi/WebhooksApi~deleteWebhookCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Delete a webhook
         * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
         * @param {String} webhook_gid Globally unique identifier for the webhook.
         * @param {module:api/WebhooksApi~deleteWebhookCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "deleteWebhook",
        value: function deleteWebhook(webhook_gid, callback) {
          var postBody = null;
          if (webhook_gid === void 0 || webhook_gid === null) {
            throw new Error("Missing the required parameter 'webhook_gid' when calling deleteWebhook");
          }
          var pathParams = {
            "webhook_gid": webhook_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/webhooks/{webhook_gid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getWebhook operation.
         * @callback moduleapi/WebhooksApi~getWebhookCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WebhookResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a webhook
         * Returns the full record for the given webhook.
         * @param {String} webhook_gid Globally unique identifier for the webhook.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WebhooksApi~getWebhookCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getWebhook",
        value: function getWebhook(webhook_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (webhook_gid === void 0 || webhook_gid === null) {
            throw new Error("Missing the required parameter 'webhook_gid' when calling getWebhook");
          }
          var pathParams = {
            "webhook_gid": webhook_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WebhookResponseData.WebhookResponseData;
          return this.apiClient.callApi("/webhooks/{webhook_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getWebhooks operation.
         * @callback moduleapi/WebhooksApi~getWebhooksCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WebhookResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple webhooks
         * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
         * @param {String} workspace The workspace to query for webhooks in.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {String} opts.resource Only return webhooks for the given resource.
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WebhooksApi~getWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getWebhooks",
        value: function getWebhooks(workspace, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace === void 0 || workspace === null) {
            throw new Error("Missing the required parameter 'workspace' when calling getWebhooks");
          }
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "workspace": workspace,
            "resource": opts["resource"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WebhookResponseArray.WebhookResponseArray;
          return this.apiClient.callApi("/webhooks", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateWebhook operation.
         * @callback moduleapi/WebhooksApi~updateWebhookCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WebhookResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a webhook
         * An existing webhook&#x27;s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook&#x27;s previous &#x60;filters&#x60; array will be completely overwritten by the &#x60;filters&#x60; sent in the PUT request.
         * @param {module:model/WebhooksWebhookGidBody} body The updated filters for the webhook.
         * @param {String} webhook_gid Globally unique identifier for the webhook.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WebhooksApi~updateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateWebhook",
        value: function updateWebhook(body, webhook_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateWebhook");
          }
          if (webhook_gid === void 0 || webhook_gid === null) {
            throw new Error("Missing the required parameter 'webhook_gid' when calling updateWebhook");
          }
          var pathParams = {
            "webhook_gid": webhook_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WebhookResponseData.WebhookResponseData;
          return this.apiClient.callApi("/webhooks/{webhook_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return WebhooksApi2;
    }();
    exports.WebhooksApi = WebhooksApi;
  }
});

// node_modules/asana/dist/api/WorkspaceMembershipsApi.js
var require_WorkspaceMembershipsApi = __commonJS({
  "node_modules/asana/dist/api/WorkspaceMembershipsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspaceMembershipsApi = void 0;
    var _ApiClient = require_ApiClient();
    var _ErrorResponse = require_ErrorResponse();
    var _WorkspaceMembershipResponseArray = require_WorkspaceMembershipResponseArray();
    var _WorkspaceMembershipResponseData = require_WorkspaceMembershipResponseData();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspaceMembershipsApi = /* @__PURE__ */ function() {
      function WorkspaceMembershipsApi2(apiClient) {
        _classCallCheck(this, WorkspaceMembershipsApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(WorkspaceMembershipsApi2, [{
        key: "getWorkspaceMembership",
        value: function getWorkspaceMembership(workspace_membership_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_membership_gid === void 0 || workspace_membership_gid === null) {
            throw new Error("Missing the required parameter 'workspace_membership_gid' when calling getWorkspaceMembership");
          }
          var pathParams = {
            "workspace_membership_gid": workspace_membership_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WorkspaceMembershipResponseData.WorkspaceMembershipResponseData;
          return this.apiClient.callApi("/workspace_memberships/{workspace_membership_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getWorkspaceMembershipsForUser operation.
         * @callback moduleapi/WorkspaceMembershipsApi~getWorkspaceMembershipsForUserCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WorkspaceMembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get workspace memberships for a user
         * Returns the compact workspace membership records for the user.
         * @param {String} user_gid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WorkspaceMembershipsApi~getWorkspaceMembershipsForUserCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getWorkspaceMembershipsForUser",
        value: function getWorkspaceMembershipsForUser(user_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (user_gid === void 0 || user_gid === null) {
            throw new Error("Missing the required parameter 'user_gid' when calling getWorkspaceMembershipsForUser");
          }
          var pathParams = {
            "user_gid": user_gid
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WorkspaceMembershipResponseArray.WorkspaceMembershipResponseArray;
          return this.apiClient.callApi("/users/{user_gid}/workspace_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getWorkspaceMembershipsForWorkspace operation.
         * @callback moduleapi/WorkspaceMembershipsApi~getWorkspaceMembershipsForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WorkspaceMembershipResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get the workspace memberships for a workspace
         * Returns the compact workspace membership records for the workspace.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {String} opts.user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WorkspaceMembershipsApi~getWorkspaceMembershipsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getWorkspaceMembershipsForWorkspace",
        value: function getWorkspaceMembershipsForWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getWorkspaceMembershipsForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "user": opts["user"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WorkspaceMembershipResponseArray.WorkspaceMembershipResponseArray;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/workspace_memberships", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return WorkspaceMembershipsApi2;
    }();
    exports.WorkspaceMembershipsApi = WorkspaceMembershipsApi;
  }
});

// node_modules/asana/dist/api/WorkspacesApi.js
var require_WorkspacesApi = __commonJS({
  "node_modules/asana/dist/api/WorkspacesApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WorkspacesApi = void 0;
    var _ApiClient = require_ApiClient();
    var _EmptyResponseData = require_EmptyResponseData();
    var _ErrorResponse = require_ErrorResponse();
    var _UserBaseResponseData = require_UserBaseResponseData();
    var _WorkspaceGidAddUserBody = require_WorkspaceGidAddUserBody();
    var _WorkspaceGidRemoveUserBody = require_WorkspaceGidRemoveUserBody();
    var _WorkspaceResponseArray = require_WorkspaceResponseArray();
    var _WorkspaceResponseData = require_WorkspaceResponseData();
    var _WorkspacesWorkspaceGidBody = require_WorkspacesWorkspaceGidBody();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var WorkspacesApi = /* @__PURE__ */ function() {
      function WorkspacesApi2(apiClient) {
        _classCallCheck(this, WorkspacesApi2);
        this.apiClient = apiClient || _ApiClient.ApiClient.instance;
      }
      _createClass(WorkspacesApi2, [{
        key: "addUserForWorkspace",
        value: function addUserForWorkspace(body, workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addUserForWorkspace");
          }
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling addUserForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _UserBaseResponseData.UserBaseResponseData;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/addUser", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getWorkspace operation.
         * @callback moduleapi/WorkspacesApi~getWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WorkspaceResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get a workspace
         * Returns the full workspace record for a single workspace.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WorkspacesApi~getWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getWorkspace",
        value: function getWorkspace(workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling getWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WorkspaceResponseData.WorkspaceResponseData;
          return this.apiClient.callApi("/workspaces/{workspace_gid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the getWorkspaces operation.
         * @callback moduleapi/WorkspacesApi~getWorkspacesCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WorkspaceResponseArray{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Get multiple workspaces
         * Returns the compact records for all workspaces visible to the authorized user.
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WorkspacesApi~getWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "getWorkspaces",
        value: function getWorkspaces(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WorkspaceResponseArray.WorkspaceResponseArray;
          return this.apiClient.callApi("/workspaces", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the removeUserForWorkspace operation.
         * @callback moduleapi/WorkspacesApi~removeUserForWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/EmptyResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Remove a user from a workspace or organization
         * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
         * @param {module:model/WorkspaceGidRemoveUserBody} body The user to remove from the workspace.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {module:api/WorkspacesApi~removeUserForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "removeUserForWorkspace",
        value: function removeUserForWorkspace(body, workspace_gid, callback) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeUserForWorkspace");
          }
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling removeUserForWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _EmptyResponseData.EmptyResponseData;
          return this.apiClient.callApi("/workspaces/{workspace_gid}/removeUser", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
        /**
         * Callback function to receive the result of the updateWorkspace operation.
         * @callback moduleapi/WorkspacesApi~updateWorkspaceCallback
         * @param {String} error Error message, if any.
         * @param {module:model/WorkspaceResponseData{ data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */
        /**
         * Update a workspace
         * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
         * @param {module:model/WorkspacesWorkspaceGidBody} body The workspace object with all updated properties.
         * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
         * @param {Object} opts Optional parameters
         * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {module:api/WorkspacesApi~updateWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
         */
      }, {
        key: "updateWorkspace",
        value: function updateWorkspace(body, workspace_gid, opts, callback) {
          opts = opts || {};
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updateWorkspace");
          }
          if (workspace_gid === void 0 || workspace_gid === null) {
            throw new Error("Missing the required parameter 'workspace_gid' when calling updateWorkspace");
          }
          var pathParams = {
            "workspace_gid": workspace_gid
          };
          var queryParams = {
            "opt_fields": this.apiClient.buildCollectionParam(opts["opt_fields"], "csv")
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json; charset=UTF-8"];
          var accepts = ["application/json; charset=UTF-8"];
          var returnType = _WorkspaceResponseData.WorkspaceResponseData;
          return this.apiClient.callApi("/workspaces/{workspace_gid}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
        }
      }]);
      return WorkspacesApi2;
    }();
    exports.WorkspacesApi = WorkspacesApi;
  }
});

// node_modules/asana/dist/index.js
var require_dist = __commonJS({
  "node_modules/asana/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AddCustomFieldSettingRequest", {
      enumerable: true,
      get: function get() {
        return _AddCustomFieldSettingRequest.AddCustomFieldSettingRequest;
      }
    });
    Object.defineProperty(exports, "AddFollowersRequest", {
      enumerable: true,
      get: function get() {
        return _AddFollowersRequest.AddFollowersRequest;
      }
    });
    Object.defineProperty(exports, "AddMembersRequest", {
      enumerable: true,
      get: function get() {
        return _AddMembersRequest.AddMembersRequest;
      }
    });
    Object.defineProperty(exports, "AllOfProjectResponseOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfProjectResponseOwner.AllOfProjectResponseOwner;
      }
    });
    Object.defineProperty(exports, "AllOfProjectTemplateBaseOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfProjectTemplateBaseOwner.AllOfProjectTemplateBaseOwner;
      }
    });
    Object.defineProperty(exports, "AllOfProjectTemplateResponseOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfProjectTemplateResponseOwner.AllOfProjectTemplateResponseOwner;
      }
    });
    Object.defineProperty(exports, "AllOfStoryResponseNewDateValue", {
      enumerable: true,
      get: function get() {
        return _AllOfStoryResponseNewDateValue.AllOfStoryResponseNewDateValue;
      }
    });
    Object.defineProperty(exports, "AllOfStoryResponseOldDateValue", {
      enumerable: true,
      get: function get() {
        return _AllOfStoryResponseOldDateValue.AllOfStoryResponseOldDateValue;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListBaseOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListBaseOwner.AllOfUserTaskListBaseOwner;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListBaseWorkspace", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListBaseWorkspace.AllOfUserTaskListBaseWorkspace;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListCompactOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListCompactOwner.AllOfUserTaskListCompactOwner;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListCompactWorkspace", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListCompactWorkspace.AllOfUserTaskListCompactWorkspace;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListRequestOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListRequestOwner.AllOfUserTaskListRequestOwner;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListRequestWorkspace", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListRequestWorkspace.AllOfUserTaskListRequestWorkspace;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListResponseOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListResponseOwner.AllOfUserTaskListResponseOwner;
      }
    });
    Object.defineProperty(exports, "AllOfUserTaskListResponseWorkspace", {
      enumerable: true,
      get: function get() {
        return _AllOfUserTaskListResponseWorkspace.AllOfUserTaskListResponseWorkspace;
      }
    });
    Object.defineProperty(exports, "AllOfWorkspaceMembershipResponseUserTaskListOwner", {
      enumerable: true,
      get: function get() {
        return _AllOfWorkspaceMembershipResponseUserTaskListOwner.AllOfWorkspaceMembershipResponseUserTaskListOwner;
      }
    });
    Object.defineProperty(exports, "AllOfWorkspaceMembershipResponseUserTaskListWorkspace", {
      enumerable: true,
      get: function get() {
        return _AllOfWorkspaceMembershipResponseUserTaskListWorkspace.AllOfWorkspaceMembershipResponseUserTaskListWorkspace;
      }
    });
    Object.defineProperty(exports, "ApiClient", {
      enumerable: true,
      get: function get() {
        return _ApiClient.ApiClient;
      }
    });
    Object.defineProperty(exports, "AsanaNamedResource", {
      enumerable: true,
      get: function get() {
        return _AsanaNamedResource.AsanaNamedResource;
      }
    });
    Object.defineProperty(exports, "AsanaNamedResourceArray", {
      enumerable: true,
      get: function get() {
        return _AsanaNamedResourceArray.AsanaNamedResourceArray;
      }
    });
    Object.defineProperty(exports, "AsanaResource", {
      enumerable: true,
      get: function get() {
        return _AsanaResource.AsanaResource;
      }
    });
    Object.defineProperty(exports, "AttachmentBase", {
      enumerable: true,
      get: function get() {
        return _AttachmentBase.AttachmentBase;
      }
    });
    Object.defineProperty(exports, "AttachmentCompact", {
      enumerable: true,
      get: function get() {
        return _AttachmentCompact.AttachmentCompact;
      }
    });
    Object.defineProperty(exports, "AttachmentRequest", {
      enumerable: true,
      get: function get() {
        return _AttachmentRequest.AttachmentRequest;
      }
    });
    Object.defineProperty(exports, "AttachmentResponse", {
      enumerable: true,
      get: function get() {
        return _AttachmentResponse.AttachmentResponse;
      }
    });
    Object.defineProperty(exports, "AttachmentResponseArray", {
      enumerable: true,
      get: function get() {
        return _AttachmentResponseArray.AttachmentResponseArray;
      }
    });
    Object.defineProperty(exports, "AttachmentResponseData", {
      enumerable: true,
      get: function get() {
        return _AttachmentResponseData.AttachmentResponseData;
      }
    });
    Object.defineProperty(exports, "AttachmentResponseParent", {
      enumerable: true,
      get: function get() {
        return _AttachmentResponseParent.AttachmentResponseParent;
      }
    });
    Object.defineProperty(exports, "AttachmentResponseParentCreatedBy", {
      enumerable: true,
      get: function get() {
        return _AttachmentResponseParentCreatedBy.AttachmentResponseParentCreatedBy;
      }
    });
    Object.defineProperty(exports, "AttachmentsApi", {
      enumerable: true,
      get: function get() {
        return _AttachmentsApi.AttachmentsApi;
      }
    });
    Object.defineProperty(exports, "AuditLogAPIApi", {
      enumerable: true,
      get: function get() {
        return _AuditLogAPIApi.AuditLogAPIApi;
      }
    });
    Object.defineProperty(exports, "AuditLogEvent", {
      enumerable: true,
      get: function get() {
        return _AuditLogEvent.AuditLogEvent;
      }
    });
    Object.defineProperty(exports, "AuditLogEventActor", {
      enumerable: true,
      get: function get() {
        return _AuditLogEventActor.AuditLogEventActor;
      }
    });
    Object.defineProperty(exports, "AuditLogEventArray", {
      enumerable: true,
      get: function get() {
        return _AuditLogEventArray.AuditLogEventArray;
      }
    });
    Object.defineProperty(exports, "AuditLogEventContext", {
      enumerable: true,
      get: function get() {
        return _AuditLogEventContext.AuditLogEventContext;
      }
    });
    Object.defineProperty(exports, "AuditLogEventDetails", {
      enumerable: true,
      get: function get() {
        return _AuditLogEventDetails.AuditLogEventDetails;
      }
    });
    Object.defineProperty(exports, "AuditLogEventResource", {
      enumerable: true,
      get: function get() {
        return _AuditLogEventResource.AuditLogEventResource;
      }
    });
    Object.defineProperty(exports, "BatchAPIApi", {
      enumerable: true,
      get: function get() {
        return _BatchAPIApi.BatchAPIApi;
      }
    });
    Object.defineProperty(exports, "BatchBody", {
      enumerable: true,
      get: function get() {
        return _BatchBody.BatchBody;
      }
    });
    Object.defineProperty(exports, "BatchRequest", {
      enumerable: true,
      get: function get() {
        return _BatchRequest.BatchRequest;
      }
    });
    Object.defineProperty(exports, "BatchRequestAction", {
      enumerable: true,
      get: function get() {
        return _BatchRequestAction.BatchRequestAction;
      }
    });
    Object.defineProperty(exports, "BatchRequestActions", {
      enumerable: true,
      get: function get() {
        return _BatchRequestActions.BatchRequestActions;
      }
    });
    Object.defineProperty(exports, "BatchRequestOptions", {
      enumerable: true,
      get: function get() {
        return _BatchRequestOptions.BatchRequestOptions;
      }
    });
    Object.defineProperty(exports, "BatchResponse", {
      enumerable: true,
      get: function get() {
        return _BatchResponse.BatchResponse;
      }
    });
    Object.defineProperty(exports, "BatchResponseArray", {
      enumerable: true,
      get: function get() {
        return _BatchResponseArray.BatchResponseArray;
      }
    });
    Object.defineProperty(exports, "CreateMembershipRequest", {
      enumerable: true,
      get: function get() {
        return _CreateMembershipRequest.CreateMembershipRequest;
      }
    });
    Object.defineProperty(exports, "CreateTimeTrackingEntryRequest", {
      enumerable: true,
      get: function get() {
        return _CreateTimeTrackingEntryRequest.CreateTimeTrackingEntryRequest;
      }
    });
    Object.defineProperty(exports, "CustomFieldBase", {
      enumerable: true,
      get: function get() {
        return _CustomFieldBase.CustomFieldBase;
      }
    });
    Object.defineProperty(exports, "CustomFieldBaseDateValue", {
      enumerable: true,
      get: function get() {
        return _CustomFieldBaseDateValue.CustomFieldBaseDateValue;
      }
    });
    Object.defineProperty(exports, "CustomFieldBaseEnumOptions", {
      enumerable: true,
      get: function get() {
        return _CustomFieldBaseEnumOptions.CustomFieldBaseEnumOptions;
      }
    });
    Object.defineProperty(exports, "CustomFieldBaseEnumValue", {
      enumerable: true,
      get: function get() {
        return _CustomFieldBaseEnumValue.CustomFieldBaseEnumValue;
      }
    });
    Object.defineProperty(exports, "CustomFieldCompact", {
      enumerable: true,
      get: function get() {
        return _CustomFieldCompact.CustomFieldCompact;
      }
    });
    Object.defineProperty(exports, "CustomFieldGidEnumOptionsBody", {
      enumerable: true,
      get: function get() {
        return _CustomFieldGidEnumOptionsBody.CustomFieldGidEnumOptionsBody;
      }
    });
    Object.defineProperty(exports, "CustomFieldRequest", {
      enumerable: true,
      get: function get() {
        return _CustomFieldRequest.CustomFieldRequest;
      }
    });
    Object.defineProperty(exports, "CustomFieldResponse", {
      enumerable: true,
      get: function get() {
        return _CustomFieldResponse.CustomFieldResponse;
      }
    });
    Object.defineProperty(exports, "CustomFieldResponseArray", {
      enumerable: true,
      get: function get() {
        return _CustomFieldResponseArray.CustomFieldResponseArray;
      }
    });
    Object.defineProperty(exports, "CustomFieldResponseCreatedBy", {
      enumerable: true,
      get: function get() {
        return _CustomFieldResponseCreatedBy.CustomFieldResponseCreatedBy;
      }
    });
    Object.defineProperty(exports, "CustomFieldResponseData", {
      enumerable: true,
      get: function get() {
        return _CustomFieldResponseData.CustomFieldResponseData;
      }
    });
    Object.defineProperty(exports, "CustomFieldResponsePeopleValue", {
      enumerable: true,
      get: function get() {
        return _CustomFieldResponsePeopleValue.CustomFieldResponsePeopleValue;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingBase", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingBase.CustomFieldSettingBase;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingCompact", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingCompact.CustomFieldSettingCompact;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingResponse", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingResponse.CustomFieldSettingResponse;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingResponseArray", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingResponseArray.CustomFieldSettingResponseArray;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingResponseCustomField", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingResponseCustomField.CustomFieldSettingResponseCustomField;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingResponseData", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingResponseData.CustomFieldSettingResponseData;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingResponseParent", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingResponseParent.CustomFieldSettingResponseParent;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingResponseProject", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingResponseProject.CustomFieldSettingResponseProject;
      }
    });
    Object.defineProperty(exports, "CustomFieldSettingsApi", {
      enumerable: true,
      get: function get() {
        return _CustomFieldSettingsApi.CustomFieldSettingsApi;
      }
    });
    Object.defineProperty(exports, "CustomFieldsApi", {
      enumerable: true,
      get: function get() {
        return _CustomFieldsApi.CustomFieldsApi;
      }
    });
    Object.defineProperty(exports, "CustomFieldsBody", {
      enumerable: true,
      get: function get() {
        return _CustomFieldsBody.CustomFieldsBody;
      }
    });
    Object.defineProperty(exports, "CustomFieldsCustomFieldGidBody", {
      enumerable: true,
      get: function get() {
        return _CustomFieldsCustomFieldGidBody.CustomFieldsCustomFieldGidBody;
      }
    });
    Object.defineProperty(exports, "DateVariableCompact", {
      enumerable: true,
      get: function get() {
        return _DateVariableCompact.DateVariableCompact;
      }
    });
    Object.defineProperty(exports, "DateVariableRequest", {
      enumerable: true,
      get: function get() {
        return _DateVariableRequest.DateVariableRequest;
      }
    });
    Object.defineProperty(exports, "EmptyResponse", {
      enumerable: true,
      get: function get() {
        return _EmptyResponse.EmptyResponse;
      }
    });
    Object.defineProperty(exports, "EmptyResponseData", {
      enumerable: true,
      get: function get() {
        return _EmptyResponseData.EmptyResponseData;
      }
    });
    Object.defineProperty(exports, "EnumOption", {
      enumerable: true,
      get: function get() {
        return _EnumOption.EnumOption;
      }
    });
    Object.defineProperty(exports, "EnumOptionBase", {
      enumerable: true,
      get: function get() {
        return _EnumOptionBase.EnumOptionBase;
      }
    });
    Object.defineProperty(exports, "EnumOptionData", {
      enumerable: true,
      get: function get() {
        return _EnumOptionData.EnumOptionData;
      }
    });
    Object.defineProperty(exports, "EnumOptionInsertRequest", {
      enumerable: true,
      get: function get() {
        return _EnumOptionInsertRequest.EnumOptionInsertRequest;
      }
    });
    Object.defineProperty(exports, "EnumOptionRequest", {
      enumerable: true,
      get: function get() {
        return _EnumOptionRequest.EnumOptionRequest;
      }
    });
    Object.defineProperty(exports, "EnumOptionsEnumOptionGidBody", {
      enumerable: true,
      get: function get() {
        return _EnumOptionsEnumOptionGidBody.EnumOptionsEnumOptionGidBody;
      }
    });
    Object.defineProperty(exports, "EnumOptionsInsertBody", {
      enumerable: true,
      get: function get() {
        return _EnumOptionsInsertBody.EnumOptionsInsertBody;
      }
    });
    Object.defineProperty(exports, "Error", {
      enumerable: true,
      get: function get() {
        return _Error.Error;
      }
    });
    Object.defineProperty(exports, "ErrorResponse", {
      enumerable: true,
      get: function get() {
        return _ErrorResponse.ErrorResponse;
      }
    });
    Object.defineProperty(exports, "ErrorResponseErrors", {
      enumerable: true,
      get: function get() {
        return _ErrorResponseErrors.ErrorResponseErrors;
      }
    });
    Object.defineProperty(exports, "EventResponse", {
      enumerable: true,
      get: function get() {
        return _EventResponse.EventResponse;
      }
    });
    Object.defineProperty(exports, "EventResponseArray", {
      enumerable: true,
      get: function get() {
        return _EventResponseArray.EventResponseArray;
      }
    });
    Object.defineProperty(exports, "EventResponseChange", {
      enumerable: true,
      get: function get() {
        return _EventResponseChange.EventResponseChange;
      }
    });
    Object.defineProperty(exports, "EventResponseParent", {
      enumerable: true,
      get: function get() {
        return _EventResponseParent.EventResponseParent;
      }
    });
    Object.defineProperty(exports, "EventResponseResource", {
      enumerable: true,
      get: function get() {
        return _EventResponseResource.EventResponseResource;
      }
    });
    Object.defineProperty(exports, "EventResponseUser", {
      enumerable: true,
      get: function get() {
        return _EventResponseUser.EventResponseUser;
      }
    });
    Object.defineProperty(exports, "EventsApi", {
      enumerable: true,
      get: function get() {
        return _EventsApi.EventsApi;
      }
    });
    Object.defineProperty(exports, "GoalAddSubgoalRequest", {
      enumerable: true,
      get: function get() {
        return _GoalAddSubgoalRequest.GoalAddSubgoalRequest;
      }
    });
    Object.defineProperty(exports, "GoalAddSupportingRelationshipRequest", {
      enumerable: true,
      get: function get() {
        return _GoalAddSupportingRelationshipRequest.GoalAddSupportingRelationshipRequest;
      }
    });
    Object.defineProperty(exports, "GoalAddSupportingWorkRequest", {
      enumerable: true,
      get: function get() {
        return _GoalAddSupportingWorkRequest.GoalAddSupportingWorkRequest;
      }
    });
    Object.defineProperty(exports, "GoalBase", {
      enumerable: true,
      get: function get() {
        return _GoalBase.GoalBase;
      }
    });
    Object.defineProperty(exports, "GoalCompact", {
      enumerable: true,
      get: function get() {
        return _GoalCompact.GoalCompact;
      }
    });
    Object.defineProperty(exports, "GoalGidAddFollowersBody", {
      enumerable: true,
      get: function get() {
        return _GoalGidAddFollowersBody.GoalGidAddFollowersBody;
      }
    });
    Object.defineProperty(exports, "GoalGidAddSupportingRelationshipBody", {
      enumerable: true,
      get: function get() {
        return _GoalGidAddSupportingRelationshipBody.GoalGidAddSupportingRelationshipBody;
      }
    });
    Object.defineProperty(exports, "GoalGidRemoveFollowersBody", {
      enumerable: true,
      get: function get() {
        return _GoalGidRemoveFollowersBody.GoalGidRemoveFollowersBody;
      }
    });
    Object.defineProperty(exports, "GoalGidRemoveSupportingRelationshipBody", {
      enumerable: true,
      get: function get() {
        return _GoalGidRemoveSupportingRelationshipBody.GoalGidRemoveSupportingRelationshipBody;
      }
    });
    Object.defineProperty(exports, "GoalGidSetMetricBody", {
      enumerable: true,
      get: function get() {
        return _GoalGidSetMetricBody.GoalGidSetMetricBody;
      }
    });
    Object.defineProperty(exports, "GoalGidSetMetricCurrentValueBody", {
      enumerable: true,
      get: function get() {
        return _GoalGidSetMetricCurrentValueBody.GoalGidSetMetricCurrentValueBody;
      }
    });
    Object.defineProperty(exports, "GoalMembershipBase", {
      enumerable: true,
      get: function get() {
        return _GoalMembershipBase.GoalMembershipBase;
      }
    });
    Object.defineProperty(exports, "GoalMembershipCompact", {
      enumerable: true,
      get: function get() {
        return _GoalMembershipCompact.GoalMembershipCompact;
      }
    });
    Object.defineProperty(exports, "GoalMembershipResponse", {
      enumerable: true,
      get: function get() {
        return _GoalMembershipResponse.GoalMembershipResponse;
      }
    });
    Object.defineProperty(exports, "GoalMembershipResponseUser", {
      enumerable: true,
      get: function get() {
        return _GoalMembershipResponseUser.GoalMembershipResponseUser;
      }
    });
    Object.defineProperty(exports, "GoalMembershipResponseWorkspace", {
      enumerable: true,
      get: function get() {
        return _GoalMembershipResponseWorkspace.GoalMembershipResponseWorkspace;
      }
    });
    Object.defineProperty(exports, "GoalMetricBase", {
      enumerable: true,
      get: function get() {
        return _GoalMetricBase.GoalMetricBase;
      }
    });
    Object.defineProperty(exports, "GoalMetricCurrentValueRequest", {
      enumerable: true,
      get: function get() {
        return _GoalMetricCurrentValueRequest.GoalMetricCurrentValueRequest;
      }
    });
    Object.defineProperty(exports, "GoalMetricRequest", {
      enumerable: true,
      get: function get() {
        return _GoalMetricRequest.GoalMetricRequest;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipBase", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipBase.GoalRelationshipBase;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipBaseSupportedGoal", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipBaseSupportedGoal.GoalRelationshipBaseSupportedGoal;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipBaseSupportingResource", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipBaseSupportingResource.GoalRelationshipBaseSupportingResource;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipCompact", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipCompact.GoalRelationshipCompact;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipRequest", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipRequest.GoalRelationshipRequest;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipResponse", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipResponse.GoalRelationshipResponse;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipResponseArray", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipResponseArray.GoalRelationshipResponseArray;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipResponseData", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipResponseData.GoalRelationshipResponseData;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipsApi", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipsApi.GoalRelationshipsApi;
      }
    });
    Object.defineProperty(exports, "GoalRelationshipsGoalRelationshipGidBody", {
      enumerable: true,
      get: function get() {
        return _GoalRelationshipsGoalRelationshipGidBody.GoalRelationshipsGoalRelationshipGidBody;
      }
    });
    Object.defineProperty(exports, "GoalRemoveSubgoalRequest", {
      enumerable: true,
      get: function get() {
        return _GoalRemoveSubgoalRequest.GoalRemoveSubgoalRequest;
      }
    });
    Object.defineProperty(exports, "GoalRemoveSupportingRelationshipRequest", {
      enumerable: true,
      get: function get() {
        return _GoalRemoveSupportingRelationshipRequest.GoalRemoveSupportingRelationshipRequest;
      }
    });
    Object.defineProperty(exports, "GoalRequest", {
      enumerable: true,
      get: function get() {
        return _GoalRequest.GoalRequest;
      }
    });
    Object.defineProperty(exports, "GoalRequestBase", {
      enumerable: true,
      get: function get() {
        return _GoalRequestBase.GoalRequestBase;
      }
    });
    Object.defineProperty(exports, "GoalResponse", {
      enumerable: true,
      get: function get() {
        return _GoalResponse.GoalResponse;
      }
    });
    Object.defineProperty(exports, "GoalResponseArray", {
      enumerable: true,
      get: function get() {
        return _GoalResponseArray.GoalResponseArray;
      }
    });
    Object.defineProperty(exports, "GoalResponseCurrentStatusUpdate", {
      enumerable: true,
      get: function get() {
        return _GoalResponseCurrentStatusUpdate.GoalResponseCurrentStatusUpdate;
      }
    });
    Object.defineProperty(exports, "GoalResponseData", {
      enumerable: true,
      get: function get() {
        return _GoalResponseData.GoalResponseData;
      }
    });
    Object.defineProperty(exports, "GoalResponseLikes", {
      enumerable: true,
      get: function get() {
        return _GoalResponseLikes.GoalResponseLikes;
      }
    });
    Object.defineProperty(exports, "GoalResponseMetric", {
      enumerable: true,
      get: function get() {
        return _GoalResponseMetric.GoalResponseMetric;
      }
    });
    Object.defineProperty(exports, "GoalResponseTeam", {
      enumerable: true,
      get: function get() {
        return _GoalResponseTeam.GoalResponseTeam;
      }
    });
    Object.defineProperty(exports, "GoalResponseTimePeriod", {
      enumerable: true,
      get: function get() {
        return _GoalResponseTimePeriod.GoalResponseTimePeriod;
      }
    });
    Object.defineProperty(exports, "GoalResponseWorkspace", {
      enumerable: true,
      get: function get() {
        return _GoalResponseWorkspace.GoalResponseWorkspace;
      }
    });
    Object.defineProperty(exports, "GoalUpdateRequest", {
      enumerable: true,
      get: function get() {
        return _GoalUpdateRequest.GoalUpdateRequest;
      }
    });
    Object.defineProperty(exports, "GoalsApi", {
      enumerable: true,
      get: function get() {
        return _GoalsApi.GoalsApi;
      }
    });
    Object.defineProperty(exports, "GoalsBody", {
      enumerable: true,
      get: function get() {
        return _GoalsBody.GoalsBody;
      }
    });
    Object.defineProperty(exports, "GoalsGoalGidBody", {
      enumerable: true,
      get: function get() {
        return _GoalsGoalGidBody.GoalsGoalGidBody;
      }
    });
    Object.defineProperty(exports, "InlineResponse412", {
      enumerable: true,
      get: function get() {
        return _InlineResponse.InlineResponse412;
      }
    });
    Object.defineProperty(exports, "InlineResponse412Errors", {
      enumerable: true,
      get: function get() {
        return _InlineResponse412Errors.InlineResponse412Errors;
      }
    });
    Object.defineProperty(exports, "JobBase", {
      enumerable: true,
      get: function get() {
        return _JobBase.JobBase;
      }
    });
    Object.defineProperty(exports, "JobBaseNewProject", {
      enumerable: true,
      get: function get() {
        return _JobBaseNewProject.JobBaseNewProject;
      }
    });
    Object.defineProperty(exports, "JobBaseNewProjectTemplate", {
      enumerable: true,
      get: function get() {
        return _JobBaseNewProjectTemplate.JobBaseNewProjectTemplate;
      }
    });
    Object.defineProperty(exports, "JobBaseNewTask", {
      enumerable: true,
      get: function get() {
        return _JobBaseNewTask.JobBaseNewTask;
      }
    });
    Object.defineProperty(exports, "JobCompact", {
      enumerable: true,
      get: function get() {
        return _JobCompact.JobCompact;
      }
    });
    Object.defineProperty(exports, "JobResponse", {
      enumerable: true,
      get: function get() {
        return _JobResponse.JobResponse;
      }
    });
    Object.defineProperty(exports, "JobResponseData", {
      enumerable: true,
      get: function get() {
        return _JobResponseData.JobResponseData;
      }
    });
    Object.defineProperty(exports, "JobsApi", {
      enumerable: true,
      get: function get() {
        return _JobsApi.JobsApi;
      }
    });
    Object.defineProperty(exports, "Like", {
      enumerable: true,
      get: function get() {
        return _Like.Like;
      }
    });
    Object.defineProperty(exports, "MemberCompact", {
      enumerable: true,
      get: function get() {
        return _MemberCompact.MemberCompact;
      }
    });
    Object.defineProperty(exports, "MembershipCompact", {
      enumerable: true,
      get: function get() {
        return _MembershipCompact.MembershipCompact;
      }
    });
    Object.defineProperty(exports, "MembershipCompactGoal", {
      enumerable: true,
      get: function get() {
        return _MembershipCompactGoal.MembershipCompactGoal;
      }
    });
    Object.defineProperty(exports, "MembershipCompactMember", {
      enumerable: true,
      get: function get() {
        return _MembershipCompactMember.MembershipCompactMember;
      }
    });
    Object.defineProperty(exports, "MembershipCompactParent", {
      enumerable: true,
      get: function get() {
        return _MembershipCompactParent.MembershipCompactParent;
      }
    });
    Object.defineProperty(exports, "MembershipRequest", {
      enumerable: true,
      get: function get() {
        return _MembershipRequest.MembershipRequest;
      }
    });
    Object.defineProperty(exports, "MembershipResponse", {
      enumerable: true,
      get: function get() {
        return _MembershipResponse.MembershipResponse;
      }
    });
    Object.defineProperty(exports, "MembershipResponseArray", {
      enumerable: true,
      get: function get() {
        return _MembershipResponseArray.MembershipResponseArray;
      }
    });
    Object.defineProperty(exports, "MembershipResponseData", {
      enumerable: true,
      get: function get() {
        return _MembershipResponseData.MembershipResponseData;
      }
    });
    Object.defineProperty(exports, "MembershipsApi", {
      enumerable: true,
      get: function get() {
        return _MembershipsApi.MembershipsApi;
      }
    });
    Object.defineProperty(exports, "MembershipsBody", {
      enumerable: true,
      get: function get() {
        return _MembershipsBody.MembershipsBody;
      }
    });
    Object.defineProperty(exports, "ModifyDependenciesRequest", {
      enumerable: true,
      get: function get() {
        return _ModifyDependenciesRequest.ModifyDependenciesRequest;
      }
    });
    Object.defineProperty(exports, "ModifyDependentsRequest", {
      enumerable: true,
      get: function get() {
        return _ModifyDependentsRequest.ModifyDependentsRequest;
      }
    });
    Object.defineProperty(exports, "NextPage", {
      enumerable: true,
      get: function get() {
        return _NextPage.NextPage;
      }
    });
    Object.defineProperty(exports, "OrganizationExportBase", {
      enumerable: true,
      get: function get() {
        return _OrganizationExportBase.OrganizationExportBase;
      }
    });
    Object.defineProperty(exports, "OrganizationExportCompact", {
      enumerable: true,
      get: function get() {
        return _OrganizationExportCompact.OrganizationExportCompact;
      }
    });
    Object.defineProperty(exports, "OrganizationExportRequest", {
      enumerable: true,
      get: function get() {
        return _OrganizationExportRequest.OrganizationExportRequest;
      }
    });
    Object.defineProperty(exports, "OrganizationExportResponse", {
      enumerable: true,
      get: function get() {
        return _OrganizationExportResponse.OrganizationExportResponse;
      }
    });
    Object.defineProperty(exports, "OrganizationExportResponseData", {
      enumerable: true,
      get: function get() {
        return _OrganizationExportResponseData.OrganizationExportResponseData;
      }
    });
    Object.defineProperty(exports, "OrganizationExportsApi", {
      enumerable: true,
      get: function get() {
        return _OrganizationExportsApi.OrganizationExportsApi;
      }
    });
    Object.defineProperty(exports, "OrganizationExportsBody", {
      enumerable: true,
      get: function get() {
        return _OrganizationExportsBody.OrganizationExportsBody;
      }
    });
    Object.defineProperty(exports, "PortfolioAddItemRequest", {
      enumerable: true,
      get: function get() {
        return _PortfolioAddItemRequest.PortfolioAddItemRequest;
      }
    });
    Object.defineProperty(exports, "PortfolioBase", {
      enumerable: true,
      get: function get() {
        return _PortfolioBase.PortfolioBase;
      }
    });
    Object.defineProperty(exports, "PortfolioCompact", {
      enumerable: true,
      get: function get() {
        return _PortfolioCompact.PortfolioCompact;
      }
    });
    Object.defineProperty(exports, "PortfolioGidAddCustomFieldSettingBody", {
      enumerable: true,
      get: function get() {
        return _PortfolioGidAddCustomFieldSettingBody.PortfolioGidAddCustomFieldSettingBody;
      }
    });
    Object.defineProperty(exports, "PortfolioGidAddItemBody", {
      enumerable: true,
      get: function get() {
        return _PortfolioGidAddItemBody.PortfolioGidAddItemBody;
      }
    });
    Object.defineProperty(exports, "PortfolioGidAddMembersBody", {
      enumerable: true,
      get: function get() {
        return _PortfolioGidAddMembersBody.PortfolioGidAddMembersBody;
      }
    });
    Object.defineProperty(exports, "PortfolioGidRemoveCustomFieldSettingBody", {
      enumerable: true,
      get: function get() {
        return _PortfolioGidRemoveCustomFieldSettingBody.PortfolioGidRemoveCustomFieldSettingBody;
      }
    });
    Object.defineProperty(exports, "PortfolioGidRemoveItemBody", {
      enumerable: true,
      get: function get() {
        return _PortfolioGidRemoveItemBody.PortfolioGidRemoveItemBody;
      }
    });
    Object.defineProperty(exports, "PortfolioGidRemoveMembersBody", {
      enumerable: true,
      get: function get() {
        return _PortfolioGidRemoveMembersBody.PortfolioGidRemoveMembersBody;
      }
    });
    Object.defineProperty(exports, "PortfolioMembershipBase", {
      enumerable: true,
      get: function get() {
        return _PortfolioMembershipBase.PortfolioMembershipBase;
      }
    });
    Object.defineProperty(exports, "PortfolioMembershipBasePortfolio", {
      enumerable: true,
      get: function get() {
        return _PortfolioMembershipBasePortfolio.PortfolioMembershipBasePortfolio;
      }
    });
    Object.defineProperty(exports, "PortfolioMembershipCompact", {
      enumerable: true,
      get: function get() {
        return _PortfolioMembershipCompact.PortfolioMembershipCompact;
      }
    });
    Object.defineProperty(exports, "PortfolioMembershipResponse", {
      enumerable: true,
      get: function get() {
        return _PortfolioMembershipResponse.PortfolioMembershipResponse;
      }
    });
    Object.defineProperty(exports, "PortfolioMembershipResponseArray", {
      enumerable: true,
      get: function get() {
        return _PortfolioMembershipResponseArray.PortfolioMembershipResponseArray;
      }
    });
    Object.defineProperty(exports, "PortfolioMembershipResponseData", {
      enumerable: true,
      get: function get() {
        return _PortfolioMembershipResponseData.PortfolioMembershipResponseData;
      }
    });
    Object.defineProperty(exports, "PortfolioMembershipsApi", {
      enumerable: true,
      get: function get() {
        return _PortfolioMembershipsApi.PortfolioMembershipsApi;
      }
    });
    Object.defineProperty(exports, "PortfolioRemoveItemRequest", {
      enumerable: true,
      get: function get() {
        return _PortfolioRemoveItemRequest.PortfolioRemoveItemRequest;
      }
    });
    Object.defineProperty(exports, "PortfolioRequest", {
      enumerable: true,
      get: function get() {
        return _PortfolioRequest.PortfolioRequest;
      }
    });
    Object.defineProperty(exports, "PortfolioResponse", {
      enumerable: true,
      get: function get() {
        return _PortfolioResponse.PortfolioResponse;
      }
    });
    Object.defineProperty(exports, "PortfolioResponseArray", {
      enumerable: true,
      get: function get() {
        return _PortfolioResponseArray.PortfolioResponseArray;
      }
    });
    Object.defineProperty(exports, "PortfolioResponseCurrentStatusUpdate", {
      enumerable: true,
      get: function get() {
        return _PortfolioResponseCurrentStatusUpdate.PortfolioResponseCurrentStatusUpdate;
      }
    });
    Object.defineProperty(exports, "PortfolioResponseCustomFieldSettings", {
      enumerable: true,
      get: function get() {
        return _PortfolioResponseCustomFieldSettings.PortfolioResponseCustomFieldSettings;
      }
    });
    Object.defineProperty(exports, "PortfolioResponseCustomFields", {
      enumerable: true,
      get: function get() {
        return _PortfolioResponseCustomFields.PortfolioResponseCustomFields;
      }
    });
    Object.defineProperty(exports, "PortfolioResponseData", {
      enumerable: true,
      get: function get() {
        return _PortfolioResponseData.PortfolioResponseData;
      }
    });
    Object.defineProperty(exports, "PortfolioResponseWorkspace", {
      enumerable: true,
      get: function get() {
        return _PortfolioResponseWorkspace.PortfolioResponseWorkspace;
      }
    });
    Object.defineProperty(exports, "PortfoliosApi", {
      enumerable: true,
      get: function get() {
        return _PortfoliosApi.PortfoliosApi;
      }
    });
    Object.defineProperty(exports, "PortfoliosBody", {
      enumerable: true,
      get: function get() {
        return _PortfoliosBody.PortfoliosBody;
      }
    });
    Object.defineProperty(exports, "PortfoliosPortfolioGidBody", {
      enumerable: true,
      get: function get() {
        return _PortfoliosPortfolioGidBody.PortfoliosPortfolioGidBody;
      }
    });
    Object.defineProperty(exports, "Preview", {
      enumerable: true,
      get: function get() {
        return _Preview.Preview;
      }
    });
    Object.defineProperty(exports, "ProjectBase", {
      enumerable: true,
      get: function get() {
        return _ProjectBase.ProjectBase;
      }
    });
    Object.defineProperty(exports, "ProjectBaseCurrentStatus", {
      enumerable: true,
      get: function get() {
        return _ProjectBaseCurrentStatus.ProjectBaseCurrentStatus;
      }
    });
    Object.defineProperty(exports, "ProjectBaseCurrentStatusUpdate", {
      enumerable: true,
      get: function get() {
        return _ProjectBaseCurrentStatusUpdate.ProjectBaseCurrentStatusUpdate;
      }
    });
    Object.defineProperty(exports, "ProjectBriefBase", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefBase.ProjectBriefBase;
      }
    });
    Object.defineProperty(exports, "ProjectBriefCompact", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefCompact.ProjectBriefCompact;
      }
    });
    Object.defineProperty(exports, "ProjectBriefRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefRequest.ProjectBriefRequest;
      }
    });
    Object.defineProperty(exports, "ProjectBriefResponse", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefResponse.ProjectBriefResponse;
      }
    });
    Object.defineProperty(exports, "ProjectBriefResponseData", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefResponseData.ProjectBriefResponseData;
      }
    });
    Object.defineProperty(exports, "ProjectBriefResponseProject", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefResponseProject.ProjectBriefResponseProject;
      }
    });
    Object.defineProperty(exports, "ProjectBriefsApi", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefsApi.ProjectBriefsApi;
      }
    });
    Object.defineProperty(exports, "ProjectBriefsProjectBriefGidBody", {
      enumerable: true,
      get: function get() {
        return _ProjectBriefsProjectBriefGidBody.ProjectBriefsProjectBriefGidBody;
      }
    });
    Object.defineProperty(exports, "ProjectCompact", {
      enumerable: true,
      get: function get() {
        return _ProjectCompact.ProjectCompact;
      }
    });
    Object.defineProperty(exports, "ProjectDuplicateRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectDuplicateRequest.ProjectDuplicateRequest;
      }
    });
    Object.defineProperty(exports, "ProjectDuplicateRequestScheduleDates", {
      enumerable: true,
      get: function get() {
        return _ProjectDuplicateRequestScheduleDates.ProjectDuplicateRequestScheduleDates;
      }
    });
    Object.defineProperty(exports, "ProjectGidAddCustomFieldSettingBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidAddCustomFieldSettingBody.ProjectGidAddCustomFieldSettingBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidAddFollowersBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidAddFollowersBody.ProjectGidAddFollowersBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidAddMembersBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidAddMembersBody.ProjectGidAddMembersBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidDuplicateBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidDuplicateBody.ProjectGidDuplicateBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidProjectBriefsBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidProjectBriefsBody.ProjectGidProjectBriefsBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidProjectStatusesBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidProjectStatusesBody.ProjectGidProjectStatusesBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidRemoveCustomFieldSettingBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidRemoveCustomFieldSettingBody.ProjectGidRemoveCustomFieldSettingBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidRemoveFollowersBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidRemoveFollowersBody.ProjectGidRemoveFollowersBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidRemoveMembersBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidRemoveMembersBody.ProjectGidRemoveMembersBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidSaveAsTemplateBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidSaveAsTemplateBody.ProjectGidSaveAsTemplateBody;
      }
    });
    Object.defineProperty(exports, "ProjectGidSectionsBody", {
      enumerable: true,
      get: function get() {
        return _ProjectGidSectionsBody.ProjectGidSectionsBody;
      }
    });
    Object.defineProperty(exports, "ProjectMembershipBase", {
      enumerable: true,
      get: function get() {
        return _ProjectMembershipBase.ProjectMembershipBase;
      }
    });
    Object.defineProperty(exports, "ProjectMembershipCompact", {
      enumerable: true,
      get: function get() {
        return _ProjectMembershipCompact.ProjectMembershipCompact;
      }
    });
    Object.defineProperty(exports, "ProjectMembershipCompactArray", {
      enumerable: true,
      get: function get() {
        return _ProjectMembershipCompactArray.ProjectMembershipCompactArray;
      }
    });
    Object.defineProperty(exports, "ProjectMembershipCompactResponse", {
      enumerable: true,
      get: function get() {
        return _ProjectMembershipCompactResponse.ProjectMembershipCompactResponse;
      }
    });
    Object.defineProperty(exports, "ProjectMembershipNormalResponse", {
      enumerable: true,
      get: function get() {
        return _ProjectMembershipNormalResponse.ProjectMembershipNormalResponse;
      }
    });
    Object.defineProperty(exports, "ProjectMembershipNormalResponseData", {
      enumerable: true,
      get: function get() {
        return _ProjectMembershipNormalResponseData.ProjectMembershipNormalResponseData;
      }
    });
    Object.defineProperty(exports, "ProjectMembershipsApi", {
      enumerable: true,
      get: function get() {
        return _ProjectMembershipsApi.ProjectMembershipsApi;
      }
    });
    Object.defineProperty(exports, "ProjectRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectRequest.ProjectRequest;
      }
    });
    Object.defineProperty(exports, "ProjectResponse", {
      enumerable: true,
      get: function get() {
        return _ProjectResponse.ProjectResponse;
      }
    });
    Object.defineProperty(exports, "ProjectResponseArray", {
      enumerable: true,
      get: function get() {
        return _ProjectResponseArray.ProjectResponseArray;
      }
    });
    Object.defineProperty(exports, "ProjectResponseCompletedBy", {
      enumerable: true,
      get: function get() {
        return _ProjectResponseCompletedBy.ProjectResponseCompletedBy;
      }
    });
    Object.defineProperty(exports, "ProjectResponseCreatedFromTemplate", {
      enumerable: true,
      get: function get() {
        return _ProjectResponseCreatedFromTemplate.ProjectResponseCreatedFromTemplate;
      }
    });
    Object.defineProperty(exports, "ProjectResponseData", {
      enumerable: true,
      get: function get() {
        return _ProjectResponseData.ProjectResponseData;
      }
    });
    Object.defineProperty(exports, "ProjectResponseProjectBrief", {
      enumerable: true,
      get: function get() {
        return _ProjectResponseProjectBrief.ProjectResponseProjectBrief;
      }
    });
    Object.defineProperty(exports, "ProjectResponseTeam", {
      enumerable: true,
      get: function get() {
        return _ProjectResponseTeam.ProjectResponseTeam;
      }
    });
    Object.defineProperty(exports, "ProjectResponseWorkspace", {
      enumerable: true,
      get: function get() {
        return _ProjectResponseWorkspace.ProjectResponseWorkspace;
      }
    });
    Object.defineProperty(exports, "ProjectSaveAsTemplateRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectSaveAsTemplateRequest.ProjectSaveAsTemplateRequest;
      }
    });
    Object.defineProperty(exports, "ProjectSectionInsertRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectSectionInsertRequest.ProjectSectionInsertRequest;
      }
    });
    Object.defineProperty(exports, "ProjectStatusBase", {
      enumerable: true,
      get: function get() {
        return _ProjectStatusBase.ProjectStatusBase;
      }
    });
    Object.defineProperty(exports, "ProjectStatusCompact", {
      enumerable: true,
      get: function get() {
        return _ProjectStatusCompact.ProjectStatusCompact;
      }
    });
    Object.defineProperty(exports, "ProjectStatusRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectStatusRequest.ProjectStatusRequest;
      }
    });
    Object.defineProperty(exports, "ProjectStatusResponse", {
      enumerable: true,
      get: function get() {
        return _ProjectStatusResponse.ProjectStatusResponse;
      }
    });
    Object.defineProperty(exports, "ProjectStatusResponseArray", {
      enumerable: true,
      get: function get() {
        return _ProjectStatusResponseArray.ProjectStatusResponseArray;
      }
    });
    Object.defineProperty(exports, "ProjectStatusResponseData", {
      enumerable: true,
      get: function get() {
        return _ProjectStatusResponseData.ProjectStatusResponseData;
      }
    });
    Object.defineProperty(exports, "ProjectStatusesApi", {
      enumerable: true,
      get: function get() {
        return _ProjectStatusesApi.ProjectStatusesApi;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateBase", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateBase.ProjectTemplateBase;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateBaseRequestedDates", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateBaseRequestedDates.ProjectTemplateBaseRequestedDates;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateBaseRequestedRoles", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateBaseRequestedRoles.ProjectTemplateBaseRequestedRoles;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateBaseTeam", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateBaseTeam.ProjectTemplateBaseTeam;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateCompact", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateCompact.ProjectTemplateCompact;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateGidInstantiateProjectBody", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateGidInstantiateProjectBody.ProjectTemplateGidInstantiateProjectBody;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateInstantiateProjectRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateInstantiateProjectRequest.ProjectTemplateInstantiateProjectRequest;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateInstantiateProjectRequestRequestedDates", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateInstantiateProjectRequestRequestedDates.ProjectTemplateInstantiateProjectRequestRequestedDates;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateInstantiateProjectRequestRequestedRoles", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateInstantiateProjectRequestRequestedRoles.ProjectTemplateInstantiateProjectRequestRequestedRoles;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateResponse", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateResponse.ProjectTemplateResponse;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateResponseArray", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateResponseArray.ProjectTemplateResponseArray;
      }
    });
    Object.defineProperty(exports, "ProjectTemplateResponseData", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplateResponseData.ProjectTemplateResponseData;
      }
    });
    Object.defineProperty(exports, "ProjectTemplatesApi", {
      enumerable: true,
      get: function get() {
        return _ProjectTemplatesApi.ProjectTemplatesApi;
      }
    });
    Object.defineProperty(exports, "ProjectUpdateRequest", {
      enumerable: true,
      get: function get() {
        return _ProjectUpdateRequest.ProjectUpdateRequest;
      }
    });
    Object.defineProperty(exports, "ProjectsApi", {
      enumerable: true,
      get: function get() {
        return _ProjectsApi.ProjectsApi;
      }
    });
    Object.defineProperty(exports, "ProjectsBody", {
      enumerable: true,
      get: function get() {
        return _ProjectsBody.ProjectsBody;
      }
    });
    Object.defineProperty(exports, "ProjectsProjectGidBody", {
      enumerable: true,
      get: function get() {
        return _ProjectsProjectGidBody.ProjectsProjectGidBody;
      }
    });
    Object.defineProperty(exports, "RemoveCustomFieldSettingRequest", {
      enumerable: true,
      get: function get() {
        return _RemoveCustomFieldSettingRequest.RemoveCustomFieldSettingRequest;
      }
    });
    Object.defineProperty(exports, "RemoveFollowersRequest", {
      enumerable: true,
      get: function get() {
        return _RemoveFollowersRequest.RemoveFollowersRequest;
      }
    });
    Object.defineProperty(exports, "RemoveMembersRequest", {
      enumerable: true,
      get: function get() {
        return _RemoveMembersRequest.RemoveMembersRequest;
      }
    });
    Object.defineProperty(exports, "RequestedRoleRequest", {
      enumerable: true,
      get: function get() {
        return _RequestedRoleRequest.RequestedRoleRequest;
      }
    });
    Object.defineProperty(exports, "RuleTriggerGidRunBody", {
      enumerable: true,
      get: function get() {
        return _RuleTriggerGidRunBody.RuleTriggerGidRunBody;
      }
    });
    Object.defineProperty(exports, "RuleTriggerRequest", {
      enumerable: true,
      get: function get() {
        return _RuleTriggerRequest.RuleTriggerRequest;
      }
    });
    Object.defineProperty(exports, "RuleTriggerResponse", {
      enumerable: true,
      get: function get() {
        return _RuleTriggerResponse.RuleTriggerResponse;
      }
    });
    Object.defineProperty(exports, "RuleTriggerResponseData", {
      enumerable: true,
      get: function get() {
        return _RuleTriggerResponseData.RuleTriggerResponseData;
      }
    });
    Object.defineProperty(exports, "RulesApi", {
      enumerable: true,
      get: function get() {
        return _RulesApi.RulesApi;
      }
    });
    Object.defineProperty(exports, "SectionBase", {
      enumerable: true,
      get: function get() {
        return _SectionBase.SectionBase;
      }
    });
    Object.defineProperty(exports, "SectionCompact", {
      enumerable: true,
      get: function get() {
        return _SectionCompact.SectionCompact;
      }
    });
    Object.defineProperty(exports, "SectionGidAddTaskBody", {
      enumerable: true,
      get: function get() {
        return _SectionGidAddTaskBody.SectionGidAddTaskBody;
      }
    });
    Object.defineProperty(exports, "SectionRequest", {
      enumerable: true,
      get: function get() {
        return _SectionRequest.SectionRequest;
      }
    });
    Object.defineProperty(exports, "SectionResponse", {
      enumerable: true,
      get: function get() {
        return _SectionResponse.SectionResponse;
      }
    });
    Object.defineProperty(exports, "SectionResponseArray", {
      enumerable: true,
      get: function get() {
        return _SectionResponseArray.SectionResponseArray;
      }
    });
    Object.defineProperty(exports, "SectionResponseData", {
      enumerable: true,
      get: function get() {
        return _SectionResponseData.SectionResponseData;
      }
    });
    Object.defineProperty(exports, "SectionTaskInsertRequest", {
      enumerable: true,
      get: function get() {
        return _SectionTaskInsertRequest.SectionTaskInsertRequest;
      }
    });
    Object.defineProperty(exports, "SectionsApi", {
      enumerable: true,
      get: function get() {
        return _SectionsApi.SectionsApi;
      }
    });
    Object.defineProperty(exports, "SectionsInsertBody", {
      enumerable: true,
      get: function get() {
        return _SectionsInsertBody.SectionsInsertBody;
      }
    });
    Object.defineProperty(exports, "SectionsSectionGidBody", {
      enumerable: true,
      get: function get() {
        return _SectionsSectionGidBody.SectionsSectionGidBody;
      }
    });
    Object.defineProperty(exports, "StatusUpdateBase", {
      enumerable: true,
      get: function get() {
        return _StatusUpdateBase.StatusUpdateBase;
      }
    });
    Object.defineProperty(exports, "StatusUpdateCompact", {
      enumerable: true,
      get: function get() {
        return _StatusUpdateCompact.StatusUpdateCompact;
      }
    });
    Object.defineProperty(exports, "StatusUpdateRequest", {
      enumerable: true,
      get: function get() {
        return _StatusUpdateRequest.StatusUpdateRequest;
      }
    });
    Object.defineProperty(exports, "StatusUpdateResponse", {
      enumerable: true,
      get: function get() {
        return _StatusUpdateResponse.StatusUpdateResponse;
      }
    });
    Object.defineProperty(exports, "StatusUpdateResponseArray", {
      enumerable: true,
      get: function get() {
        return _StatusUpdateResponseArray.StatusUpdateResponseArray;
      }
    });
    Object.defineProperty(exports, "StatusUpdateResponseData", {
      enumerable: true,
      get: function get() {
        return _StatusUpdateResponseData.StatusUpdateResponseData;
      }
    });
    Object.defineProperty(exports, "StatusUpdateResponseParent", {
      enumerable: true,
      get: function get() {
        return _StatusUpdateResponseParent.StatusUpdateResponseParent;
      }
    });
    Object.defineProperty(exports, "StatusUpdatesApi", {
      enumerable: true,
      get: function get() {
        return _StatusUpdatesApi.StatusUpdatesApi;
      }
    });
    Object.defineProperty(exports, "StatusUpdatesBody", {
      enumerable: true,
      get: function get() {
        return _StatusUpdatesBody.StatusUpdatesBody;
      }
    });
    Object.defineProperty(exports, "StoriesApi", {
      enumerable: true,
      get: function get() {
        return _StoriesApi.StoriesApi;
      }
    });
    Object.defineProperty(exports, "StoriesStoryGidBody", {
      enumerable: true,
      get: function get() {
        return _StoriesStoryGidBody.StoriesStoryGidBody;
      }
    });
    Object.defineProperty(exports, "StoryBase", {
      enumerable: true,
      get: function get() {
        return _StoryBase.StoryBase;
      }
    });
    Object.defineProperty(exports, "StoryCompact", {
      enumerable: true,
      get: function get() {
        return _StoryCompact.StoryCompact;
      }
    });
    Object.defineProperty(exports, "StoryRequest", {
      enumerable: true,
      get: function get() {
        return _StoryRequest.StoryRequest;
      }
    });
    Object.defineProperty(exports, "StoryResponse", {
      enumerable: true,
      get: function get() {
        return _StoryResponse.StoryResponse;
      }
    });
    Object.defineProperty(exports, "StoryResponseArray", {
      enumerable: true,
      get: function get() {
        return _StoryResponseArray.StoryResponseArray;
      }
    });
    Object.defineProperty(exports, "StoryResponseAssignee", {
      enumerable: true,
      get: function get() {
        return _StoryResponseAssignee.StoryResponseAssignee;
      }
    });
    Object.defineProperty(exports, "StoryResponseCustomField", {
      enumerable: true,
      get: function get() {
        return _StoryResponseCustomField.StoryResponseCustomField;
      }
    });
    Object.defineProperty(exports, "StoryResponseData", {
      enumerable: true,
      get: function get() {
        return _StoryResponseData.StoryResponseData;
      }
    });
    Object.defineProperty(exports, "StoryResponseDates", {
      enumerable: true,
      get: function get() {
        return _StoryResponseDates.StoryResponseDates;
      }
    });
    Object.defineProperty(exports, "StoryResponseOldDates", {
      enumerable: true,
      get: function get() {
        return _StoryResponseOldDates.StoryResponseOldDates;
      }
    });
    Object.defineProperty(exports, "StoryResponseOldEnumValue", {
      enumerable: true,
      get: function get() {
        return _StoryResponseOldEnumValue.StoryResponseOldEnumValue;
      }
    });
    Object.defineProperty(exports, "StoryResponseOldSection", {
      enumerable: true,
      get: function get() {
        return _StoryResponseOldSection.StoryResponseOldSection;
      }
    });
    Object.defineProperty(exports, "StoryResponsePreviews", {
      enumerable: true,
      get: function get() {
        return _StoryResponsePreviews.StoryResponsePreviews;
      }
    });
    Object.defineProperty(exports, "StoryResponseProject", {
      enumerable: true,
      get: function get() {
        return _StoryResponseProject.StoryResponseProject;
      }
    });
    Object.defineProperty(exports, "StoryResponseStory", {
      enumerable: true,
      get: function get() {
        return _StoryResponseStory.StoryResponseStory;
      }
    });
    Object.defineProperty(exports, "StoryResponseTag", {
      enumerable: true,
      get: function get() {
        return _StoryResponseTag.StoryResponseTag;
      }
    });
    Object.defineProperty(exports, "StoryResponseTarget", {
      enumerable: true,
      get: function get() {
        return _StoryResponseTarget.StoryResponseTarget;
      }
    });
    Object.defineProperty(exports, "StoryResponseTask", {
      enumerable: true,
      get: function get() {
        return _StoryResponseTask.StoryResponseTask;
      }
    });
    Object.defineProperty(exports, "TagBase", {
      enumerable: true,
      get: function get() {
        return _TagBase.TagBase;
      }
    });
    Object.defineProperty(exports, "TagCompact", {
      enumerable: true,
      get: function get() {
        return _TagCompact.TagCompact;
      }
    });
    Object.defineProperty(exports, "TagRequest", {
      enumerable: true,
      get: function get() {
        return _TagRequest.TagRequest;
      }
    });
    Object.defineProperty(exports, "TagResponse", {
      enumerable: true,
      get: function get() {
        return _TagResponse.TagResponse;
      }
    });
    Object.defineProperty(exports, "TagResponseArray", {
      enumerable: true,
      get: function get() {
        return _TagResponseArray.TagResponseArray;
      }
    });
    Object.defineProperty(exports, "TagResponseData", {
      enumerable: true,
      get: function get() {
        return _TagResponseData.TagResponseData;
      }
    });
    Object.defineProperty(exports, "TagsApi", {
      enumerable: true,
      get: function get() {
        return _TagsApi.TagsApi;
      }
    });
    Object.defineProperty(exports, "TagsBody", {
      enumerable: true,
      get: function get() {
        return _TagsBody.TagsBody;
      }
    });
    Object.defineProperty(exports, "TaskAddFollowersRequest", {
      enumerable: true,
      get: function get() {
        return _TaskAddFollowersRequest.TaskAddFollowersRequest;
      }
    });
    Object.defineProperty(exports, "TaskAddProjectRequest", {
      enumerable: true,
      get: function get() {
        return _TaskAddProjectRequest.TaskAddProjectRequest;
      }
    });
    Object.defineProperty(exports, "TaskAddTagRequest", {
      enumerable: true,
      get: function get() {
        return _TaskAddTagRequest.TaskAddTagRequest;
      }
    });
    Object.defineProperty(exports, "TaskBase", {
      enumerable: true,
      get: function get() {
        return _TaskBase.TaskBase;
      }
    });
    Object.defineProperty(exports, "TaskBaseCompletedBy", {
      enumerable: true,
      get: function get() {
        return _TaskBaseCompletedBy.TaskBaseCompletedBy;
      }
    });
    Object.defineProperty(exports, "TaskBaseDependencies", {
      enumerable: true,
      get: function get() {
        return _TaskBaseDependencies.TaskBaseDependencies;
      }
    });
    Object.defineProperty(exports, "TaskBaseExternal", {
      enumerable: true,
      get: function get() {
        return _TaskBaseExternal.TaskBaseExternal;
      }
    });
    Object.defineProperty(exports, "TaskBaseMemberships", {
      enumerable: true,
      get: function get() {
        return _TaskBaseMemberships.TaskBaseMemberships;
      }
    });
    Object.defineProperty(exports, "TaskBaseSection", {
      enumerable: true,
      get: function get() {
        return _TaskBaseSection.TaskBaseSection;
      }
    });
    Object.defineProperty(exports, "TaskCompact", {
      enumerable: true,
      get: function get() {
        return _TaskCompact.TaskCompact;
      }
    });
    Object.defineProperty(exports, "TaskCountResponse", {
      enumerable: true,
      get: function get() {
        return _TaskCountResponse.TaskCountResponse;
      }
    });
    Object.defineProperty(exports, "TaskCountResponseData", {
      enumerable: true,
      get: function get() {
        return _TaskCountResponseData.TaskCountResponseData;
      }
    });
    Object.defineProperty(exports, "TaskDuplicateRequest", {
      enumerable: true,
      get: function get() {
        return _TaskDuplicateRequest.TaskDuplicateRequest;
      }
    });
    Object.defineProperty(exports, "TaskGidAddDependenciesBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidAddDependenciesBody.TaskGidAddDependenciesBody;
      }
    });
    Object.defineProperty(exports, "TaskGidAddDependentsBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidAddDependentsBody.TaskGidAddDependentsBody;
      }
    });
    Object.defineProperty(exports, "TaskGidAddFollowersBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidAddFollowersBody.TaskGidAddFollowersBody;
      }
    });
    Object.defineProperty(exports, "TaskGidAddProjectBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidAddProjectBody.TaskGidAddProjectBody;
      }
    });
    Object.defineProperty(exports, "TaskGidAddTagBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidAddTagBody.TaskGidAddTagBody;
      }
    });
    Object.defineProperty(exports, "TaskGidDuplicateBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidDuplicateBody.TaskGidDuplicateBody;
      }
    });
    Object.defineProperty(exports, "TaskGidRemoveDependenciesBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidRemoveDependenciesBody.TaskGidRemoveDependenciesBody;
      }
    });
    Object.defineProperty(exports, "TaskGidRemoveDependentsBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidRemoveDependentsBody.TaskGidRemoveDependentsBody;
      }
    });
    Object.defineProperty(exports, "TaskGidRemoveFollowersBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidRemoveFollowersBody.TaskGidRemoveFollowersBody;
      }
    });
    Object.defineProperty(exports, "TaskGidRemoveProjectBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidRemoveProjectBody.TaskGidRemoveProjectBody;
      }
    });
    Object.defineProperty(exports, "TaskGidRemoveTagBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidRemoveTagBody.TaskGidRemoveTagBody;
      }
    });
    Object.defineProperty(exports, "TaskGidSetParentBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidSetParentBody.TaskGidSetParentBody;
      }
    });
    Object.defineProperty(exports, "TaskGidStoriesBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidStoriesBody.TaskGidStoriesBody;
      }
    });
    Object.defineProperty(exports, "TaskGidSubtasksBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidSubtasksBody.TaskGidSubtasksBody;
      }
    });
    Object.defineProperty(exports, "TaskGidTimeTrackingEntriesBody", {
      enumerable: true,
      get: function get() {
        return _TaskGidTimeTrackingEntriesBody.TaskGidTimeTrackingEntriesBody;
      }
    });
    Object.defineProperty(exports, "TaskRemoveFollowersRequest", {
      enumerable: true,
      get: function get() {
        return _TaskRemoveFollowersRequest.TaskRemoveFollowersRequest;
      }
    });
    Object.defineProperty(exports, "TaskRemoveProjectRequest", {
      enumerable: true,
      get: function get() {
        return _TaskRemoveProjectRequest.TaskRemoveProjectRequest;
      }
    });
    Object.defineProperty(exports, "TaskRemoveTagRequest", {
      enumerable: true,
      get: function get() {
        return _TaskRemoveTagRequest.TaskRemoveTagRequest;
      }
    });
    Object.defineProperty(exports, "TaskRequest", {
      enumerable: true,
      get: function get() {
        return _TaskRequest.TaskRequest;
      }
    });
    Object.defineProperty(exports, "TaskResponse", {
      enumerable: true,
      get: function get() {
        return _TaskResponse.TaskResponse;
      }
    });
    Object.defineProperty(exports, "TaskResponseArray", {
      enumerable: true,
      get: function get() {
        return _TaskResponseArray.TaskResponseArray;
      }
    });
    Object.defineProperty(exports, "TaskResponseAssigneeSection", {
      enumerable: true,
      get: function get() {
        return _TaskResponseAssigneeSection.TaskResponseAssigneeSection;
      }
    });
    Object.defineProperty(exports, "TaskResponseCustomFields", {
      enumerable: true,
      get: function get() {
        return _TaskResponseCustomFields.TaskResponseCustomFields;
      }
    });
    Object.defineProperty(exports, "TaskResponseData", {
      enumerable: true,
      get: function get() {
        return _TaskResponseData.TaskResponseData;
      }
    });
    Object.defineProperty(exports, "TaskResponseParent", {
      enumerable: true,
      get: function get() {
        return _TaskResponseParent.TaskResponseParent;
      }
    });
    Object.defineProperty(exports, "TaskResponseTags", {
      enumerable: true,
      get: function get() {
        return _TaskResponseTags.TaskResponseTags;
      }
    });
    Object.defineProperty(exports, "TaskResponseWorkspace", {
      enumerable: true,
      get: function get() {
        return _TaskResponseWorkspace.TaskResponseWorkspace;
      }
    });
    Object.defineProperty(exports, "TaskSetParentRequest", {
      enumerable: true,
      get: function get() {
        return _TaskSetParentRequest.TaskSetParentRequest;
      }
    });
    Object.defineProperty(exports, "TasksApi", {
      enumerable: true,
      get: function get() {
        return _TasksApi.TasksApi;
      }
    });
    Object.defineProperty(exports, "TasksBody", {
      enumerable: true,
      get: function get() {
        return _TasksBody.TasksBody;
      }
    });
    Object.defineProperty(exports, "TasksTaskGidBody", {
      enumerable: true,
      get: function get() {
        return _TasksTaskGidBody.TasksTaskGidBody;
      }
    });
    Object.defineProperty(exports, "TeamAddUserRequest", {
      enumerable: true,
      get: function get() {
        return _TeamAddUserRequest.TeamAddUserRequest;
      }
    });
    Object.defineProperty(exports, "TeamBase", {
      enumerable: true,
      get: function get() {
        return _TeamBase.TeamBase;
      }
    });
    Object.defineProperty(exports, "TeamCompact", {
      enumerable: true,
      get: function get() {
        return _TeamCompact.TeamCompact;
      }
    });
    Object.defineProperty(exports, "TeamGidAddUserBody", {
      enumerable: true,
      get: function get() {
        return _TeamGidAddUserBody.TeamGidAddUserBody;
      }
    });
    Object.defineProperty(exports, "TeamGidProjectsBody", {
      enumerable: true,
      get: function get() {
        return _TeamGidProjectsBody.TeamGidProjectsBody;
      }
    });
    Object.defineProperty(exports, "TeamGidRemoveUserBody", {
      enumerable: true,
      get: function get() {
        return _TeamGidRemoveUserBody.TeamGidRemoveUserBody;
      }
    });
    Object.defineProperty(exports, "TeamMembershipBase", {
      enumerable: true,
      get: function get() {
        return _TeamMembershipBase.TeamMembershipBase;
      }
    });
    Object.defineProperty(exports, "TeamMembershipCompact", {
      enumerable: true,
      get: function get() {
        return _TeamMembershipCompact.TeamMembershipCompact;
      }
    });
    Object.defineProperty(exports, "TeamMembershipResponse", {
      enumerable: true,
      get: function get() {
        return _TeamMembershipResponse.TeamMembershipResponse;
      }
    });
    Object.defineProperty(exports, "TeamMembershipResponseArray", {
      enumerable: true,
      get: function get() {
        return _TeamMembershipResponseArray.TeamMembershipResponseArray;
      }
    });
    Object.defineProperty(exports, "TeamMembershipResponseData", {
      enumerable: true,
      get: function get() {
        return _TeamMembershipResponseData.TeamMembershipResponseData;
      }
    });
    Object.defineProperty(exports, "TeamMembershipsApi", {
      enumerable: true,
      get: function get() {
        return _TeamMembershipsApi.TeamMembershipsApi;
      }
    });
    Object.defineProperty(exports, "TeamRemoveUserRequest", {
      enumerable: true,
      get: function get() {
        return _TeamRemoveUserRequest.TeamRemoveUserRequest;
      }
    });
    Object.defineProperty(exports, "TeamRequest", {
      enumerable: true,
      get: function get() {
        return _TeamRequest.TeamRequest;
      }
    });
    Object.defineProperty(exports, "TeamResponse", {
      enumerable: true,
      get: function get() {
        return _TeamResponse.TeamResponse;
      }
    });
    Object.defineProperty(exports, "TeamResponseArray", {
      enumerable: true,
      get: function get() {
        return _TeamResponseArray.TeamResponseArray;
      }
    });
    Object.defineProperty(exports, "TeamResponseData", {
      enumerable: true,
      get: function get() {
        return _TeamResponseData.TeamResponseData;
      }
    });
    Object.defineProperty(exports, "TeamResponseOrganization", {
      enumerable: true,
      get: function get() {
        return _TeamResponseOrganization.TeamResponseOrganization;
      }
    });
    Object.defineProperty(exports, "TeamsApi", {
      enumerable: true,
      get: function get() {
        return _TeamsApi.TeamsApi;
      }
    });
    Object.defineProperty(exports, "TeamsBody", {
      enumerable: true,
      get: function get() {
        return _TeamsBody.TeamsBody;
      }
    });
    Object.defineProperty(exports, "TeamsTeamGidBody", {
      enumerable: true,
      get: function get() {
        return _TeamsTeamGidBody.TeamsTeamGidBody;
      }
    });
    Object.defineProperty(exports, "TemplateRole", {
      enumerable: true,
      get: function get() {
        return _TemplateRole.TemplateRole;
      }
    });
    Object.defineProperty(exports, "TimePeriodBase", {
      enumerable: true,
      get: function get() {
        return _TimePeriodBase.TimePeriodBase;
      }
    });
    Object.defineProperty(exports, "TimePeriodCompact", {
      enumerable: true,
      get: function get() {
        return _TimePeriodCompact.TimePeriodCompact;
      }
    });
    Object.defineProperty(exports, "TimePeriodResponse", {
      enumerable: true,
      get: function get() {
        return _TimePeriodResponse.TimePeriodResponse;
      }
    });
    Object.defineProperty(exports, "TimePeriodResponseArray", {
      enumerable: true,
      get: function get() {
        return _TimePeriodResponseArray.TimePeriodResponseArray;
      }
    });
    Object.defineProperty(exports, "TimePeriodResponseData", {
      enumerable: true,
      get: function get() {
        return _TimePeriodResponseData.TimePeriodResponseData;
      }
    });
    Object.defineProperty(exports, "TimePeriodsApi", {
      enumerable: true,
      get: function get() {
        return _TimePeriodsApi.TimePeriodsApi;
      }
    });
    Object.defineProperty(exports, "TimeTrackingEntriesApi", {
      enumerable: true,
      get: function get() {
        return _TimeTrackingEntriesApi.TimeTrackingEntriesApi;
      }
    });
    Object.defineProperty(exports, "TimeTrackingEntriesTimeTrackingEntryGidBody", {
      enumerable: true,
      get: function get() {
        return _TimeTrackingEntriesTimeTrackingEntryGidBody.TimeTrackingEntriesTimeTrackingEntryGidBody;
      }
    });
    Object.defineProperty(exports, "TimeTrackingEntryBase", {
      enumerable: true,
      get: function get() {
        return _TimeTrackingEntryBase.TimeTrackingEntryBase;
      }
    });
    Object.defineProperty(exports, "TimeTrackingEntryBaseData", {
      enumerable: true,
      get: function get() {
        return _TimeTrackingEntryBaseData.TimeTrackingEntryBaseData;
      }
    });
    Object.defineProperty(exports, "TimeTrackingEntryCompact", {
      enumerable: true,
      get: function get() {
        return _TimeTrackingEntryCompact.TimeTrackingEntryCompact;
      }
    });
    Object.defineProperty(exports, "TimeTrackingEntryCompactArray", {
      enumerable: true,
      get: function get() {
        return _TimeTrackingEntryCompactArray.TimeTrackingEntryCompactArray;
      }
    });
    Object.defineProperty(exports, "TypeaheadApi", {
      enumerable: true,
      get: function get() {
        return _TypeaheadApi.TypeaheadApi;
      }
    });
    Object.defineProperty(exports, "UpdateTimeTrackingEntryRequest", {
      enumerable: true,
      get: function get() {
        return _UpdateTimeTrackingEntryRequest.UpdateTimeTrackingEntryRequest;
      }
    });
    Object.defineProperty(exports, "UserBase", {
      enumerable: true,
      get: function get() {
        return _UserBase.UserBase;
      }
    });
    Object.defineProperty(exports, "UserBaseResponse", {
      enumerable: true,
      get: function get() {
        return _UserBaseResponse.UserBaseResponse;
      }
    });
    Object.defineProperty(exports, "UserBaseResponseData", {
      enumerable: true,
      get: function get() {
        return _UserBaseResponseData.UserBaseResponseData;
      }
    });
    Object.defineProperty(exports, "UserBaseResponsePhoto", {
      enumerable: true,
      get: function get() {
        return _UserBaseResponsePhoto.UserBaseResponsePhoto;
      }
    });
    Object.defineProperty(exports, "UserCompact", {
      enumerable: true,
      get: function get() {
        return _UserCompact.UserCompact;
      }
    });
    Object.defineProperty(exports, "UserRequest", {
      enumerable: true,
      get: function get() {
        return _UserRequest.UserRequest;
      }
    });
    Object.defineProperty(exports, "UserResponse", {
      enumerable: true,
      get: function get() {
        return _UserResponse.UserResponse;
      }
    });
    Object.defineProperty(exports, "UserResponseArray", {
      enumerable: true,
      get: function get() {
        return _UserResponseArray.UserResponseArray;
      }
    });
    Object.defineProperty(exports, "UserResponseData", {
      enumerable: true,
      get: function get() {
        return _UserResponseData.UserResponseData;
      }
    });
    Object.defineProperty(exports, "UserTaskListBase", {
      enumerable: true,
      get: function get() {
        return _UserTaskListBase.UserTaskListBase;
      }
    });
    Object.defineProperty(exports, "UserTaskListCompact", {
      enumerable: true,
      get: function get() {
        return _UserTaskListCompact.UserTaskListCompact;
      }
    });
    Object.defineProperty(exports, "UserTaskListRequest", {
      enumerable: true,
      get: function get() {
        return _UserTaskListRequest.UserTaskListRequest;
      }
    });
    Object.defineProperty(exports, "UserTaskListResponse", {
      enumerable: true,
      get: function get() {
        return _UserTaskListResponse.UserTaskListResponse;
      }
    });
    Object.defineProperty(exports, "UserTaskListResponseData", {
      enumerable: true,
      get: function get() {
        return _UserTaskListResponseData.UserTaskListResponseData;
      }
    });
    Object.defineProperty(exports, "UserTaskListsApi", {
      enumerable: true,
      get: function get() {
        return _UserTaskListsApi.UserTaskListsApi;
      }
    });
    Object.defineProperty(exports, "UsersApi", {
      enumerable: true,
      get: function get() {
        return _UsersApi.UsersApi;
      }
    });
    Object.defineProperty(exports, "WebhookCompact", {
      enumerable: true,
      get: function get() {
        return _WebhookCompact.WebhookCompact;
      }
    });
    Object.defineProperty(exports, "WebhookCompactResource", {
      enumerable: true,
      get: function get() {
        return _WebhookCompactResource.WebhookCompactResource;
      }
    });
    Object.defineProperty(exports, "WebhookFilter", {
      enumerable: true,
      get: function get() {
        return _WebhookFilter.WebhookFilter;
      }
    });
    Object.defineProperty(exports, "WebhookRequest", {
      enumerable: true,
      get: function get() {
        return _WebhookRequest.WebhookRequest;
      }
    });
    Object.defineProperty(exports, "WebhookRequestFilters", {
      enumerable: true,
      get: function get() {
        return _WebhookRequestFilters.WebhookRequestFilters;
      }
    });
    Object.defineProperty(exports, "WebhookResponse", {
      enumerable: true,
      get: function get() {
        return _WebhookResponse.WebhookResponse;
      }
    });
    Object.defineProperty(exports, "WebhookResponseArray", {
      enumerable: true,
      get: function get() {
        return _WebhookResponseArray.WebhookResponseArray;
      }
    });
    Object.defineProperty(exports, "WebhookResponseData", {
      enumerable: true,
      get: function get() {
        return _WebhookResponseData.WebhookResponseData;
      }
    });
    Object.defineProperty(exports, "WebhookUpdateRequest", {
      enumerable: true,
      get: function get() {
        return _WebhookUpdateRequest.WebhookUpdateRequest;
      }
    });
    Object.defineProperty(exports, "WebhooksApi", {
      enumerable: true,
      get: function get() {
        return _WebhooksApi.WebhooksApi;
      }
    });
    Object.defineProperty(exports, "WebhooksBody", {
      enumerable: true,
      get: function get() {
        return _WebhooksBody.WebhooksBody;
      }
    });
    Object.defineProperty(exports, "WebhooksWebhookGidBody", {
      enumerable: true,
      get: function get() {
        return _WebhooksWebhookGidBody.WebhooksWebhookGidBody;
      }
    });
    Object.defineProperty(exports, "WorkspaceAddUserRequest", {
      enumerable: true,
      get: function get() {
        return _WorkspaceAddUserRequest.WorkspaceAddUserRequest;
      }
    });
    Object.defineProperty(exports, "WorkspaceBase", {
      enumerable: true,
      get: function get() {
        return _WorkspaceBase.WorkspaceBase;
      }
    });
    Object.defineProperty(exports, "WorkspaceCompact", {
      enumerable: true,
      get: function get() {
        return _WorkspaceCompact.WorkspaceCompact;
      }
    });
    Object.defineProperty(exports, "WorkspaceGidAddUserBody", {
      enumerable: true,
      get: function get() {
        return _WorkspaceGidAddUserBody.WorkspaceGidAddUserBody;
      }
    });
    Object.defineProperty(exports, "WorkspaceGidProjectsBody", {
      enumerable: true,
      get: function get() {
        return _WorkspaceGidProjectsBody.WorkspaceGidProjectsBody;
      }
    });
    Object.defineProperty(exports, "WorkspaceGidRemoveUserBody", {
      enumerable: true,
      get: function get() {
        return _WorkspaceGidRemoveUserBody.WorkspaceGidRemoveUserBody;
      }
    });
    Object.defineProperty(exports, "WorkspaceGidTagsBody", {
      enumerable: true,
      get: function get() {
        return _WorkspaceGidTagsBody.WorkspaceGidTagsBody;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipBase", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipBase.WorkspaceMembershipBase;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipCompact", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipCompact.WorkspaceMembershipCompact;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipRequest", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipRequest.WorkspaceMembershipRequest;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipResponse", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipResponse.WorkspaceMembershipResponse;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipResponseArray", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipResponseArray.WorkspaceMembershipResponseArray;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipResponseData", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipResponseData.WorkspaceMembershipResponseData;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipResponseUserTaskList", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipResponseUserTaskList.WorkspaceMembershipResponseUserTaskList;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipResponseVacationDates", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipResponseVacationDates.WorkspaceMembershipResponseVacationDates;
      }
    });
    Object.defineProperty(exports, "WorkspaceMembershipsApi", {
      enumerable: true,
      get: function get() {
        return _WorkspaceMembershipsApi.WorkspaceMembershipsApi;
      }
    });
    Object.defineProperty(exports, "WorkspaceRemoveUserRequest", {
      enumerable: true,
      get: function get() {
        return _WorkspaceRemoveUserRequest.WorkspaceRemoveUserRequest;
      }
    });
    Object.defineProperty(exports, "WorkspaceRequest", {
      enumerable: true,
      get: function get() {
        return _WorkspaceRequest.WorkspaceRequest;
      }
    });
    Object.defineProperty(exports, "WorkspaceResponse", {
      enumerable: true,
      get: function get() {
        return _WorkspaceResponse.WorkspaceResponse;
      }
    });
    Object.defineProperty(exports, "WorkspaceResponseArray", {
      enumerable: true,
      get: function get() {
        return _WorkspaceResponseArray.WorkspaceResponseArray;
      }
    });
    Object.defineProperty(exports, "WorkspaceResponseData", {
      enumerable: true,
      get: function get() {
        return _WorkspaceResponseData.WorkspaceResponseData;
      }
    });
    Object.defineProperty(exports, "WorkspacesApi", {
      enumerable: true,
      get: function get() {
        return _WorkspacesApi.WorkspacesApi;
      }
    });
    Object.defineProperty(exports, "WorkspacesWorkspaceGidBody", {
      enumerable: true,
      get: function get() {
        return _WorkspacesWorkspaceGidBody.WorkspacesWorkspaceGidBody;
      }
    });
    var _ApiClient = require_ApiClient();
    var _AddCustomFieldSettingRequest = require_AddCustomFieldSettingRequest();
    var _AddFollowersRequest = require_AddFollowersRequest();
    var _AddMembersRequest = require_AddMembersRequest();
    var _AllOfProjectResponseOwner = require_AllOfProjectResponseOwner();
    var _AllOfProjectTemplateBaseOwner = require_AllOfProjectTemplateBaseOwner();
    var _AllOfProjectTemplateResponseOwner = require_AllOfProjectTemplateResponseOwner();
    var _AllOfStoryResponseNewDateValue = require_AllOfStoryResponseNewDateValue();
    var _AllOfStoryResponseOldDateValue = require_AllOfStoryResponseOldDateValue();
    var _AllOfUserTaskListBaseOwner = require_AllOfUserTaskListBaseOwner();
    var _AllOfUserTaskListBaseWorkspace = require_AllOfUserTaskListBaseWorkspace();
    var _AllOfUserTaskListCompactOwner = require_AllOfUserTaskListCompactOwner();
    var _AllOfUserTaskListCompactWorkspace = require_AllOfUserTaskListCompactWorkspace();
    var _AllOfUserTaskListRequestOwner = require_AllOfUserTaskListRequestOwner();
    var _AllOfUserTaskListRequestWorkspace = require_AllOfUserTaskListRequestWorkspace();
    var _AllOfUserTaskListResponseOwner = require_AllOfUserTaskListResponseOwner();
    var _AllOfUserTaskListResponseWorkspace = require_AllOfUserTaskListResponseWorkspace();
    var _AllOfWorkspaceMembershipResponseUserTaskListOwner = require_AllOfWorkspaceMembershipResponseUserTaskListOwner();
    var _AllOfWorkspaceMembershipResponseUserTaskListWorkspace = require_AllOfWorkspaceMembershipResponseUserTaskListWorkspace();
    var _AsanaNamedResource = require_AsanaNamedResource();
    var _AsanaNamedResourceArray = require_AsanaNamedResourceArray();
    var _AsanaResource = require_AsanaResource();
    var _AttachmentBase = require_AttachmentBase();
    var _AttachmentCompact = require_AttachmentCompact();
    var _AttachmentRequest = require_AttachmentRequest();
    var _AttachmentResponse = require_AttachmentResponse();
    var _AttachmentResponseArray = require_AttachmentResponseArray();
    var _AttachmentResponseData = require_AttachmentResponseData();
    var _AttachmentResponseParent = require_AttachmentResponseParent();
    var _AttachmentResponseParentCreatedBy = require_AttachmentResponseParentCreatedBy();
    var _AuditLogEvent = require_AuditLogEvent();
    var _AuditLogEventActor = require_AuditLogEventActor();
    var _AuditLogEventArray = require_AuditLogEventArray();
    var _AuditLogEventContext = require_AuditLogEventContext();
    var _AuditLogEventDetails = require_AuditLogEventDetails();
    var _AuditLogEventResource = require_AuditLogEventResource();
    var _BatchBody = require_BatchBody();
    var _BatchRequest = require_BatchRequest();
    var _BatchRequestAction = require_BatchRequestAction();
    var _BatchRequestActions = require_BatchRequestActions();
    var _BatchRequestOptions = require_BatchRequestOptions();
    var _BatchResponse = require_BatchResponse();
    var _BatchResponseArray = require_BatchResponseArray();
    var _CreateMembershipRequest = require_CreateMembershipRequest();
    var _CreateTimeTrackingEntryRequest = require_CreateTimeTrackingEntryRequest();
    var _CustomFieldBase = require_CustomFieldBase();
    var _CustomFieldBaseDateValue = require_CustomFieldBaseDateValue();
    var _CustomFieldBaseEnumOptions = require_CustomFieldBaseEnumOptions();
    var _CustomFieldBaseEnumValue = require_CustomFieldBaseEnumValue();
    var _CustomFieldCompact = require_CustomFieldCompact();
    var _CustomFieldGidEnumOptionsBody = require_CustomFieldGidEnumOptionsBody();
    var _CustomFieldRequest = require_CustomFieldRequest();
    var _CustomFieldResponse = require_CustomFieldResponse();
    var _CustomFieldResponseArray = require_CustomFieldResponseArray();
    var _CustomFieldResponseCreatedBy = require_CustomFieldResponseCreatedBy();
    var _CustomFieldResponseData = require_CustomFieldResponseData();
    var _CustomFieldResponsePeopleValue = require_CustomFieldResponsePeopleValue();
    var _CustomFieldSettingBase = require_CustomFieldSettingBase();
    var _CustomFieldSettingCompact = require_CustomFieldSettingCompact();
    var _CustomFieldSettingResponse = require_CustomFieldSettingResponse();
    var _CustomFieldSettingResponseArray = require_CustomFieldSettingResponseArray();
    var _CustomFieldSettingResponseCustomField = require_CustomFieldSettingResponseCustomField();
    var _CustomFieldSettingResponseData = require_CustomFieldSettingResponseData();
    var _CustomFieldSettingResponseParent = require_CustomFieldSettingResponseParent();
    var _CustomFieldSettingResponseProject = require_CustomFieldSettingResponseProject();
    var _CustomFieldsBody = require_CustomFieldsBody();
    var _CustomFieldsCustomFieldGidBody = require_CustomFieldsCustomFieldGidBody();
    var _DateVariableCompact = require_DateVariableCompact();
    var _DateVariableRequest = require_DateVariableRequest();
    var _EmptyResponse = require_EmptyResponse();
    var _EmptyResponseData = require_EmptyResponseData();
    var _EnumOption = require_EnumOption();
    var _EnumOptionBase = require_EnumOptionBase();
    var _EnumOptionData = require_EnumOptionData();
    var _EnumOptionInsertRequest = require_EnumOptionInsertRequest();
    var _EnumOptionRequest = require_EnumOptionRequest();
    var _EnumOptionsEnumOptionGidBody = require_EnumOptionsEnumOptionGidBody();
    var _EnumOptionsInsertBody = require_EnumOptionsInsertBody();
    var _Error = require_Error();
    var _ErrorResponse = require_ErrorResponse();
    var _ErrorResponseErrors = require_ErrorResponseErrors();
    var _EventResponse = require_EventResponse();
    var _EventResponseArray = require_EventResponseArray();
    var _EventResponseChange = require_EventResponseChange();
    var _EventResponseParent = require_EventResponseParent();
    var _EventResponseResource = require_EventResponseResource();
    var _EventResponseUser = require_EventResponseUser();
    var _GoalAddSubgoalRequest = require_GoalAddSubgoalRequest();
    var _GoalAddSupportingRelationshipRequest = require_GoalAddSupportingRelationshipRequest();
    var _GoalAddSupportingWorkRequest = require_GoalAddSupportingWorkRequest();
    var _GoalBase = require_GoalBase();
    var _GoalCompact = require_GoalCompact();
    var _GoalGidAddFollowersBody = require_GoalGidAddFollowersBody();
    var _GoalGidAddSupportingRelationshipBody = require_GoalGidAddSupportingRelationshipBody();
    var _GoalGidRemoveFollowersBody = require_GoalGidRemoveFollowersBody();
    var _GoalGidRemoveSupportingRelationshipBody = require_GoalGidRemoveSupportingRelationshipBody();
    var _GoalGidSetMetricBody = require_GoalGidSetMetricBody();
    var _GoalGidSetMetricCurrentValueBody = require_GoalGidSetMetricCurrentValueBody();
    var _GoalMembershipBase = require_GoalMembershipBase();
    var _GoalMembershipCompact = require_GoalMembershipCompact();
    var _GoalMembershipResponse = require_GoalMembershipResponse();
    var _GoalMembershipResponseUser = require_GoalMembershipResponseUser();
    var _GoalMembershipResponseWorkspace = require_GoalMembershipResponseWorkspace();
    var _GoalMetricBase = require_GoalMetricBase();
    var _GoalMetricCurrentValueRequest = require_GoalMetricCurrentValueRequest();
    var _GoalMetricRequest = require_GoalMetricRequest();
    var _GoalRelationshipBase = require_GoalRelationshipBase();
    var _GoalRelationshipBaseSupportedGoal = require_GoalRelationshipBaseSupportedGoal();
    var _GoalRelationshipBaseSupportingResource = require_GoalRelationshipBaseSupportingResource();
    var _GoalRelationshipCompact = require_GoalRelationshipCompact();
    var _GoalRelationshipRequest = require_GoalRelationshipRequest();
    var _GoalRelationshipResponse = require_GoalRelationshipResponse();
    var _GoalRelationshipResponseArray = require_GoalRelationshipResponseArray();
    var _GoalRelationshipResponseData = require_GoalRelationshipResponseData();
    var _GoalRelationshipsGoalRelationshipGidBody = require_GoalRelationshipsGoalRelationshipGidBody();
    var _GoalRemoveSubgoalRequest = require_GoalRemoveSubgoalRequest();
    var _GoalRemoveSupportingRelationshipRequest = require_GoalRemoveSupportingRelationshipRequest();
    var _GoalRequest = require_GoalRequest();
    var _GoalRequestBase = require_GoalRequestBase();
    var _GoalResponse = require_GoalResponse();
    var _GoalResponseArray = require_GoalResponseArray();
    var _GoalResponseCurrentStatusUpdate = require_GoalResponseCurrentStatusUpdate();
    var _GoalResponseData = require_GoalResponseData();
    var _GoalResponseLikes = require_GoalResponseLikes();
    var _GoalResponseMetric = require_GoalResponseMetric();
    var _GoalResponseTeam = require_GoalResponseTeam();
    var _GoalResponseTimePeriod = require_GoalResponseTimePeriod();
    var _GoalResponseWorkspace = require_GoalResponseWorkspace();
    var _GoalUpdateRequest = require_GoalUpdateRequest();
    var _GoalsBody = require_GoalsBody();
    var _GoalsGoalGidBody = require_GoalsGoalGidBody();
    var _InlineResponse = require_InlineResponse412();
    var _InlineResponse412Errors = require_InlineResponse412Errors();
    var _JobBase = require_JobBase();
    var _JobBaseNewProject = require_JobBaseNewProject();
    var _JobBaseNewProjectTemplate = require_JobBaseNewProjectTemplate();
    var _JobBaseNewTask = require_JobBaseNewTask();
    var _JobCompact = require_JobCompact();
    var _JobResponse = require_JobResponse();
    var _JobResponseData = require_JobResponseData();
    var _Like = require_Like();
    var _MemberCompact = require_MemberCompact();
    var _MembershipCompact = require_MembershipCompact();
    var _MembershipCompactGoal = require_MembershipCompactGoal();
    var _MembershipCompactMember = require_MembershipCompactMember();
    var _MembershipCompactParent = require_MembershipCompactParent();
    var _MembershipRequest = require_MembershipRequest();
    var _MembershipResponse = require_MembershipResponse();
    var _MembershipResponseArray = require_MembershipResponseArray();
    var _MembershipResponseData = require_MembershipResponseData();
    var _MembershipsBody = require_MembershipsBody();
    var _ModifyDependenciesRequest = require_ModifyDependenciesRequest();
    var _ModifyDependentsRequest = require_ModifyDependentsRequest();
    var _NextPage = require_NextPage();
    var _OrganizationExportBase = require_OrganizationExportBase();
    var _OrganizationExportCompact = require_OrganizationExportCompact();
    var _OrganizationExportRequest = require_OrganizationExportRequest();
    var _OrganizationExportResponse = require_OrganizationExportResponse();
    var _OrganizationExportResponseData = require_OrganizationExportResponseData();
    var _OrganizationExportsBody = require_OrganizationExportsBody();
    var _PortfolioAddItemRequest = require_PortfolioAddItemRequest();
    var _PortfolioBase = require_PortfolioBase();
    var _PortfolioCompact = require_PortfolioCompact();
    var _PortfolioGidAddCustomFieldSettingBody = require_PortfolioGidAddCustomFieldSettingBody();
    var _PortfolioGidAddItemBody = require_PortfolioGidAddItemBody();
    var _PortfolioGidAddMembersBody = require_PortfolioGidAddMembersBody();
    var _PortfolioGidRemoveCustomFieldSettingBody = require_PortfolioGidRemoveCustomFieldSettingBody();
    var _PortfolioGidRemoveItemBody = require_PortfolioGidRemoveItemBody();
    var _PortfolioGidRemoveMembersBody = require_PortfolioGidRemoveMembersBody();
    var _PortfolioMembershipBase = require_PortfolioMembershipBase();
    var _PortfolioMembershipBasePortfolio = require_PortfolioMembershipBasePortfolio();
    var _PortfolioMembershipCompact = require_PortfolioMembershipCompact();
    var _PortfolioMembershipResponse = require_PortfolioMembershipResponse();
    var _PortfolioMembershipResponseArray = require_PortfolioMembershipResponseArray();
    var _PortfolioMembershipResponseData = require_PortfolioMembershipResponseData();
    var _PortfolioRemoveItemRequest = require_PortfolioRemoveItemRequest();
    var _PortfolioRequest = require_PortfolioRequest();
    var _PortfolioResponse = require_PortfolioResponse();
    var _PortfolioResponseArray = require_PortfolioResponseArray();
    var _PortfolioResponseCurrentStatusUpdate = require_PortfolioResponseCurrentStatusUpdate();
    var _PortfolioResponseCustomFieldSettings = require_PortfolioResponseCustomFieldSettings();
    var _PortfolioResponseCustomFields = require_PortfolioResponseCustomFields();
    var _PortfolioResponseData = require_PortfolioResponseData();
    var _PortfolioResponseWorkspace = require_PortfolioResponseWorkspace();
    var _PortfoliosBody = require_PortfoliosBody();
    var _PortfoliosPortfolioGidBody = require_PortfoliosPortfolioGidBody();
    var _Preview = require_Preview();
    var _ProjectBase = require_ProjectBase();
    var _ProjectBaseCurrentStatus = require_ProjectBaseCurrentStatus();
    var _ProjectBaseCurrentStatusUpdate = require_ProjectBaseCurrentStatusUpdate();
    var _ProjectBriefBase = require_ProjectBriefBase();
    var _ProjectBriefCompact = require_ProjectBriefCompact();
    var _ProjectBriefRequest = require_ProjectBriefRequest();
    var _ProjectBriefResponse = require_ProjectBriefResponse();
    var _ProjectBriefResponseData = require_ProjectBriefResponseData();
    var _ProjectBriefResponseProject = require_ProjectBriefResponseProject();
    var _ProjectBriefsProjectBriefGidBody = require_ProjectBriefsProjectBriefGidBody();
    var _ProjectCompact = require_ProjectCompact();
    var _ProjectDuplicateRequest = require_ProjectDuplicateRequest();
    var _ProjectDuplicateRequestScheduleDates = require_ProjectDuplicateRequestScheduleDates();
    var _ProjectGidAddCustomFieldSettingBody = require_ProjectGidAddCustomFieldSettingBody();
    var _ProjectGidAddFollowersBody = require_ProjectGidAddFollowersBody();
    var _ProjectGidAddMembersBody = require_ProjectGidAddMembersBody();
    var _ProjectGidDuplicateBody = require_ProjectGidDuplicateBody();
    var _ProjectGidProjectBriefsBody = require_ProjectGidProjectBriefsBody();
    var _ProjectGidProjectStatusesBody = require_ProjectGidProjectStatusesBody();
    var _ProjectGidRemoveCustomFieldSettingBody = require_ProjectGidRemoveCustomFieldSettingBody();
    var _ProjectGidRemoveFollowersBody = require_ProjectGidRemoveFollowersBody();
    var _ProjectGidRemoveMembersBody = require_ProjectGidRemoveMembersBody();
    var _ProjectGidSaveAsTemplateBody = require_ProjectGidSaveAsTemplateBody();
    var _ProjectGidSectionsBody = require_ProjectGidSectionsBody();
    var _ProjectMembershipBase = require_ProjectMembershipBase();
    var _ProjectMembershipCompact = require_ProjectMembershipCompact();
    var _ProjectMembershipCompactArray = require_ProjectMembershipCompactArray();
    var _ProjectMembershipCompactResponse = require_ProjectMembershipCompactResponse();
    var _ProjectMembershipNormalResponse = require_ProjectMembershipNormalResponse();
    var _ProjectMembershipNormalResponseData = require_ProjectMembershipNormalResponseData();
    var _ProjectRequest = require_ProjectRequest();
    var _ProjectResponse = require_ProjectResponse();
    var _ProjectResponseArray = require_ProjectResponseArray();
    var _ProjectResponseCompletedBy = require_ProjectResponseCompletedBy();
    var _ProjectResponseCreatedFromTemplate = require_ProjectResponseCreatedFromTemplate();
    var _ProjectResponseData = require_ProjectResponseData();
    var _ProjectResponseProjectBrief = require_ProjectResponseProjectBrief();
    var _ProjectResponseTeam = require_ProjectResponseTeam();
    var _ProjectResponseWorkspace = require_ProjectResponseWorkspace();
    var _ProjectSaveAsTemplateRequest = require_ProjectSaveAsTemplateRequest();
    var _ProjectSectionInsertRequest = require_ProjectSectionInsertRequest();
    var _ProjectStatusBase = require_ProjectStatusBase();
    var _ProjectStatusCompact = require_ProjectStatusCompact();
    var _ProjectStatusRequest = require_ProjectStatusRequest();
    var _ProjectStatusResponse = require_ProjectStatusResponse();
    var _ProjectStatusResponseArray = require_ProjectStatusResponseArray();
    var _ProjectStatusResponseData = require_ProjectStatusResponseData();
    var _ProjectTemplateBase = require_ProjectTemplateBase();
    var _ProjectTemplateBaseRequestedDates = require_ProjectTemplateBaseRequestedDates();
    var _ProjectTemplateBaseRequestedRoles = require_ProjectTemplateBaseRequestedRoles();
    var _ProjectTemplateBaseTeam = require_ProjectTemplateBaseTeam();
    var _ProjectTemplateCompact = require_ProjectTemplateCompact();
    var _ProjectTemplateGidInstantiateProjectBody = require_ProjectTemplateGidInstantiateProjectBody();
    var _ProjectTemplateInstantiateProjectRequest = require_ProjectTemplateInstantiateProjectRequest();
    var _ProjectTemplateInstantiateProjectRequestRequestedDates = require_ProjectTemplateInstantiateProjectRequestRequestedDates();
    var _ProjectTemplateInstantiateProjectRequestRequestedRoles = require_ProjectTemplateInstantiateProjectRequestRequestedRoles();
    var _ProjectTemplateResponse = require_ProjectTemplateResponse();
    var _ProjectTemplateResponseArray = require_ProjectTemplateResponseArray();
    var _ProjectTemplateResponseData = require_ProjectTemplateResponseData();
    var _ProjectUpdateRequest = require_ProjectUpdateRequest();
    var _ProjectsBody = require_ProjectsBody();
    var _ProjectsProjectGidBody = require_ProjectsProjectGidBody();
    var _RemoveCustomFieldSettingRequest = require_RemoveCustomFieldSettingRequest();
    var _RemoveFollowersRequest = require_RemoveFollowersRequest();
    var _RemoveMembersRequest = require_RemoveMembersRequest();
    var _RequestedRoleRequest = require_RequestedRoleRequest();
    var _RuleTriggerGidRunBody = require_RuleTriggerGidRunBody();
    var _RuleTriggerRequest = require_RuleTriggerRequest();
    var _RuleTriggerResponse = require_RuleTriggerResponse();
    var _RuleTriggerResponseData = require_RuleTriggerResponseData();
    var _SectionBase = require_SectionBase();
    var _SectionCompact = require_SectionCompact();
    var _SectionGidAddTaskBody = require_SectionGidAddTaskBody();
    var _SectionRequest = require_SectionRequest();
    var _SectionResponse = require_SectionResponse();
    var _SectionResponseArray = require_SectionResponseArray();
    var _SectionResponseData = require_SectionResponseData();
    var _SectionTaskInsertRequest = require_SectionTaskInsertRequest();
    var _SectionsInsertBody = require_SectionsInsertBody();
    var _SectionsSectionGidBody = require_SectionsSectionGidBody();
    var _StatusUpdateBase = require_StatusUpdateBase();
    var _StatusUpdateCompact = require_StatusUpdateCompact();
    var _StatusUpdateRequest = require_StatusUpdateRequest();
    var _StatusUpdateResponse = require_StatusUpdateResponse();
    var _StatusUpdateResponseArray = require_StatusUpdateResponseArray();
    var _StatusUpdateResponseData = require_StatusUpdateResponseData();
    var _StatusUpdateResponseParent = require_StatusUpdateResponseParent();
    var _StatusUpdatesBody = require_StatusUpdatesBody();
    var _StoriesStoryGidBody = require_StoriesStoryGidBody();
    var _StoryBase = require_StoryBase();
    var _StoryCompact = require_StoryCompact();
    var _StoryRequest = require_StoryRequest();
    var _StoryResponse = require_StoryResponse();
    var _StoryResponseArray = require_StoryResponseArray();
    var _StoryResponseAssignee = require_StoryResponseAssignee();
    var _StoryResponseCustomField = require_StoryResponseCustomField();
    var _StoryResponseData = require_StoryResponseData();
    var _StoryResponseDates = require_StoryResponseDates();
    var _StoryResponseOldDates = require_StoryResponseOldDates();
    var _StoryResponseOldEnumValue = require_StoryResponseOldEnumValue();
    var _StoryResponseOldSection = require_StoryResponseOldSection();
    var _StoryResponsePreviews = require_StoryResponsePreviews();
    var _StoryResponseProject = require_StoryResponseProject();
    var _StoryResponseStory = require_StoryResponseStory();
    var _StoryResponseTag = require_StoryResponseTag();
    var _StoryResponseTarget = require_StoryResponseTarget();
    var _StoryResponseTask = require_StoryResponseTask();
    var _TagBase = require_TagBase();
    var _TagCompact = require_TagCompact();
    var _TagRequest = require_TagRequest();
    var _TagResponse = require_TagResponse();
    var _TagResponseArray = require_TagResponseArray();
    var _TagResponseData = require_TagResponseData();
    var _TagsBody = require_TagsBody();
    var _TaskAddFollowersRequest = require_TaskAddFollowersRequest();
    var _TaskAddProjectRequest = require_TaskAddProjectRequest();
    var _TaskAddTagRequest = require_TaskAddTagRequest();
    var _TaskBase = require_TaskBase();
    var _TaskBaseCompletedBy = require_TaskBaseCompletedBy();
    var _TaskBaseDependencies = require_TaskBaseDependencies();
    var _TaskBaseExternal = require_TaskBaseExternal();
    var _TaskBaseMemberships = require_TaskBaseMemberships();
    var _TaskBaseSection = require_TaskBaseSection();
    var _TaskCompact = require_TaskCompact();
    var _TaskCountResponse = require_TaskCountResponse();
    var _TaskCountResponseData = require_TaskCountResponseData();
    var _TaskDuplicateRequest = require_TaskDuplicateRequest();
    var _TaskGidAddDependenciesBody = require_TaskGidAddDependenciesBody();
    var _TaskGidAddDependentsBody = require_TaskGidAddDependentsBody();
    var _TaskGidAddFollowersBody = require_TaskGidAddFollowersBody();
    var _TaskGidAddProjectBody = require_TaskGidAddProjectBody();
    var _TaskGidAddTagBody = require_TaskGidAddTagBody();
    var _TaskGidDuplicateBody = require_TaskGidDuplicateBody();
    var _TaskGidRemoveDependenciesBody = require_TaskGidRemoveDependenciesBody();
    var _TaskGidRemoveDependentsBody = require_TaskGidRemoveDependentsBody();
    var _TaskGidRemoveFollowersBody = require_TaskGidRemoveFollowersBody();
    var _TaskGidRemoveProjectBody = require_TaskGidRemoveProjectBody();
    var _TaskGidRemoveTagBody = require_TaskGidRemoveTagBody();
    var _TaskGidSetParentBody = require_TaskGidSetParentBody();
    var _TaskGidStoriesBody = require_TaskGidStoriesBody();
    var _TaskGidSubtasksBody = require_TaskGidSubtasksBody();
    var _TaskGidTimeTrackingEntriesBody = require_TaskGidTimeTrackingEntriesBody();
    var _TaskRemoveFollowersRequest = require_TaskRemoveFollowersRequest();
    var _TaskRemoveProjectRequest = require_TaskRemoveProjectRequest();
    var _TaskRemoveTagRequest = require_TaskRemoveTagRequest();
    var _TaskRequest = require_TaskRequest();
    var _TaskResponse = require_TaskResponse();
    var _TaskResponseArray = require_TaskResponseArray();
    var _TaskResponseAssigneeSection = require_TaskResponseAssigneeSection();
    var _TaskResponseCustomFields = require_TaskResponseCustomFields();
    var _TaskResponseData = require_TaskResponseData();
    var _TaskResponseParent = require_TaskResponseParent();
    var _TaskResponseTags = require_TaskResponseTags();
    var _TaskResponseWorkspace = require_TaskResponseWorkspace();
    var _TaskSetParentRequest = require_TaskSetParentRequest();
    var _TasksBody = require_TasksBody();
    var _TasksTaskGidBody = require_TasksTaskGidBody();
    var _TeamAddUserRequest = require_TeamAddUserRequest();
    var _TeamBase = require_TeamBase();
    var _TeamCompact = require_TeamCompact();
    var _TeamGidAddUserBody = require_TeamGidAddUserBody();
    var _TeamGidProjectsBody = require_TeamGidProjectsBody();
    var _TeamGidRemoveUserBody = require_TeamGidRemoveUserBody();
    var _TeamMembershipBase = require_TeamMembershipBase();
    var _TeamMembershipCompact = require_TeamMembershipCompact();
    var _TeamMembershipResponse = require_TeamMembershipResponse();
    var _TeamMembershipResponseArray = require_TeamMembershipResponseArray();
    var _TeamMembershipResponseData = require_TeamMembershipResponseData();
    var _TeamRemoveUserRequest = require_TeamRemoveUserRequest();
    var _TeamRequest = require_TeamRequest();
    var _TeamResponse = require_TeamResponse();
    var _TeamResponseArray = require_TeamResponseArray();
    var _TeamResponseData = require_TeamResponseData();
    var _TeamResponseOrganization = require_TeamResponseOrganization();
    var _TeamsBody = require_TeamsBody();
    var _TeamsTeamGidBody = require_TeamsTeamGidBody();
    var _TemplateRole = require_TemplateRole();
    var _TimePeriodBase = require_TimePeriodBase();
    var _TimePeriodCompact = require_TimePeriodCompact();
    var _TimePeriodResponse = require_TimePeriodResponse();
    var _TimePeriodResponseArray = require_TimePeriodResponseArray();
    var _TimePeriodResponseData = require_TimePeriodResponseData();
    var _TimeTrackingEntriesTimeTrackingEntryGidBody = require_TimeTrackingEntriesTimeTrackingEntryGidBody();
    var _TimeTrackingEntryBase = require_TimeTrackingEntryBase();
    var _TimeTrackingEntryBaseData = require_TimeTrackingEntryBaseData();
    var _TimeTrackingEntryCompact = require_TimeTrackingEntryCompact();
    var _TimeTrackingEntryCompactArray = require_TimeTrackingEntryCompactArray();
    var _UpdateTimeTrackingEntryRequest = require_UpdateTimeTrackingEntryRequest();
    var _UserBase = require_UserBase();
    var _UserBaseResponse = require_UserBaseResponse();
    var _UserBaseResponseData = require_UserBaseResponseData();
    var _UserBaseResponsePhoto = require_UserBaseResponsePhoto();
    var _UserCompact = require_UserCompact();
    var _UserRequest = require_UserRequest();
    var _UserResponse = require_UserResponse();
    var _UserResponseArray = require_UserResponseArray();
    var _UserResponseData = require_UserResponseData();
    var _UserTaskListBase = require_UserTaskListBase();
    var _UserTaskListCompact = require_UserTaskListCompact();
    var _UserTaskListRequest = require_UserTaskListRequest();
    var _UserTaskListResponse = require_UserTaskListResponse();
    var _UserTaskListResponseData = require_UserTaskListResponseData();
    var _WebhookCompact = require_WebhookCompact();
    var _WebhookCompactResource = require_WebhookCompactResource();
    var _WebhookFilter = require_WebhookFilter();
    var _WebhookRequest = require_WebhookRequest();
    var _WebhookRequestFilters = require_WebhookRequestFilters();
    var _WebhookResponse = require_WebhookResponse();
    var _WebhookResponseArray = require_WebhookResponseArray();
    var _WebhookResponseData = require_WebhookResponseData();
    var _WebhookUpdateRequest = require_WebhookUpdateRequest();
    var _WebhooksBody = require_WebhooksBody();
    var _WebhooksWebhookGidBody = require_WebhooksWebhookGidBody();
    var _WorkspaceAddUserRequest = require_WorkspaceAddUserRequest();
    var _WorkspaceBase = require_WorkspaceBase();
    var _WorkspaceCompact = require_WorkspaceCompact();
    var _WorkspaceGidAddUserBody = require_WorkspaceGidAddUserBody();
    var _WorkspaceGidProjectsBody = require_WorkspaceGidProjectsBody();
    var _WorkspaceGidRemoveUserBody = require_WorkspaceGidRemoveUserBody();
    var _WorkspaceGidTagsBody = require_WorkspaceGidTagsBody();
    var _WorkspaceMembershipBase = require_WorkspaceMembershipBase();
    var _WorkspaceMembershipCompact = require_WorkspaceMembershipCompact();
    var _WorkspaceMembershipRequest = require_WorkspaceMembershipRequest();
    var _WorkspaceMembershipResponse = require_WorkspaceMembershipResponse();
    var _WorkspaceMembershipResponseArray = require_WorkspaceMembershipResponseArray();
    var _WorkspaceMembershipResponseData = require_WorkspaceMembershipResponseData();
    var _WorkspaceMembershipResponseUserTaskList = require_WorkspaceMembershipResponseUserTaskList();
    var _WorkspaceMembershipResponseVacationDates = require_WorkspaceMembershipResponseVacationDates();
    var _WorkspaceRemoveUserRequest = require_WorkspaceRemoveUserRequest();
    var _WorkspaceRequest = require_WorkspaceRequest();
    var _WorkspaceResponse = require_WorkspaceResponse();
    var _WorkspaceResponseArray = require_WorkspaceResponseArray();
    var _WorkspaceResponseData = require_WorkspaceResponseData();
    var _WorkspacesWorkspaceGidBody = require_WorkspacesWorkspaceGidBody();
    var _AttachmentsApi = require_AttachmentsApi();
    var _AuditLogAPIApi = require_AuditLogAPIApi();
    var _BatchAPIApi = require_BatchAPIApi();
    var _CustomFieldSettingsApi = require_CustomFieldSettingsApi();
    var _CustomFieldsApi = require_CustomFieldsApi();
    var _EventsApi = require_EventsApi();
    var _GoalRelationshipsApi = require_GoalRelationshipsApi();
    var _GoalsApi = require_GoalsApi();
    var _JobsApi = require_JobsApi();
    var _MembershipsApi = require_MembershipsApi();
    var _OrganizationExportsApi = require_OrganizationExportsApi();
    var _PortfolioMembershipsApi = require_PortfolioMembershipsApi();
    var _PortfoliosApi = require_PortfoliosApi();
    var _ProjectBriefsApi = require_ProjectBriefsApi();
    var _ProjectMembershipsApi = require_ProjectMembershipsApi();
    var _ProjectStatusesApi = require_ProjectStatusesApi();
    var _ProjectTemplatesApi = require_ProjectTemplatesApi();
    var _ProjectsApi = require_ProjectsApi();
    var _RulesApi = require_RulesApi();
    var _SectionsApi = require_SectionsApi();
    var _StatusUpdatesApi = require_StatusUpdatesApi();
    var _StoriesApi = require_StoriesApi();
    var _TagsApi = require_TagsApi();
    var _TasksApi = require_TasksApi();
    var _TeamMembershipsApi = require_TeamMembershipsApi();
    var _TeamsApi = require_TeamsApi();
    var _TimePeriodsApi = require_TimePeriodsApi();
    var _TimeTrackingEntriesApi = require_TimeTrackingEntriesApi();
    var _TypeaheadApi = require_TypeaheadApi();
    var _UserTaskListsApi = require_UserTaskListsApi();
    var _UsersApi = require_UsersApi();
    var _WebhooksApi = require_WebhooksApi();
    var _WorkspaceMembershipsApi = require_WorkspaceMembershipsApi();
    var _WorkspacesApi = require_WorkspacesApi();
  }
});

// src/index.ts
var import_core = __toESM(require_core());

// src/action.ts
var core = __toESM(require_core());
var github = __toESM(require_github());

// src/asana-client.ts
var import_util = require("util");
var import_asana = __toESM(require_dist());
var AsanaClient = class {
  constructor(asanaPAT) {
    const defaultClient = import_asana.default.ApiClient.instance;
    const oauth2 = defaultClient.authentications["oauth2"];
    oauth2.accessToken = asanaPAT;
    this.storiesApi = new import_asana.default.StoriesApi();
    this.tasksApi = new import_asana.default.TasksApi();
    this.attachmentsApi = new import_asana.default.AttachmentsApi();
    this.sectionsApi = new import_asana.default.SectionsApi();
  }
  /**
   * Add a comment to a task
   * @param taskId
   * @param commentId
   * @param text
   * @param isPinned
   */
  async addComment(taskId, commentId, text, isPinned) {
    const data = {
      text,
      is_pinned: isPinned
    };
    const body = new import_asana.default.TaskGidStoriesBody.constructFromObject({ data });
    const opts = {};
    return await (0, import_util.promisify)(this.storiesApi.createStoryForTask).bind(
      this.storiesApi
    )(body, taskId, opts);
  }
  /**
   * Find a comment
   * @param taskId
   * @param commentId
   */
  async findComment(taskId, commentId) {
    const opts = {
      limit: 200
    };
    const comments = await (0, import_util.promisify)(this.storiesApi.createStoryForTask).bind(
      this.storiesApi
    )(taskId, opts);
    return comments.find((c) => c.gid === commentId);
  }
  /**
   * Update a comment
   * @param taskId
   */
  async completeTask(taskId) {
    let apiInstance = new import_asana.default.TasksApi();
    let body = new import_asana.default.TasksTaskGidBody.constructFromObject({
      data: {
        is_completed: true
      }
    });
    let opts = {};
    return (0, import_util.promisify)(apiInstance.updateTask).bind(apiInstance)(
      taskId,
      body,
      opts
    );
  }
  /**
   * Remove a comment
   * @param commentId
   */
  async removeComment(commentId) {
    return (0, import_util.promisify)(this.storiesApi.deleteStory).bind(this.storiesApi)(
      commentId
    );
  }
  /**
   * Get a task
   * @param taskId
   * @param fields
   */
  async getTask(taskId, fields) {
    const opts = {
      opt_fields: fields
    };
    return (0, import_util.promisify)(this.tasksApi.getTask).bind(this.tasksApi)(taskId, opts);
  }
  /**
   * Move a task to a section
   * @param taskId
   * @param targets
   */
  async moveSection(taskId, targets) {
    const task = await this.getTask(taskId, ["projects", "projects.name"]);
    targets.map(async (t) => {
      const project = task.data.projects.find((p) => p.name === t.project);
      if (!project) {
        return;
      }
      const sections = await (0, import_util.promisify)(
        this.sectionsApi.getSectionsForProject
      ).bind(this.sectionsApi)(project.gid, {
        opt_fields: ["name"]
      });
      const targetSection = sections.data.find((s) => s.name === t.section);
      if (!targetSection) {
        return;
      }
      let opts = {
        body: new import_asana.default.SectionGidAddTaskBody.constructFromObject({
          data: {
            task: taskId
          }
        })
      };
      await (0, import_util.promisify)(this.sectionsApi.addTaskForSection).bind(
        this.sectionsApi
      )(targetSection.gid, opts);
    });
  }
  /**
   * Add an attachment to a task
   * @param taskId
   * @param prName
   * @param prUrl
   */
  async addAttachments(taskId, prName, prUrl) {
    const opts = {
      resource_subtype: "external",
      parent: taskId,
      url: prUrl,
      name: prName,
      connect_to_app: false
    };
    return await (0, import_util.promisify)(this.attachmentsApi.createAttachmentForObject).bind(
      this.attachmentsApi
    )(opts);
  }
};

// src/action.ts
async function action() {
  var _a, _b, _c;
  const ASANA_PAT = core.getInput("asana-pat", { required: true });
  const ACTION = core.getInput("action", { required: true });
  const TRIGGER_PHRASE = core.getInput("trigger-phrase") || "";
  const PULL_REQUEST = github.context.payload.pull_request;
  const REGEX_STRING = `${TRIGGER_PHRASE}(?:\\s*)https:\\/\\/app.asana.com\\/(\\d+)\\/(?<project>\\d+)\\/(?<task>\\d+)`;
  const REGEX = new RegExp(REGEX_STRING, "g");
  const client = await new AsanaClient(ASANA_PAT);
  if (!(PULL_REQUEST == null ? void 0 : PULL_REQUEST.body)) {
    return;
  }
  const foundAsanaTasks = [];
  let parseAsanaURL;
  while ((parseAsanaURL = REGEX.exec(PULL_REQUEST.body)) !== null) {
    const taskId = (_a = parseAsanaURL.groups) == null ? void 0 : _a.task;
    if (!taskId) {
      core.error(
        `Invalid Asana task URL after the trigger phrase ${TRIGGER_PHRASE}`
      );
      continue;
    }
    foundAsanaTasks.push(taskId);
  }
  console.info(
    `found ${foundAsanaTasks.length} taskIds:`,
    foundAsanaTasks.join(",")
  );
  console.info("calling", ACTION);
  switch (ACTION) {
    case "assert-link": {
      const githubToken = core.getInput("github-token", { required: true });
      const linkRequired = core.getInput("link-required", { required: true }) === "true";
      const octokit = new github.GitHub(githubToken);
      const statusState = !linkRequired || foundAsanaTasks.length > 0 ? "success" : "error";
      core.info(
        `setting ${statusState} for ${(_b = github.context.payload.pull_request) == null ? void 0 : _b.head.sha}`
      );
      await octokit.repos.createStatus({
        ...github.context.repo,
        context: "asana-link-presence",
        state: statusState,
        description: "asana link not found",
        sha: (_c = github.context.payload.pull_request) == null ? void 0 : _c.head.sha
      });
      break;
    }
    case "add-comment": {
      const commentId = core.getInput("comment-id");
      const htmlText = core.getInput("text", { required: true });
      const isPinned = core.getInput("is-pinned") === "true";
      const comments = [];
      for (const taskId of foundAsanaTasks) {
        if (commentId) {
          const comment2 = await client.findComment(taskId, commentId);
          if (comment2) {
            console.info("found existing comment", comment2.gid);
            continue;
          }
        }
        const comment = await client.addComment(
          taskId,
          commentId,
          htmlText,
          isPinned
        );
        comments.push(comment);
      }
      return comments;
    }
    case "remove-comment": {
      const commentId = core.getInput("comment-id", { required: true });
      const removedCommentIds = [];
      for (const taskId of foundAsanaTasks) {
        const comment = await client.findComment(taskId, commentId);
        if (comment) {
          console.info("removing comment", comment.gid);
          try {
            await client.removeComment(comment.gid);
          } catch (error2) {
            console.error("rejecting promise", error2);
          }
          removedCommentIds.push(comment.gid);
        }
      }
      return removedCommentIds;
    }
    case "complete-task": {
      const isComplete = core.getInput("is-complete") === "true";
      const taskIds = [];
      for (const taskId of foundAsanaTasks) {
        console.info(
          "marking task",
          taskId,
          isComplete ? "complete" : "incomplete"
        );
        try {
          await client.completeTask(taskId);
        } catch (error2) {
          console.error("rejecting promise", error2);
        }
        taskIds.push(taskId);
      }
      return taskIds;
    }
    case "move-section": {
      const targetJSON = core.getInput("targets", { required: true });
      const targets = JSON.parse(targetJSON);
      const movedTasks = [];
      for (const taskId of foundAsanaTasks) {
        await client.moveSection(taskId, targets);
        movedTasks.push(taskId);
      }
      return movedTasks;
    }
    case "attach-pr": {
      if (!PULL_REQUEST.html_url) {
        core.error("Pull request url not found");
        return;
      }
      for (const taskId of foundAsanaTasks) {
        await client.addAttachments(
          taskId,
          PULL_REQUEST.title,
          PULL_REQUEST.html_url
        );
      }
      return;
    }
    default:
      core.setFailed(`unexpected action ${ACTION}`);
  }
}
var action_default = action;

// src/index.ts
async function run() {
  try {
    await action_default();
  } catch (error2) {
    import_core.default.setFailed(error2.message);
  }
}
run();
/*! Bundled license information:

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-plain-object/dist/is-plain-object.js:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

methods/index.js:
  (*!
   * methods
   * Copyright(c) 2013-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
